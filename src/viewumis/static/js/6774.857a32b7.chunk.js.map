{"version":3,"file":"static/js/6774.857a32b7.chunk.js","mappings":"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","sources":["feautures/Admin/Reference/ChartAccount.tsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/material/colors/pink.js"],"sourcesContent":["import { useContext, useState, useRef, useEffect, useId } from \"react\";\nimport { Button } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { pink } from \"@mui/material/colors\";\nimport { AuthContext } from \"../../../components/AuthContext\";\nimport { useMutation } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport { wait } from \"../../../lib/wait\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LoadingButton } from \"@mui/lab\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../lib/confirmationAlert\";\nimport PageHelmet from \"../../../components/Helmet\";\nimport { TextInput } from \"../../../components/UpwardFields\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport { DataGridViewReact } from \"../../../components/DataGridViewReact\";\nimport { Loading } from \"../../../components/Loading\";\nimport { Autocomplete } from \"../Task/Accounting/PettyCash\";\nimport \"../../../style/monbileview/reference/reference.css\";\n\nexport const bankColumn = [\n  { key: \"Acct_Code\", label: \"Account Code\", width: 200 },\n  { key: \"Acct_Title\", label: \"Account Name / Account Title\", width: 500 },\n  { key: \"Short\", label: \"Short Name\", width: 200 },\n  { key: \"Account\", label: \"Account Type\", width: 200 },\n  { key: \"Acct_Type\", label: \"Account Type\", width: 200 },\n  { key: \"SubAccnt\", label: \"Sub Account?\", width: 100 },\n  { key: \"IDNo\", label: \"I.D?\", width: 100 },\n  { key: \"Inactive\", label: \"Inactive?\", width: 100 },\n];\n\nexport default function SubAccount() {\n  const { myAxios, user } = useContext(AuthContext);\n  const inputSearchRef = useRef<HTMLInputElement>(null);\n  const [mode, setMode] = useState(\"\");\n  const tableRef = useRef<any>(null);\n\n  const accountClassificationRef = useRef<HTMLInputElement>(null);\n  const acountTypeRef = useRef<HTMLInputElement>(null);\n  const codeRef = useRef<HTMLInputElement>(null);\n  const titleRef = useRef<HTMLInputElement>(null);\n  const shortNameRef = useRef<HTMLInputElement>(null);\n  const inactiveRef = useRef<HTMLInputElement>(null);\n  const requriedSubAccountRef = useRef<HTMLInputElement>(null);\n  const requriedIdRef = useRef<HTMLInputElement>(null);\n\n  const { mutate: mutateSearch, isLoading: loadingSearch } = useMutation({\n    mutationKey: \"search-chart-account\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/reference/search-chart-account\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (response) => {\n      if (response.data.success) {\n        console.log(response.data);\n        wait(100).then(() => {\n          tableRef.current.setDataFormated(response.data.data);\n        });\n      }\n    },\n  });\n  const mutateSearchRef = useRef<any>(mutateSearch);\n\n  const { mutate: mutateAdd, isLoading: loadingAdd } = useMutation({\n    mutationKey: \"add\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/reference/add-chart-account\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess,\n  });\n  const { mutate: mutateEdit, isLoading: loadingEdit } = useMutation({\n    mutationKey: \"edit\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/reference/update-chart-account\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess,\n  });\n  const { mutate: mutateDelete, isLoading: loadingDelete } = useMutation({\n    mutationKey: \"delete\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/reference/delete-chart-account\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess,\n  });\n\n  function handleOnSave(e: any) {\n    e.preventDefault();\n    if (codeRef.current?.value === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide account code!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (titleRef.current?.value === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide account name or title!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (shortNameRef.current?.value === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide account short name!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    const state = {\n      Acct_Code: codeRef.current?.value,\n      Acct_Title: titleRef.current?.value,\n      Short: shortNameRef.current?.value,\n      Account: accountClassificationRef.current?.value,\n      Acct_Type: acountTypeRef.current?.value,\n      IDNo: requriedIdRef.current?.checked,\n      SubAccnt: requriedSubAccountRef.current?.checked,\n      Inactive: inactiveRef.current?.checked,\n      mode: \"\",\n      search: \"\",\n    };\n    if (mode === \"edit\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutateEdit({ ...state, userCodeConfirmation });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutateAdd(state);\n        },\n      });\n    }\n  }\n  function resetModule() {\n    if (accountClassificationRef.current) {\n      accountClassificationRef.current.value = \"\";\n    }\n    if (acountTypeRef.current) {\n      acountTypeRef.current.value = \"\";\n    }\n    if (codeRef.current) {\n      codeRef.current.value = \"\";\n    }\n    if (titleRef.current) {\n      titleRef.current.value = \"\";\n    }\n    if (shortNameRef.current) {\n      shortNameRef.current.value = \"\";\n    }\n    if (inactiveRef.current) {\n      inactiveRef.current.checked = false;\n    }\n    if (requriedSubAccountRef.current) {\n      requriedSubAccountRef.current.checked = false;\n    }\n    if (requriedIdRef.current) {\n      requriedIdRef.current.checked = false;\n    }\n  }\n\n  function onSuccess(res: any) {\n    if (res.data.success) {\n      tableRef.current.setSelectedRow(null);\n      tableRef.current.resetCheckBox();\n      mutateSearchRef.current({ search: \"\" });\n      resetModule();\n      setMode(\"\");\n      return Swal.fire({\n        position: \"center\",\n        icon: \"success\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    Swal.fire({\n      position: \"center\",\n      icon: \"error\",\n      title: res.data.message,\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  }\n\n  useEffect(() => {\n    mutateSearchRef.current({ search: \"\" });\n  }, []);\n\n  return (\n    <>\n      {loadingSearch && <Loading />}\n      <PageHelmet title=\"Chart Account\" />\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: \"100%\",\n          height: \"100%\",\n          flex: 1,\n          padding: \"5px\",\n          position: \"relative\",\n        }}\n      >\n        <div\n          style={{\n            marginTop: \"10px\",\n            marginBottom: \"12px\",\n            width: \"100%\",\n            display: \"flex\",\n            columnGap: \"7px\",\n          }}\n        >\n          <TextInput\n            containerClassName=\"custom-input\"\n            containerStyle={{\n              width: \"550px\",\n            }}\n            label={{\n              title: \"Search: \",\n              style: {\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n                width: \"50px\",\n              },\n            }}\n            input={{\n              className: \"search-input-up-on-key-down\",\n              type: \"search\",\n              onKeyDown: (e) => {\n                if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n                  e.preventDefault();\n                  mutateSearch({ search: e.currentTarget.value });\n                }\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const datagridview = document.querySelector(\n                    \".grid-container\"\n                  ) as HTMLDivElement;\n                  datagridview.focus();\n                }\n              },\n              style: { width: \"500px\" },\n            }}\n            icon={\n              <SearchIcon\n                sx={{\n                  fontSize: \"18px\",\n                }}\n              />\n            }\n            onIconClick={(e) => {\n              e.preventDefault();\n              if (inputSearchRef.current) {\n                mutateSearch({ search: inputSearchRef.current.value });\n              }\n            }}\n            inputRef={inputSearchRef}\n          />\n          <div\n            className=\"button-action-desktop\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              columnGap: \"8px\",\n            }}\n          >\n            {mode === \"\" && (\n              <Button\n                style={{\n                  height: \"22px\",\n                  fontSize: \"11px\",\n                }}\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                id=\"entry-header-save-button\"\n                onClick={() => {\n                  setMode(\"add\");\n                }}\n              >\n                New\n              </Button>\n            )}\n            <LoadingButton\n              style={{\n                height: \"22px\",\n                fontSize: \"11px\",\n              }}\n              id=\"save-entry-header\"\n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              onClick={handleOnSave}\n              startIcon={<SaveIcon />}\n              disabled={mode === \"\"}\n              loading={loadingAdd || loadingEdit}\n            >\n              Save\n            </LoadingButton>\n            {mode !== \"\" && (\n              <Button\n                style={{\n                  height: \"22px\",\n                  fontSize: \"11px\",\n                }}\n                variant=\"contained\"\n                startIcon={<CloseIcon />}\n                color=\"error\"\n                onClick={() => {\n                  Swal.fire({\n                    title: \"Are you sure?\",\n                    text: \"You won't be able to revert this!\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    confirmButtonColor: \"#3085d6\",\n                    cancelButtonColor: \"#d33\",\n                    confirmButtonText: \"Yes, cancel it!\",\n                  }).then((result) => {\n                    if (result.isConfirmed) {\n                      resetModule();\n                      setMode(\"\");\n                      tableRef.current.setSelectedRow(null);\n                      tableRef.current.resetCheckBox();\n                    }\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n            )}\n            <LoadingButton\n              id=\"save-entry-header\"\n              variant=\"contained\"\n              sx={{\n                height: \"22px\",\n                fontSize: \"11px\",\n                backgroundColor: pink[500],\n                \"&:hover\": {\n                  backgroundColor: pink[600],\n                },\n              }}\n              loading={loadingDelete}\n              startIcon={<DeleteIcon />}\n              disabled={mode !== \"edit\"}\n              onClick={() => {\n                codeCondfirmationAlert({\n                  isUpdate: false,\n                  title: \"Confirmation\",\n                  saveTitle: \"Confirm\",\n                  text: `Are you sure you want to delete '${codeRef.current?.value}'?`,\n                  cb: (userCodeConfirmation) => {\n                    mutateDelete({\n                      Acct_Code: codeRef.current?.value,\n                      userCodeConfirmation,\n                    });\n                  },\n                });\n              }}\n            >\n              Delete\n            </LoadingButton>\n          </div>\n        </div>\n        <fieldset\n          className=\"container-fields\"\n          style={{\n            // border: \"1px solid black\",\n            padding: \"5px\",\n            width: \"75%\",\n            rowGap: \"5px\",\n            display: \"flex\",\n            columnGap: \"20px\",\n          }}\n        >\n          <legend style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>\n            Account Details\n          </legend>\n          <div\n            style={{\n              width: \"50%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              rowGap: \"5px\",\n            }}\n          >\n            <Autocomplete\n              containerClassName=\"custom-input\"\n              label={{\n                title: \"Account Classification :\",\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  width: \"150px\",\n                },\n              }}\n              input={{\n                id: \"auto-solo-collection\",\n                style: {\n                  width: \"100%\",\n                  flex: 1,\n                },\n              }}\n              width={\"100%\"}\n              DisplayMember={\"Line\"}\n              DataSource={[\n                { Line: \"Asset\" },\n                { Line: \"Liability\" },\n                { Line: \"Equity\" },\n                { Line: \"Revenue\" },\n                { Line: \"Expense\" },\n              ]}\n              disableInput={mode === \"\"}\n              inputRef={accountClassificationRef}\n              onChange={(selected: any, e: any) => {\n                if (accountClassificationRef.current)\n                  accountClassificationRef.current.value = selected.Line;\n              }}\n              onKeydown={(e: any) => {\n                if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n                  e.preventDefault();\n                  acountTypeRef.current?.focus();\n                }\n              }}\n            />\n            <Autocomplete\n              containerClassName=\"custom-input\"\n              label={{\n                title: \"Account Type :\",\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  width: \"150px\",\n                },\n              }}\n              input={{\n                id: \"auto-solo-collection\",\n                style: {\n                  width: \"100%\",\n                  flex: 1,\n                },\n              }}\n              width={\"100%\"}\n              DisplayMember={\"Line\"}\n              DataSource={[\n                { Line: \"Group Header\" },\n                { Line: \"Header\" },\n                { Line: \"Detail\" },\n              ]}\n              disableInput={mode === \"\"}\n              inputRef={acountTypeRef}\n              onChange={(selected: any, e: any) => {\n                if (acountTypeRef.current)\n                  acountTypeRef.current.value = selected.Line;\n              }}\n              onKeydown={(e: any) => {\n                if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n                  e.preventDefault();\n                  codeRef.current?.focus();\n                }\n              }}\n            />\n          </div>\n          <div\n            className=\"container-max-width\"\n            style={{\n              width: \"50%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              rowGap: \"5px\",\n            }}\n          >\n            <div\n              className=\"container-fields-custom\"\n              style={{\n                display: \"flex\",\n                columnGap: \"5px\",\n              }}\n            >\n              <TextInput\n                containerClassName=\"custom-input\"\n                label={{\n                  title: \"Code : \",\n                  style: {\n                    fontSize: \"12px\",\n                    fontWeight: \"bold\",\n                    width: \"100px\",\n                  },\n                }}\n                input={{\n                  disabled: mode === \"\" || mode === \"edit\",\n                  type: \"text\",\n                  style: { width: \"250px\" },\n                  onKeyDown: (e) => {\n                    if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\n                      e.preventDefault();\n                      titleRef.current?.focus();\n                    }\n                  },\n                }}\n                inputRef={codeRef}\n              />\n              <CheckBoxLabel\n                gridRow={1}\n                inputRef={inactiveRef}\n                label=\"Mark as Inactive\"\n              />\n            </div>\n            <TextInput\n              containerClassName=\"custom-input\"\n              label={{\n                title: \"Name / Title : \",\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  width: \"100px\",\n                },\n              }}\n              input={{\n                disabled: mode === \"\",\n                type: \"text\",\n                style: { width: \"400px\" },\n                onKeyDown: (e) => {\n                  if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\n                    shortNameRef.current?.focus();\n\n                    e.preventDefault();\n                  }\n                },\n              }}\n              inputRef={titleRef}\n            />\n            <TextInput\n              containerClassName=\"custom-input\"\n              label={{\n                title: \"Short Name : \",\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  width: \"100px\",\n                },\n              }}\n              input={{\n                disabled: mode === \"\",\n                type: \"text\",\n                style: { width: \"400px\" },\n                onKeyDown: (e) => {\n                  if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\n                    e.preventDefault();\n                  }\n                },\n              }}\n              inputRef={shortNameRef}\n            />\n            <div style={{ display: \"flex\", columnGap: \"10px\" }}>\n              <CheckBoxLabel\n                gridRow={1}\n                inputRef={requriedSubAccountRef}\n                label=\"Required sub-account?\"\n              />\n              <CheckBoxLabel\n                gridRow={1}\n                inputRef={requriedIdRef}\n                label=\"Required I.D.?\"\n              />\n            </div>\n          </div>\n        </fieldset>\n        <div\n          style={{\n            marginTop: \"10px\",\n            width: \"100%\",\n            position: \"relative\",\n            flex: 1,\n            display: \"flex\",\n          }}\n        >\n          <DataGridViewReact\n            containerStyle={{\n              flex: 1,\n              height: \"auto\",\n            }}\n            ref={tableRef}\n            columns={bankColumn}\n            height=\"280px\"\n            getSelectedItem={(rowItm: any) => {\n              if (rowItm) {\n                setMode(\"edit\");\n                if (accountClassificationRef.current) {\n                  accountClassificationRef.current.value = rowItm[3];\n                }\n                if (acountTypeRef.current) {\n                  acountTypeRef.current.value = rowItm[4];\n                }\n                if (codeRef.current) {\n                  codeRef.current.value = rowItm[0];\n                }\n                if (titleRef.current) {\n                  titleRef.current.value = rowItm[1];\n                }\n                if (shortNameRef.current) {\n                  shortNameRef.current.value = rowItm[2];\n                }\n                if (inactiveRef.current) {\n                  inactiveRef.current.checked = rowItm[7] === \"YES\";\n                }\n                if (requriedSubAccountRef.current) {\n                  requriedSubAccountRef.current.checked = rowItm[5] === \"YES\";\n                }\n                if (requriedIdRef.current) {\n                  requriedIdRef.current.checked = rowItm[6] === \"YES\";\n                }\n              } else {\n                resetModule();\n              }\n            }}\n          />\n        </div>\n        <div\n          className=\"button-action-mobile\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"8px\",\n          }}\n        >\n          {mode === \"\" && (\n            <Button\n              style={{\n                height: \"22px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              id=\"entry-header-save-button\"\n              onClick={() => {\n                setMode(\"add\");\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            style={{\n              height: \"22px\",\n              fontSize: \"11px\",\n            }}\n            id=\"save-entry-header\"\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            onClick={handleOnSave}\n            startIcon={<SaveIcon />}\n            disabled={mode === \"\"}\n            loading={loadingAdd || loadingEdit}\n          >\n            Save\n          </LoadingButton>\n          {mode !== \"\" && (\n            <Button\n              style={{\n                height: \"22px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon />}\n              color=\"error\"\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    resetModule();\n                    setMode(\"\");\n                    tableRef.current.setSelectedRow(null);\n                    tableRef.current.resetCheckBox();\n                  }\n                });\n              }}\n            >\n              Cancel\n            </Button>\n          )}\n          <LoadingButton\n            id=\"save-entry-header\"\n            variant=\"contained\"\n            sx={{\n              height: \"22px\",\n              fontSize: \"11px\",\n              backgroundColor: pink[500],\n              \"&:hover\": {\n                backgroundColor: pink[600],\n              },\n            }}\n            loading={loadingDelete}\n            startIcon={<DeleteIcon />}\n            disabled={mode !== \"edit\"}\n            onClick={() => {\n              codeCondfirmationAlert({\n                isUpdate: false,\n                title: \"Confirmation\",\n                saveTitle: \"Confirm\",\n                text: `Are you sure you want to delete '${codeRef.current?.value}'?`,\n                cb: (userCodeConfirmation) => {\n                  mutateDelete({\n                    Acct_Code: codeRef.current?.value,\n                    userCodeConfirmation,\n                  });\n                },\n              });\n            }}\n          >\n            Delete\n          </LoadingButton>\n        </div>\n      </div>\n    </>\n  );\n}\nconst CheckBoxLabel = ({\n  inputRef,\n  label,\n  gridRow,\n}: {\n  inputRef: React.RefObject<HTMLInputElement>;\n  label: string;\n  gridRow: number;\n}) => {\n  const id = useId();\n  return (\n    <div style={{ display: \"flex\", columnGap: \"5px\", gridRow }}>\n      <input\n        id={id}\n        ref={inputRef}\n        type=\"checkbox\"\n        style={{\n          cursor: \"pointer\",\n        }}\n      />\n      <label\n        htmlFor={id}\n        style={{\n          fontSize: \"12px\",\n          cursor: \"pointer\",\n        }}\n      >\n        {label}\n      </label>\n    </div>\n  );\n};\n\n// import { useContext, useState, useRef } from \"react\";\n// import { GridRowSelectionModel } from \"@mui/x-data-grid\";\n// import { AuthContext } from \"../../../components/AuthContext\";\n// import { useMutation, useQuery, useQueryClient } from \"react-query\";\n// import Swal from \"sweetalert2\";\n// import {\n//   codeCondfirmationAlert,\n//   saveCondfirmationAlert,\n// } from \"../../../lib/confirmationAlert\";\n// import { UpwardTable } from \"../../../components/UpwardTable\";\n// import {\n//   ButtonField,\n//   SelectInput,\n//   TextInput,\n// } from \"../../../components/UpwardFields\";\n// import PageHelmet from \"../../../components/Helmet\";\n// import { DataGridViewReact } from \"../../../components/DataGridViewReact\";\n\n// export const reducer = (state: any, action: any) => {\n//   switch (action.type) {\n//     case \"UPDATE_FIELD\":\n//       return {\n//         ...state,\n//         [action.field]: action.value,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n// export const chartAccountColumn = [\n//   { key: \"Acct_Code\", label: \"Account Code\", width: 150 },\n//   { key: \"Acct_Title\", label: \"Account Name/Account Title\", width: 300 },\n//   { key: \"Short\", label: \"Short Name\", width: 300 },\n//   { key: \"Acct_Type\", label: \"Account Type\", width: 200 },\n//   { key: \"Account\", label: \"Account\", width: 100 },\n//   { key: \"SubAccnt\", label: \"Sub Account ?\", width: 100 },\n//   { key: \"IDNo\", label: \"I.D. ?\", width: 100 },\n//   { key: \"Inactive\", label: \"Inactive ?\", width: 100 },\n// ];\n// const queryKey = \"chart-account\";\n\n// export default function ChartAccount() {\n//   const tableRef = useRef<any>(null);\n//   const inputSearchRef = useRef<HTMLInputElement>(null);\n//   const inputCodeRef = useRef<HTMLInputElement>(null);\n//   const inputAccountClassificationRef = useRef<HTMLSelectElement>(null);\n//   const inputAccountTypeRef = useRef<HTMLSelectElement>(null);\n//   const inputNameRef = useRef<HTMLInputElement>(null);\n//   const inputShortNameRef = useRef<HTMLInputElement>(null);\n//   const inputRequiredSubAccountRef = useRef<HTMLInputElement>(null);\n//   const inputRequiredIDRef = useRef<HTMLInputElement>(null);\n//   const inputMarkInactiveRef = useRef<HTMLInputElement>(null);\n\n//   const { myAxios, user } = useContext(AuthContext);\n//   const [rows, setRows] = useState<GridRowSelectionModel>([]);\n//   const [mode, setMode] = useState<string>(\"\");\n\n//   const { isLoading, refetch: refetchChartAccountSearch } = useQuery({\n//     queryKey,\n//     queryFn: async () =>\n//       await myAxios.get(\n//         `/reference/get-chart-accounts?chartAccountSearch=${\n//           inputSearchRef.current?.value ?? \"\"\n//         }`,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${user?.accessToken}`,\n//           },\n//         }\n//       ),\n//     onSuccess: (res) => {\n//       setRows((res as any)?.data.chartAccount);\n//       resetField();\n//       tableRef?.current?.resetTableSelected();\n//     },\n//     refetchOnWindowFocus: false,\n//   });\n//   const { mutate: mutateAdd, isLoading: loadingAdd } = useMutation({\n//     mutationKey: queryKey,\n//     mutationFn: async (variables: any) => {\n//       return await myAxios.post(\"/reference/add-chart-account\", variables, {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       });\n//     },\n//     onSuccess,\n//   });\n//   const { mutate: mutateEdit, isLoading: loadingEdit } = useMutation({\n//     mutationKey: queryKey,\n//     mutationFn: async (variables: any) => {\n//       return await myAxios.post(\"/reference/update-chart-account\", variables, {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       });\n//     },\n//     onSuccess,\n//   });\n//   const { mutate: mutateDelete, isLoading: loadingDelete } = useMutation({\n//     mutationKey: queryKey,\n//     mutationFn: async (variables: any) => {\n//       return await myAxios.post(\"/reference/delete-chart-account\", variables, {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       });\n//     },\n//     onSuccess,\n//   });\n//   function onSuccess(res: any) {\n//     if (res.data.success) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"success\",\n//         title: res.data.message,\n//         showConfirmButton: false,\n//         timer: 1500,\n//       }).then(() => {\n//         handleCancel();\n//       });\n//     }\n\n//     Swal.fire({\n//       position: \"center\",\n//       icon: \"error\",\n//       title: res.data.message,\n//       showConfirmButton: false,\n//       timer: 1500,\n//     });\n//   }\n//   const handleSave = (e: any) => {\n//     if (inputCodeRef.current?.value === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Acct Code is required!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     if (inputNameRef.current?.value === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Acct Title is required!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     if (inputShortNameRef.current?.value === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Short Name is required!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     if ((inputCodeRef.current?.value as string).length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Acct Code is too long!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     if ((inputNameRef.current?.value as string).length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Acct Title is too long!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     if ((inputShortNameRef.current?.value as string).length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Short Name is too long!\",\n//         showConfirmButton: false,\n//         timer: 1500,\n//       });\n//     }\n//     e.preventDefault();\n//     const state = {\n//       Acct_Code: inputCodeRef.current?.value,\n//       Acct_Title: inputNameRef.current?.value,\n//       Short: inputShortNameRef.current?.value,\n//       Account: inputAccountClassificationRef.current?.value,\n//       Acct_Type: inputAccountTypeRef.current?.value,\n//       IDNo: inputRequiredIDRef.current?.checked,\n//       SubAccnt: inputRequiredSubAccountRef.current?.checked,\n//       Inactive: inputMarkInactiveRef.current?.checked,\n//       mode: \"\",\n//       search: \"\",\n//     };\n//     if (mode === \"update\") {\n//       codeCondfirmationAlert({\n//         isUpdate: true,\n//         cb: (userCodeConfirmation) => {\n//           mutateEdit({ ...state, userCodeConfirmation });\n//         },\n//       });\n//     } else {\n//       saveCondfirmationAlert({\n//         isConfirm: () => {\n//           mutateAdd(state);\n//         },\n//       });\n//     }\n//   };\n//   const handleCancel = () => {\n//     setMode(\"\");\n//     resetField();\n//     tableRef?.current?.resetTableSelected();\n//   };\n//   const handleAdd = () => {\n//     setMode(\"add\");\n//     setTimeout(() => {\n//       inputCodeRef.current?.focus();\n//     }, 100);\n//   };\n//   const handleDelete = () => {\n//     codeCondfirmationAlert({\n//       isUpdate: false,\n//       cb: (userCodeConfirmation) => {\n//         mutateDelete({\n//           Acct_Code: inputCodeRef.current?.value,\n//           userCodeConfirmation,\n//         });\n//       },\n//     });\n//   };\n//   const onSelectionChange = (selectedRow: any) => {\n//     if (selectedRow.length > 0) {\n//       const row = selectedRow[0];\n//       if (inputCodeRef.current) {\n//         inputCodeRef.current.value = row.Acct_Code;\n//       }\n//       if (inputAccountClassificationRef.current) {\n//         inputAccountClassificationRef.current.value = row.Account.trim();\n//       }\n//       if (inputAccountTypeRef.current) {\n//         inputAccountTypeRef.current.value = row.Acct_Type.trim();\n//       }\n//       if (inputNameRef.current) {\n//         inputNameRef.current.value = row.Acct_Title;\n//       }\n//       if (inputShortNameRef.current) {\n//         inputShortNameRef.current.value = row.Short;\n//       }\n//       if (inputRequiredSubAccountRef.current) {\n//         inputRequiredSubAccountRef.current.checked = row.SubAccnt === \"YES\";\n//       }\n//       if (inputRequiredIDRef.current) {\n//         inputRequiredIDRef.current.checked = row.IDNo === \"YES\";\n//       }\n//       if (inputMarkInactiveRef.current) {\n//         inputMarkInactiveRef.current.checked = row.Inactive === \"YES\";\n//       }\n//       setMode(\"update\");\n//     } else {\n//       resetField();\n//     }\n//   };\n//   function resetField() {\n//     if (inputCodeRef.current) {\n//       inputCodeRef.current.value = \"\";\n//     }\n//     if (inputAccountClassificationRef.current) {\n//       inputAccountClassificationRef.current.selectedIndex = 0;\n//     }\n//     if (inputAccountTypeRef.current) {\n//       inputAccountTypeRef.current.selectedIndex = 0;\n//     }\n//     if (inputNameRef.current) {\n//       inputNameRef.current.value = \"\";\n//     }\n//     if (inputShortNameRef.current) {\n//       inputShortNameRef.current.value = \"\";\n//     }\n//     if (inputRequiredSubAccountRef.current) {\n//       inputRequiredSubAccountRef.current.checked = false;\n//     }\n//     if (inputRequiredIDRef.current) {\n//       inputRequiredIDRef.current.checked = false;\n//     }\n//     if (inputMarkInactiveRef.current) {\n//       inputMarkInactiveRef.current.checked = false;\n//     }\n//   }\n\n//   const disableFields = mode === \"\";\n\n//   if (isLoading || loadingAdd || loadingEdit || loadingDelete) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <>\n//       <PageHelmet title=\"Chart Account\" />\n//       <div\n//         style={{\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           width: \"100%\",\n//           height: \"100%\",\n//           flex: 1,\n//           padding: \"5px\",\n//         }}\n//       >\n//          <div\n//             style={{\n//               height: \"120px\",\n//             }}\n//           >\n//             <div\n//               style={{\n//                 display: \"flex\",\n//                 alignItems: \"center\",\n//                 height: \"30px\",\n//                 columnGap: \"10px\",\n//               }}\n//             >\n//               <TextInput\n//                 label={{\n//                   title: \"Search: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"50px\",\n//                   },\n//                 }}\n//                 input={{\n//                   className: \"search-input-up-on-key-down\",\n//                   type: \"search\",\n//                   onKeyDown: (e) => {\n//                     if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n//                       e.preventDefault();\n//                       refetchChartAccountSearch();\n//                     }\n//                     if (e.key === \"ArrowDown\") {\n//                       e.preventDefault();\n//                       const datagridview = document.querySelector(\n//                         \".grid-container\"\n//                       ) as HTMLDivElement;\n//                       datagridview.focus();\n//                     }\n//                   },\n//                   style: { width: \"500px\" },\n//                 }}\n//                 inputRef={inputSearchRef}\n//               />\n//               {!disableFields && (\n//                 <ButtonField\n//                   button={{\n//                     style: {\n//                       margin: 0,\n//                       padding: \"5px\",\n//                       borderRadius: \"5px\",\n//                       background: \"transparent\",\n//                     },\n//                     onClick: handleCancel,\n//                   }}\n//                   tooltipText=\"CANCEL\"\n//                 >\n//                   <svg\n//                     xmlns=\"http://www.w3.org/2000/svg\"\n//                     width=\"17px\"\n//                     height=\"17px\"\n//                     viewBox=\"0 0 24 24\"\n//                     fill=\"none\"\n//                   >\n//                     <path\n//                       d=\"M20.7457 3.32851C20.3552 2.93798 19.722 2.93798 19.3315 3.32851L12.0371 10.6229L4.74275 3.32851C4.35223 2.93798 3.71906 2.93798 3.32854 3.32851C2.93801 3.71903 2.93801 4.3522 3.32854 4.74272L10.6229 12.0371L3.32856 19.3314C2.93803 19.722 2.93803 20.3551 3.32856 20.7457C3.71908 21.1362 4.35225 21.1362 4.74277 20.7457L12.0371 13.4513L19.3315 20.7457C19.722 21.1362 20.3552 21.1362 20.7457 20.7457C21.1362 20.3551 21.1362 19.722 20.7457 19.3315L13.4513 12.0371L20.7457 4.74272C21.1362 4.3522 21.1362 3.71903 20.7457 3.32851Z\"\n//                       fill=\"#d97706\"\n//                     />\n//                   </svg>\n//                 </ButtonField>\n//               )}\n//               {disableFields && (\n//                 <ButtonField\n//                   button={{\n//                     style: {\n//                       margin: 0,\n//                       padding: \"5px\",\n//                       borderRadius: \"5px\",\n//                       background: \"transparent\",\n//                     },\n//                     onClick: handleAdd,\n//                   }}\n//                   tooltipText=\"ADD\"\n//                 >\n//                   <svg width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\">\n//                     <title />\n\n//                     <g id=\"Complete\">\n//                       <g data-name=\"add\" id=\"add-2\">\n//                         <g>\n//                           <line\n//                             fill=\"none\"\n//                             stroke=\"#000000\"\n//                             strokeLinecap=\"round\"\n//                             strokeLinejoin=\"round\"\n//                             strokeWidth=\"2\"\n//                             x1=\"12\"\n//                             x2=\"12\"\n//                             y1=\"19\"\n//                             y2=\"5\"\n//                           />\n\n//                           <line\n//                             fill=\"none\"\n//                             stroke=\"#000000\"\n//                             strokeLinecap=\"round\"\n//                             strokeLinejoin=\"round\"\n//                             strokeWidth=\"2\"\n//                             x1=\"5\"\n//                             x2=\"19\"\n//                             y1=\"12\"\n//                             y2=\"12\"\n//                           />\n//                         </g>\n//                       </g>\n//                     </g>\n//                   </svg>\n//                 </ButtonField>\n//               )}\n//               <ButtonField\n//                 disabled={disableFields}\n//                 button={{\n//                   style: {\n//                     margin: 0,\n//                     padding: \"5px\",\n//                     borderRadius: \"5px\",\n//                     background: \"transparent\",\n//                   },\n//                   onClick: handleSave,\n//                 }}\n//                 tooltipText=\"SAVE\"\n//               >\n//                 <svg\n//                   width=\"17px\"\n//                   height=\"17px\"\n//                   viewBox=\"0 0 24 24\"\n//                   fill=\"green\"\n//                 >\n//                   <path\n//                     fillRule=\"evenodd\"\n//                     clipRule=\"evenodd\"\n//                     d=\"M18.1716 1C18.702 1 19.2107 1.21071 19.5858 1.58579L22.4142 4.41421C22.7893 4.78929 23 5.29799 23 5.82843V20C23 21.6569 21.6569 23 20 23H4C2.34315 23 1 21.6569 1 20V4C1 2.34315 2.34315 1 4 1H18.1716ZM4 3C3.44772 3 3 3.44772 3 4V20C3 20.5523 3.44772 21 4 21L5 21L5 15C5 13.3431 6.34315 12 8 12L16 12C17.6569 12 19 13.3431 19 15V21H20C20.5523 21 21 20.5523 21 20V6.82843C21 6.29799 20.7893 5.78929 20.4142 5.41421L18.5858 3.58579C18.2107 3.21071 17.702 3 17.1716 3H17V5C17 6.65685 15.6569 8 14 8H10C8.34315 8 7 6.65685 7 5V3H4ZM17 21V15C17 14.4477 16.5523 14 16 14L8 14C7.44772 14 7 14.4477 7 15L7 21L17 21ZM9 3H15V5C15 5.55228 14.5523 6 14 6H10C9.44772 6 9 5.55228 9 5V3Z\"\n//                     fill=\"green\"\n//                   />\n//                 </svg>\n//               </ButtonField>\n//               <ButtonField\n//                 disabled={mode !== \"update\"}\n//                 button={{\n//                   style: {\n//                     margin: 0,\n//                     padding: \"5px\",\n//                     borderRadius: \"5px\",\n//                     background: \"transparent\",\n//                   },\n//                   onClick: handleDelete,\n//                 }}\n//                 tooltipText=\"DELETE\"\n//               >\n//                 <svg width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" fill=\"none\">\n//                   <path\n//                     d=\"M4 7H20\"\n//                     stroke=\"red\"\n//                     strokeWidth=\"2\"\n//                     strokeLinecap=\"round\"\n//                     strokeLinejoin=\"round\"\n//                   />\n//                   <path\n//                     d=\"M6 7V18C6 19.6569 7.34315 21 9 21H15C16.6569 21 18 19.6569 18 18V7\"\n//                     stroke=\"red\"\n//                     strokeWidth=\"2\"\n//                     strokeLinecap=\"round\"\n//                     strokeLinejoin=\"round\"\n//                   />\n//                   <path\n//                     d=\"M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z\"\n//                     stroke=\"red\"\n//                     strokeWidth=\"2\"\n//                     strokeLinecap=\"round\"\n//                     strokeLinejoin=\"round\"\n//                   />\n//                 </svg>\n//               </ButtonField>\n//             </div>\n//             <div\n//               style={{\n//                 marginTop: \"10px\",\n//                 display: \"flex\",\n//                 columnGap: \"30px\",\n//                 rowGap: \"15px\",\n//                 flexWrap: \"wrap\",\n//               }}\n//             >\n//               <TextInput\n//                 label={{\n//                   title: \"Code: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"40px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n//                   type: \"text\",\n//                   style: { width: \"90px\" },\n//                 }}\n//                 inputRef={inputCodeRef}\n//               />\n//               <SelectInput\n//                 label={{\n//                   title: \"Account Classification: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"135px\",\n//                   },\n//                 }}\n//                 selectRef={inputAccountClassificationRef}\n//                 select={{\n//                   disabled: disableFields,\n//                   style: { width: \"120px\" },\n//                 }}\n//                 datasource={[\n//                   { key: \"Asset\" },\n//                   { key: \"Liability\" },\n//                   { key: \"Equity\" },\n//                   { key: \"Revenue\" },\n//                   { key: \"Expense\" },\n//                 ]}\n//                 values={\"key\"}\n//                 display={\"key\"}\n//               />\n//               <SelectInput\n//                 label={{\n//                   title: \"Account Type: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"90px\",\n//                   },\n//                 }}\n//                 selectRef={inputAccountTypeRef}\n//                 select={{\n//                   disabled: disableFields,\n//                   style: { width: \"120px\" },\n//                 }}\n//                 datasource={[\n//                   { key: \"Group Header\" },\n//                   { key: \"Header\" },\n//                   { key: \"Detail\" },\n//                 ]}\n//                 values={\"key\"}\n//                 display={\"key\"}\n//               />\n//               <TextInput\n//                 label={{\n//                   title: \"Name/Title: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"80px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n//                   type: \"text\",\n//                   style: { width: \"350px\" },\n//                 }}\n//                 inputRef={inputNameRef}\n//               />\n//               <TextInput\n//                 label={{\n//                   title: \"ShortName: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"80px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n//                   type: \"text\",\n//                   style: { width: \"200px\" },\n//                 }}\n//                 inputRef={inputShortNameRef}\n//               />\n//               <TextInput\n//                 label={{\n//                   title: \"Required sub-account?: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"140px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n\n//                   type: \"checkbox\",\n//                   style: { width: \"12px\", height: \"12px\" },\n//                 }}\n//                 inputRef={inputRequiredSubAccountRef}\n//               />\n//               <TextInput\n//                 label={{\n//                   title: \"Required I.D.?: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"85px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n\n//                   type: \"checkbox\",\n//                   style: { width: \"12px\", height: \"12px\" },\n//                 }}\n//                 inputRef={inputRequiredIDRef}\n//               />\n//               <TextInput\n//                 label={{\n//                   title: \"Mark As Inactive: \",\n//                   style: {\n//                     fontSize: \"12px\",\n//                     fontWeight: \"bold\",\n//                     width: \"100px\",\n//                   },\n//                 }}\n//                 input={{\n//                   disabled: disableFields,\n\n//                   type: \"checkbox\",\n//                   style: { width: \"12px\", height: \"12px\" },\n//                 }}\n//                 inputRef={inputMarkInactiveRef}\n//               />\n//             </div>\n//           </div>\n//           <div\n//             style={{\n//               marginTop: \"10px\",\n//               width: \"100%\",\n//               position: \"relative\",\n//               flex: 1,\n//               display: \"flex\",\n//             }}\n//           >\n//             <DataGridViewReact\n//               containerStyle={{\n//                 flex: 1,\n//                 height: \"auto\",\n//               }}\n//               ref={tableRef}\n//               columns={chartAccountColumn}\n//               height=\"280px\"\n//               getSelectedItem={(rowItm: any) => {\n//                 if (rowItm) {\n//                   setMode(\"edit\");\n//                   console.log(rowItm);\n//                 } else {\n//                   // resetModule();\n//                 }\n//               }}\n//             />\n//           </div>\n\n//       </div>\n//     </>\n//   );\n// }\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","const pink = {\n  50: '#fce4ec',\n  100: '#f8bbd0',\n  200: '#f48fb1',\n  300: '#f06292',\n  400: '#ec407a',\n  500: '#e91e63',\n  600: '#d81b60',\n  700: '#c2185b',\n  800: '#ad1457',\n  900: '#880e4f',\n  A100: '#ff80ab',\n  A200: '#ff4081',\n  A400: '#f50057',\n  A700: '#c51162'\n};\nexport default pink;"],"names":["bankColumn","key","label","width","SubAccount","_mutationFn","_mutationFn2","_mutationFn3","_mutationFn4","_useContext","useContext","AuthContext","myAxios","user","inputSearchRef","useRef","_useState","useState","_useState2","_slicedToArray","mode","setMode","tableRef","accountClassificationRef","acountTypeRef","codeRef","titleRef","shortNameRef","inactiveRef","requriedSubAccountRef","requriedIdRef","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variables","wrap","_context","prev","next","post","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","response","data","success","console","log","wait","then","current","setDataFormated","mutateSearch","mutate","loadingSearch","isLoading","mutateSearchRef","_useMutation2","_x2","_callee2","_context2","mutateAdd","loadingAdd","_useMutation3","_x3","_callee3","_context3","mutateEdit","loadingEdit","_useMutation4","_x4","_callee4","_context4","mutateDelete","loadingDelete","handleOnSave","e","_codeRef$current","_titleRef$current","_shortNameRef$current","_codeRef$current2","_titleRef$current2","_shortNameRef$current2","_accountClassificatio","_acountTypeRef$curren","_requriedIdRef$curren","_requriedSubAccountRe","_inactiveRef$current","preventDefault","value","Swal","position","icon","title","showConfirmButton","timer","state","Acct_Code","Acct_Title","Short","Account","Acct_Type","IDNo","checked","SubAccnt","Inactive","search","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","_objectSpread","saveCondfirmationAlert","isConfirm","resetModule","res","setSelectedRow","resetCheckBox","message","useEffect","_jsxs","_Fragment","children","_jsx","Loading","PageHelmet","style","display","flexDirection","height","flex","padding","marginTop","marginBottom","columnGap","TextInput","containerClassName","containerStyle","fontSize","fontWeight","input","className","type","onKeyDown","currentTarget","document","querySelector","focus","SearchIcon","sx","onIconClick","inputRef","alignItems","Button","variant","startIcon","AddIcon","id","onClick","LoadingButton","color","SaveIcon","disabled","loading","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","backgroundColor","pink","DeleteIcon","_codeRef$current3","saveTitle","_codeRef$current4","rowGap","Autocomplete","DisplayMember","DataSource","Line","disableInput","onChange","selected","onKeydown","_acountTypeRef$curren2","_codeRef$current5","_titleRef$current3","code","CheckBoxLabel","gridRow","_shortNameRef$current3","DataGridViewReact","ref","columns","getSelectedItem","rowItm","_codeRef$current6","_codeRef$current7","_ref","useId","cursor","htmlFor","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","A100","A200","A400","A700"],"sourceRoot":""}