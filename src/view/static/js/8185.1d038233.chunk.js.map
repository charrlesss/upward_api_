{"version":3,"file":"static/js/8185.1d038233.chunk.js","mappings":"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","sources":["components/UpwardFields.tsx","components/UpwardTable.tsx","hooks/useUpwardTableModal.tsx","feautures/Admin/Task/Accounting/PostDateChecks.tsx"],"sourcesContent":["import { HtmlHTMLAttributes, InputHTMLAttributes, useId, ReactNode } from \"react\";\nimport \"../style/design.css\";\n\n\ninterface TextInputProps {\n  input: InputHTMLAttributes<HTMLInputElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: 'start' | 'end'; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n  disableIcon?:boolean\n}\n\nexport function TextInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => { }\n}: TextInputProps) {\n  const id = useId();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative', // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        style={{\n          height: '100%',\n          ...input.style,\n        }}\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background:\"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\"\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\nexport function SelectInput({\n  select,\n  label,\n  selectRef,\n  datasource = [],\n  values = \"\",\n  display = \"\",\n}: {\n  selectRef?: React.RefObject<HTMLSelectElement>;\n  labelRef?: React.RefObject<HTMLLabelElement>;\n  select: InputHTMLAttributes<HTMLSelectElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  datasource: Array<any>;\n  values: string;\n  display: string;\n}) {\n  const id = useId();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"18px\",\n        alignItems: \"center\",\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      <select\n        {...select}\n        ref={selectRef}\n        className=\"select\"\n        style={{\n          height: \"18px\",\n          ...select.style,\n        }}\n      >\n        {datasource.map((itm, idx) => {\n          return (\n            <option key={idx} value={itm[values]}>\n              {itm[display]}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n}\n\nexport function ButtonField({\n  buttonRetRef,\n  button,\n  tooltipText = \"\",\n  children,\n  disabled = false,\n}: {\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\n  tooltipText: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}) {\n  return (\n    <div className=\"tooltip\">\n      <button\n        disabled={disabled}\n        {...button}\n        ref={buttonRetRef}\n        style={{ ...button.style, background: !disabled ? \"transparent\" : \"#f1f1f1\" }}\n        className=\"tooltip-button\"\n      >\n        {children}\n      </button>\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\n    </div>\n  );\n}\n","\n\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\n\nimport \"../style/datagridview.css\";\nimport { Pagination } from \"@mui/material\";\n\ninterface UpwardTablePropsType {\n  rows: Array<any>;\n  column: Array<any>;\n  width: number;\n  height: number;\n  dataReadOnly: boolean;\n  onSelectionChange?: (row: Array<any>, rowIndex: number) => void;\n  onKeyDown?: (row: Array<any>, key: string) => void;\n  isMultipleSelect?: boolean;\n  freeze?: boolean;\n  inputsearchselector?: string;\n  isRowSelectable?: boolean;\n  unSelectable?: (row: any) => boolean;\n  isLoading?: boolean\n}\n\nconst UpwardTable = forwardRef(\n  (\n    {\n      rows,\n      column,\n      width,\n      height,\n      dataReadOnly,\n      onSelectionChange = () => { },\n      isMultipleSelect = false,\n      freeze = false,\n      onKeyDown,\n      inputsearchselector = \".search-input-up-on-key-down\",\n      isRowSelectable = true,\n      unSelectable = () => false,\n      isLoading\n    }: UpwardTablePropsType,\n    UpwardTableRef\n  ) => {\n    const [pages, setPages] = useState<Array<any>>([])\n    const [pageNumber, setPageNumber] = useState(0)\n    const onSelectionChangeRef = useRef(onSelectionChange);\n    const onKeyDownRef = useRef(onKeyDown);\n    const [columns, setColumns] = useState(column.filter((itm) => !itm.hide));\n    const [hoveredColumn, setHoveredColumn] = useState(null);\n    const [selectedRows, setSelectedRows] = useState<Array<number>>([0]);\n    const [lastSelectedRowIndex, setLastSelectedRowIndex] = useState(0);\n    const [selectedItems, setSelectedItems] = useState<Array<number>>([]);\n    const divRef = useRef<HTMLDivElement>(null);\n    const [_clickTimeout, _setClickTimeout] = useState(null);\n\n\n    useEffect(() => {\n      const _pages = formatArrayIntoChunks(rows, 100)\n      setPages(_pages)\n    }, [rows])\n\n    const startResize = (index: any, e: any) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const startX = e.clientX;\n      const startWidth = columns[index].width;\n\n      const doDrag = (moveEvent: any) => {\n        const newWidth = startWidth + (moveEvent.clientX - startX);\n        const updatedColumns = [...columns];\n        updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\n        setColumns(updatedColumns);\n      };\n\n      const stopDrag = () => {\n        document.removeEventListener(\"mousemove\", doDrag);\n        document.removeEventListener(\"mouseup\", stopDrag);\n      };\n\n      document.addEventListener(\"mousemove\", doDrag);\n      document.addEventListener(\"mouseup\", stopDrag);\n    };\n    const handleMouseEnter = (index: any) => {\n      setHoveredColumn(index); // Set the hovered column index\n    };\n    const handleMouseLeave = () => {\n      setHoveredColumn(null); // Reset hovered column index\n    };\n    const handleRowClick = (\n      rowIndex: any,\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      function getIndexAndData(selectedRowData: Array<any>) {\n        const filterSelectrowData = selectedRowData.map((d, idx) => {\n          if (!unSelectable(d)) {\n            return { idx, data: d };\n          }\n          return null;\n        });\n        const removeNullValue = filterSelectrowData.filter((d) => d !== null);\n        const data = removeNullValue.map((itm: any) => itm.data);\n        const newSelectedRowsFiltered = removeNullValue.map(\n          (itm: any) => itm.idx\n        );\n        return { newSelectedRowsFiltered, data };\n      }\n\n      if (!isMultipleSelect) {\n        // Single selection mode\n        setSelectedRows([rowIndex]);\n      } else {\n        // Multiple selection mode\n        if (event.shiftKey && lastSelectedRowIndex !== null) {\n          // Shift + Click: Select range between last clicked row and current clicked row\n          const rangeStart = Math.min(lastSelectedRowIndex, rowIndex);\n          const rangeEnd = Math.max(lastSelectedRowIndex, rowIndex);\n          const newSelectedRows: Array<number> = [];\n          for (let i = rangeStart; i <= rangeEnd; i++) {\n            if (!selectedRows.includes(i)) {\n              newSelectedRows.push(i);\n            }\n          }\n\n          let selectedItemsParams: Array<number> = [\n            ...selectedItems,\n            ...newSelectedRows,\n          ];\n\n          setSelectedRows([...selectedRows, ...newSelectedRows]);\n          const selectedRowData = rows.filter((d, idx) =>\n            selectedItemsParams.includes(idx)\n          );\n          const { newSelectedRowsFiltered, data } =\n            getIndexAndData(selectedRowData);\n\n          setSelectedItems(newSelectedRowsFiltered);\n          // onSelectionChangeRef.current(data, rowIndex);\n        } else if (event.ctrlKey || event.metaKey) {\n          // Ctrl (or Cmd on macOS) + Click: Toggle row selection\n          if (selectedRows.includes(rowIndex) && !freeze) {\n            setSelectedRows(selectedRows.filter((i) => i !== rowIndex));\n            setSelectedItems((d) => {\n              d = d.filter((i) => i !== rowIndex);\n              return d;\n            });\n            let selectedItemsParams: Array<number> = selectedItems.filter(\n              (i) => i !== rowIndex\n            );\n            const selectedRowData = rows.filter((d, idx) =>\n              selectedItemsParams.includes(idx)\n            );\n\n            setSelectedItems(selectedItemsParams);\n            // onSelectionChangeRef.current(selectedRowData, rowIndex);\n          } else {\n            setSelectedRows([...selectedRows, rowIndex]);\n            setSelectedItems((d) => {\n              d.push(rowIndex);\n              return d;\n            });\n            let selectedItemsParams: Array<number> = [\n              ...selectedItems,\n              rowIndex,\n            ];\n\n            const selectedRowData = rows.filter((d, idx) =>\n              selectedItemsParams.includes(idx)\n            );\n\n            setSelectedItems(selectedItemsParams);\n            // onSelectionChangeRef.current(selectedRowData, rowIndex);\n          }\n        } else {\n          // Regular click in multiple selection mode: Single click to select a row\n          setSelectedRows([rowIndex]);\n        }\n      }\n      setLastSelectedRowIndex(rowIndex); // Update the last selected index\n    };\n    const handleRowDoubleClick = (\n      rowIndex: any,\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      const row = rows[rowIndex];\n      if (unSelectable(row)) return;\n      if (!isRowSelectable) return;\n\n\n      let selectedItemsParams: Array<number> = [];\n      if (isMultipleSelect) {\n        selectedItemsParams = [...selectedItems, ...selectedRows];\n      } else {\n        selectedItemsParams = [rowIndex];\n      }\n\n\n      if (selectedItems.includes(rowIndex) && !freeze) {\n        selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\n        setSelectedItems(selectedItemsParams);\n        onSelectionChangeRef.current([], rowIndex);\n        return;\n      }\n\n      setSelectedItems(selectedItemsParams);\n      onSelectionChangeRef.current([row], rowIndex);\n    };\n    const handleKeyDown = (e: any) => {\n      e.stopPropagation()\n\n      if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        setSelectedRows((prevIndex: any) => {\n          if (prevIndex[prevIndex.length - 1] === null) return [0];\n          if (prevIndex[prevIndex.length - 1] >= rows.length - 1) {\n            return [rows.length - 1];\n          }\n          const newPrevIndex = prevIndex[prevIndex.length - 1] + 1;\n          const row = document.querySelector(`.row-${newPrevIndex}`);\n          row?.querySelector(\"input\")?.focus();\n\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n          return [newPrevIndex];\n        });\n      } else if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n\n        if (selectedRows[selectedRows.length - 1] === 0) {\n          const input = document.querySelector(\n            inputsearchselector\n          ) as HTMLInputElement;\n          if (input && input.tagName === \"INPUT\") {\n            input?.focus();\n          } else if (input && input.tagName === \"DIV\") {\n            const divInput = document.querySelector(\n              `${inputsearchselector} input`\n            ) as HTMLInputElement;\n\n            divInput?.focus();\n          }\n        }\n\n        setSelectedRows((prevIndex: any) => {\n          if (prevIndex[prevIndex.length - 1] === 0) return [0];\n          const newPrevIndex = prevIndex[prevIndex.length - 1] - 1;\n          const row = document.querySelector(`.row-${newPrevIndex}`);\n\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n          row?.querySelector(\"input\")?.focus();\n          return [newPrevIndex];\n        });\n      }\n\n    };\n    const handleRowKeyDown = (e: any) => {\n      e.stopPropagation()\n\n      if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n        e.preventDefault();\n        if (!isRowSelectable) return;\n\n        let selectedItemsParams: Array<number> = [];\n        const rowIndex = selectedRows[selectedRows.length - 1];\n        if (isMultipleSelect) {\n          selectedItemsParams = [...selectedItems, ...selectedRows];\n        } else {\n          selectedItemsParams = [rowIndex];\n        }\n        const row = rows[selectedItemsParams[selectedItemsParams.length - 1]];\n        if (unSelectable(row)) {\n          return;\n        }\n\n        if (selectedItems.includes(rowIndex) && !freeze) {\n          selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\n          setSelectedItems(selectedItemsParams);\n          onSelectionChangeRef.current([], rowIndex);\n          return;\n        }\n\n        setSelectedItems(selectedItemsParams);\n        onSelectionChangeRef.current([row], rowIndex);\n      } else if (e.key === \"Delete\" || e.key === \"Backspace\") {\n        if (!isRowSelectable) return;\n\n        const selectedRowData = rows.filter((d, idx) =>\n          selectedRows.includes(idx)\n        );\n\n        if (onKeyDownRef?.current) {\n          onKeyDownRef?.current(selectedRowData, e.key);\n        }\n      }\n    }\n    useImperativeHandle(UpwardTableRef, () => ({\n      resetTableSelected: () => {\n        setSelectedRows([0]);\n        setLastSelectedRowIndex(0);\n        setSelectedItems([]);\n        if (rows.length > 0) {\n          const row = document.querySelector(`.row-${0}`);\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n        }\n      },\n      getSelectedRows: () => {\n        return rows.filter((d, idx) => selectedItems.includes(idx));\n      },\n      setSelectRows: (selectRows: any) => {\n        setSelectedItems(selectRows)\n      }\n    }));\n\n\n\n\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n        onKeyDown={handleKeyDown}\n      >\n        <div>\n          <div className=\"table-frame-color\">\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                // width: `${width - 10}px        `,\n                width:\"100%\",\n                height: `${height - 135}px`,\n                minHeight: \"270px\"\n              }}\n              className=\"table-frame\"\n            >\n              <div className=\"table-panel\">\n                <div ref={divRef} className={`grid-container `} tabIndex={-1}>\n                  <div\n                    className=\"grid-row grid-header\"\n                    style={{\n                      position: \"sticky\",\n                      zIndex: \"10\",\n                      top: \"-1px\",\n                      background: \"white\",\n                    }}\n                  >\n                    {columns.map((col: any, index: number) => (\n                      <div\n                        key={index}\n                        className={`grid-cell header-cell ${hoveredColumn === index ? `highlight-column` : \"\"\n                          }`} // Add the class if hovered\n                        style={{ width: col.width, height: \"20px\", }}\n                      >\n                        <input\n                          style={{ fontWeight: \"bold\" }}\n                          defaultValue={col.headerName}\n                          readOnly\n                          onChange={(e) => { }}\n                        />\n                        <div\n                          className=\"resize-handle\"\n                          onMouseDown={(e) => startResize(index, e)}\n                          onMouseEnter={(e) => {\n                            e.preventDefault();\n                            handleMouseEnter(index);\n                          }} // On hover\n                          onMouseLeave={(e) => {\n                            e.preventDefault();\n                            handleMouseLeave();\n                          }} // On mouse leave\n                        />\n                      </div>\n                    ))}\n                  </div>\n                  {pages[pageNumber]?.map((row: any, rowIndex: any) => (\n                    <div\n                      className={`grid-row row-${rowIndex}`} // Highlight selected row\n                      key={rowIndex}\n                      onClick={(e) => handleRowClick(rowIndex, e)}\n                      onDoubleClick={(e) => {\n                        e.stopPropagation()\n\n                        if (_clickTimeout) {\n                          clearTimeout(_clickTimeout);\n                          _setClickTimeout(null);\n                        }\n\n                        const timeoutId: any = setTimeout(() => {\n                          handleRowDoubleClick(rowIndex, e)\n                        }, 300);\n\n                        _setClickTimeout(timeoutId);\n\n\n\n                      }}\n                      onKeyDown={(e) => {\n\n                        e.stopPropagation()\n\n                        if (_clickTimeout) {\n                          clearTimeout(_clickTimeout);\n                          _setClickTimeout(null);\n                        }\n\n                        const timeoutId: any = setTimeout(() => {\n                          handleRowKeyDown(e)\n                        }, 300);\n\n                        _setClickTimeout(timeoutId);\n\n\n                      }}\n                    >\n                      {columns.map((col: any, colIndex: number) => (\n                        <div\n                          key={colIndex}\n                          style={{ width: col.width }}\n                          className={`grid-cell ${hoveredColumn === colIndex ? `highlight-column` : \"\"\n                            }`}\n                        >\n                          <input\n                            value={row[col.field]}\n                            onChange={(e) => { }}\n                            readOnly={dataReadOnly}\n                            className={`${selectedRows.includes(rowIndex)\n                              ? \"selected-row\"\n                              : \"\"\n                              } ${selectedItems.includes(rowIndex)\n                                ? \"selected-items\"\n                                : \"\"\n                              }\n                          ${col.type === \"number\" ? \"number\" : \"text\"}\n                          `}\n                          />\n                          <div\n                            className=\"resize-handle\"\n                            onMouseDown={(e) => {\n                              e.preventDefault();\n                              startResize(colIndex, e);\n                            }}\n                            onMouseEnter={(e) => {\n                              e.preventDefault();\n                              handleMouseEnter(colIndex);\n                            }} // On hover\n                            onMouseLeave={(e) => {\n                              e.preventDefault();\n                              handleMouseLeave();\n                            }} // On mouse leave\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {isLoading && <div className=\"table-loading\">\n              <div className=\"loader\"></div>\n            </div>}\n          </div>\n          <div className=\"table-panel-footer\" >\n            <div>Records : {rows.length}</div>\n            <div><Pagination count={pages.length} onChange={(e, value) => {\n              setPageNumber(value - 1)\n            }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nfunction formatArrayIntoChunks(arr: Array<any>, chunkSize = 100) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    // Use slice to create chunks of 'chunkSize'\n    result.push(arr.slice(i, i + chunkSize));\n  }\n  return result;\n}\n\n\n\n\n\nexport { UpwardTable, };\n","import { useEffect, useRef, useState, useCallback, useId } from \"react\";\nimport \"../style/upwardtablemodel.css\";\nimport { TextInput } from \"../components/UpwardFields\";\nimport { UpwardTable } from \"../components/UpwardTable\";\nimport { throttle } from \"lodash\";\nimport { AxiosInstance } from \"axios\";\nimport { User } from \"../components/AuthContext\";\nimport { useMutation } from \"react-query\";\n\ninterface UseUpwardTableModalProps {\n  myAxios: AxiosInstance;\n  user: User | null;\n  column: Array<any>;\n  link: {\n    url: string;\n    queryUrlName: string;\n  };\n  onSelectionChange: (selectedRow: any) => void;\n  onModalClose?: () => void;\n  responseDataKey: string;\n}\nexport const useUpwardTableModal = ({\n  myAxios,\n  user,\n  column,\n  link,\n  onSelectionChange,\n  responseDataKey,\n  onModalClose = () => { },\n}: UseUpwardTableModalProps) => {\n  const id = useId();\n  const inputSearchRef = useRef<HTMLInputElement>(null);\n  const tableRef = useRef<any>(null);\n  const parentRef = useRef<any>(null);\n  const [show, setShowModal] = useState(false);\n  const [rows, setRows] = useState([]);\n  const { isLoading, mutate } = useMutation({\n    mutationKey: id,\n    mutationFn: async (variable: any) =>\n      await myAxios.get(\n        `${link?.url}?${link?.queryUrlName}=${variable.search}`,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      setRows(response.data[responseDataKey]);\n    },\n  });\n  const performSearch = (query: string) => {\n    if (query === \"\") {\n      mutate({ search: query });\n    }\n  };\n  // Throttle the search function to limit it to once every 500ms\n  const throttledSearch = useCallback(\n    throttle((query) => performSearch(query), 500),\n    []\n  );\n  const openModal = (search: string) => {\n    mutate({ search: search });\n    setShowModal(true);\n    setTimeout(() => {\n      if (inputSearchRef.current) {\n        inputSearchRef.current.value = search;\n      }\n      inputSearchRef.current?.focus();\n    }, 150);\n  };\n  const closeModal = () => {\n    setShowModal(false);\n    onModalClose();\n  };\n\n  const width = 460;\n  const height = 560;\n\n  useEffect(() => {\n    if (show && parentRef.current) {\n      parentRef.current?.focus();\n    }\n  }, [show, parentRef]);\n\n  const Modal = show ? (\n    <div\n      className=\"modal-parent\"\n      ref={parentRef}\n      tabIndex={-1}\n      onKeyDown={(e) => {\n        if (e.key === \"Escape\") {\n          closeModal();\n\n        }\n      }}\n    >\n      <div className=\"modal-content\">\n        <TextInput\n          label={{ style: { display: \"none\" } }}\n          input={{\n            className: \"search-input-up-on-key-down\",\n            type: \"text\",\n            style: { width: \"100%\", marginBottom: \"20px\" },\n            onChange: (e) => {\n              e.preventDefault();\n              throttledSearch(e.currentTarget.value);\n            },\n            onKeyDown: (e) => {\n              if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n                e.preventDefault();\n                mutate({ search: (e.target as any).value });\n              }\n              if (e.key === \"ArrowDown\") {\n                e.preventDefault();\n                const datagridview = document.querySelector(\n                  `.grid-container`\n                ) as HTMLDivElement;\n                console.log(datagridview);\n                datagridview.focus();\n              }\n            },\n          }}\n          inputRef={inputSearchRef}\n        />\n        <UpwardTable\n          ref={tableRef}\n          rows={rows}\n          column={column.filter((itm) => !itm.hide)}\n          width={width}\n          height={height}\n          dataReadOnly={true}\n          onSelectionChange={onSelectionChange}\n        />\n        <button className=\"close-modal\" onClick={closeModal}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16px\"\n            height=\"16px\"\n            viewBox=\"-0.5 0 25 25\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M3 21.32L21 3.32001\"\n              stroke=\"#000000\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M3 3.32001L21 21.32\"\n              stroke=\"#000000\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </button>\n      </div>\n    </div>\n  ) : null;\n\n  return {\n    Modal,\n    openModal,\n    closeModal,\n    isLoading,\n  };\n};\n","import React, { useContext, useState, useRef, useReducer } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Modal,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  MenuItem,\n  Menu,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { flushSync } from \"react-dom\";\nimport { LoadingButton } from \"@mui/lab\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport DriveFolderUploadIcon from \"@mui/icons-material/DriveFolderUpload\";\nimport { DisplayFile, checkFile } from \"../Claims/Claims\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { grey } from \"@mui/material/colors\";\nimport { UpwardTable } from \"../../../../components/UpwardTable\";\nimport { useUpwardTableModal } from \"../../../../hooks/useUpwardTableModal\";\n\nconst initialState = {\n  Sub_Ref_No: \"\",\n  Ref_No: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  search: \"\",\n  pdcMode: \"\",\n  checkMode: \"\",\n  sub_account: \"\",\n  Acronym: \"\",\n};\nconst modalPdcCheckInititalState = {\n  CheckIdx: \"0\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  Check_Count: \"\",\n};\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport const pdcColumn = [\n  { field: \"Check_No\", headerName: \"Check No.\", width: 150 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 150 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"BankName\", headerName: \"Bank\", width: 200 },\n  { field: \"Branch\", headerName: \"Branch\", width: 200 },\n  {\n    field: \"Check_Remarks\",\n    headerName: \"Checked Remarks\",\n    width: 350,\n  },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 150 },\n  { field: \"DateDeposit\", headerName: \"Date Deposit\", width: 150 },\n  { field: \"OR_No\", headerName: \"OR Num\", width: 150 },\n  { field: \"BankCode\", headerName: \"Bank Code\", width: 150, hide: true },\n];\nexport const pdcSearchColumn = [\n  { field: \"Date\", headerName: \"Date Received\", width: 160 },\n  { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n  {\n    field: \"Name\",\n    headerName: \"Name\",\n    flex: 1,\n  },\n];\nexport const pdcBanksColumn = [\n  { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n  { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n];\nconst queryKey = \"pdc\";\nconst quertKeyPDCSearch = \"pdc-search\";\n\nexport default function PostDateChecks() {\n  const tableRef = useRef<any>(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<Array<File>>([]);\n  const [pdcDataRows, setPdcDataRows] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [stateModalPdcCheck, dispatchModalPdcCheck] = useReducer(\n    reducer,\n    modalPdcCheckInititalState\n  );\n\n  const { myAxios, user } = useContext(AuthContext);\n  const dataGridFunctions = useRef<any>(null);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  // pdc form save button\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const savePDCButtonRef = useRef<HTMLButtonElement>(null);\n  const openIdsButtonRef = useRef<HTMLButtonElement>(null);\n  //check modal refs\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButtonActionRef = useRef<any>(null);\n  // search modal auto focus on load\n  const addRefButton = useRef<HTMLButtonElement>(null);\n  const queryClient = useQueryClient();\n  const table = useRef<any>(null);\n\n  const { isLoading: newRefNumberLoading, refetch: refetchNewRefNumber } =\n    useQuery({\n      queryKey: \"new-ref-number\",\n      queryFn: async () => {\n        return await myAxios.get(\"/task/accounting/pdc-new-ref-number\", {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      },\n      refetchOnWindowFocus: false,\n      onSuccess: (res) => {\n        const response = res as any;\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Sub_Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n      },\n    });\n  const { mutate, isLoading: loadingAddNew } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) => {\n      if (state.pdcMode === \"update\") {\n        delete variables.mode;\n        return await myAxios.post(\"/task/accounting/update-pdc\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-pdc\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        refetchNewRefNumber();\n        queryClient.invalidateQueries(quertKeyPDCSearch);\n        setNewStateValue(dispatch, initialState);\n        setPdcDataRows([]);\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"\",\n        });\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  //selecte search\n\n  const { mutate: mutateSelectedSearch, isLoading: isLoadingSelectedSearch } =\n    useMutation({\n      mutationKey: queryKey,\n      mutationFn: async (variables: any) =>\n        await myAxios.post(\"/task/accounting/get-search-pdc-check\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }),\n      onSuccess: async (res) => {\n        if (!res?.data.success) {\n          return alert(`Error : ${res?.data.message}`);\n        }\n        const response = res as any;\n        const Ref_No = response.data.getSearchPDCCheck[0].Ref_No;\n        if (response.data.upload[0]) {\n          const uploadFiles = JSON.parse(response.data.upload[0]?.upload);\n          const newObjContainerBasic = await formatDataToDocument(\n            uploadFiles,\n            `${process.env.REACT_APP_IMAGE_URL}pdc/${Ref_No}`\n          );\n          const fileSelected = await Promise.all(newObjContainerBasic);\n          setSelectedFiles(fileSelected);\n        }\n        async function formatDataToDocument(\n          dataDocument: Array<any>,\n          url: string\n        ) {\n          const newObjContainer: Array<any> = [];\n          for (let index = 0; index < dataDocument.length; index++) {\n            const basicItem = dataDocument[index];\n            const mainURL = `${url}/${basicItem.uniqueFilename}`;\n            const response = await fetch(mainURL);\n            const blob = await response.blob();\n            const file = new File([blob], basicItem.fileName, {\n              type: basicItem.fileType,\n            });\n            const reader = new FileReader();\n            newObjContainer.push(\n              new Promise((resolve, reject) => {\n                reader.onload = function (event) {\n                  resolve(file);\n                };\n                reader.onerror = function (event) {\n                  reject(new Error(\"Error reading file: \" + file.name));\n                };\n                reader.readAsDataURL(file);\n              })\n            );\n          }\n          return newObjContainer;\n        }\n\n        setPdcDataRows(\n          response.data.getSearchPDCCheck.map((item: any, idx: number) => {\n            return { ...item, CheckIdx: `${idx}` };\n          })\n        );\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.getSearchPDCCheck[0].Ref_No,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: response.data.getSearchPDCCheck[0].Name,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Date\",\n          value: response.data.getSearchPDCCheck[0].Date,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: response.data.getSearchPDCCheck[0].PNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: response.data.getSearchPDCCheck[0].IDNo,\n        });\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: response.data.getSearchPDCCheck[0].Acronym,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: response.data.getSearchPDCCheck[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: response.data.getSearchPDCCheck[0].Remarks,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"update\",\n        });\n      },\n    });\n  // policy ids search table modal\n  const {\n    Modal: ModalSearchPdcIDs,\n    closeModal: closeModalSearchPdcIDs,\n    openModal: openModalSearchPdcIDs,\n    isLoading: isLoadingModalSearchPdcIDs,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    column: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      { field: \"chassis\", headerName: \"Chassis No.\", width: 200, hide: true },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 350,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        width: 300,\n        hide: true,\n      },\n      {\n        field: \"client_id\",\n        headerName: \"client_id\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: selectedRow[0].IDNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: selectedRow[0].client_id,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: selectedRow[0].Name ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: selectedRow[0].remarks ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: selectedRow[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: selectedRow[0].Acronym,\n        });\n\n        closeModalSearchPdcIDs();\n        if (pdcDataRows.length <= 0) {\n          setTimeout(() => {\n            addRefButton.current?.click();\n          }, 100);\n        }\n      }\n    },\n\n    responseDataKey: \"clientsId\",\n  });\n  // bank search table modal\n  const {\n    Modal: ModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    openModal: openModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    column: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 100 },\n      { field: \"Bank\", headerName: \"Bank Name\", width: 350 },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankName\",\n          value: selectedRow[0].Bank,\n        });\n\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankCode\",\n          value: selectedRow[0].Bank_Code,\n        });\n        closeModalSearchBanks();\n        setOpenPdcInputModal(true);\n        setTimeout(() => {\n          checkBranchRef.current?.focus();\n        }, 100);\n      }\n    },\n    onModalClose: () => {\n      setTimeout(() => {\n        setOpenPdcInputModal(true);\n      }, 100);\n    },\n    responseDataKey: \"pdcBanks\",\n  });\n  // pdc search table modal\n  const {\n    Modal: UpwardPDCModal,\n    closeModal: closeUpwardPDCModal,\n    openModal: openUpwardPDCModal,\n    isLoading: isLoadingModalSearchPDC,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    column: [\n      { field: \"Date\", headerName: \"Date Received\", width: 90 },\n      { field: \"Ref_No\", headerName: \"Ref No.\", width: 80 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 320,\n      },\n    ],\n    link: {\n      url: \"/task/accounting/search-pdc\",\n      queryUrlName: \"searchPDCInput\",\n    },\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        mutateSelectedSearch({ ref_no: selectedRow[0].Ref_No });\n        closeUpwardPDCModal();\n        if (searchRef.current) {\n          searchRef.current?.focus();\n        }\n      }\n    },\n    responseDataKey: \"searchPDC\",\n  });\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  const handleModalInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchModalPdcCheck({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  async function handleOnSave(e: any) {\n    if (state.PNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide loan information!\",\n        timer: 1500,\n      }).then(() => {\n        setTimeout(() => {\n          openIdsButtonRef.current?.click();\n        }, 350);\n      });\n    }\n    if (pdcDataRows.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide entry!\",\n        timer: 1500,\n      }).then(() => {\n        setOpenPdcInputModal(true);\n      });\n    }\n    if (state.PNo.length >= 45) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Pno is too long!\",\n        timer: 1500,\n      });\n    }\n    if (state.Remarks.length >= 220) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Remarks is too long!\",\n        timer: 1500,\n      });\n    }\n    const filePromises: Array<any> = [];\n    function fileTransfer(filePromises: Array<any>) {\n      const files = selectedFiles;\n      if (files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const reader = new FileReader();\n          filePromises.push(\n            new Promise((resolve, reject) => {\n              reader.onload = function (event) {\n                resolve({\n                  datakey: \"pdc_file\",\n                  fileName: file.name,\n                  fileContent: event.target?.result,\n                  fileType: file.type,\n                  file,\n                });\n              };\n              reader.onerror = function (event) {\n                reject(new Error(\"Error reading file: \" + file.name));\n              };\n              reader.readAsDataURL(file);\n            })\n          );\n        }\n      }\n    }\n    fileTransfer(filePromises);\n    const fileToSave = await Promise.all(filePromises);\n    const stateSubmited = {\n      Ref_No: state.Ref_No,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      Remarks: state.Remarks,\n      BankCode: state.BankCode,\n      checks: JSON.stringify(pdcDataRows),\n    };\n    if (state.pdcMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...stateSubmited, userCodeConfirmation, fileToSave });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...stateSubmited, fileToSave });\n        },\n      });\n    }\n  }\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const fileList = e.dataTransfer.files;\n    const files = Array.from(fileList);\n    const newFiles = [...selectedFiles, ...files];\n    setIsDragging(false);\n    if (checkFile(newFiles)) {\n      fileInputRef.current?.click();\n      return alert(\"file is not valid Extention!\");\n    } else {\n      setSelectedFiles(newFiles);\n    }\n  };\n  const clickPDCReceipt = () => {\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(pdcDataRows));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"pdc\");\n      localStorage.setItem(\"state\", JSON.stringify(state));\n      localStorage.setItem(\n        \"column\",\n        JSON.stringify([\n          { datakey: \"Check_No\", header: \"CHECK NO\", width: \"80px\" },\n          { datakey: \"Check_Date\", header: \"DATE\", width: \"130px\" },\n          { datakey: \"BankName\", header: \"BANK\", width: \"240px\" },\n          { datakey: \"Check_Amnt\", header: \"AMOUNT\", width: \"70px\" },\n          { datakey: \"SEQ\", header: \"SEQ\", width: \"30px\" },\n        ])\n      );\n\n      localStorage.setItem(\n        \"title\",\n        user?.department === \"UMIS\"\n          ? \"UPWARD MANAGEMENT INSURANCE SERVICES\\n Post Date Checks Receipt\"\n          : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n Post Date Checks Receipt\"\n      );\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const clickPDCLabeling = () => {\n    let printString = () => {\n      return (\n        <div>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              marginTop: \"8px\",\n              marginBottom: 0,\n            }}\n          >\n            UCSMI\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.Name}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.IDNo}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: \"20px\",\n            }}\n          >\n            {state.Ref_No}\n          </p>\n        </div>\n      );\n    };\n\n    flushSync(() => {\n      const elementString = ReactDOMServer.renderToString(printString());\n      localStorage.setItem(\"printString\", elementString);\n      localStorage.removeItem(\"dataString\");\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const onSelectionChange = (selectedRow: any) => {\n    if (selectedRow.length > 0) {\n      const rowSelected = selectedRow[0];\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"update\",\n      });\n      setNewStateValue(dispatchModalPdcCheck, rowSelected);\n      flushSync(() => {\n        setOpenPdcInputModal(true);\n      });\n      checkModalSaveButtonActionRef.current?.focusVisible();\n    } else {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"\",\n      });\n    }\n  };\n  const isDisableField = state.pdcMode === \"\";\n  const width = window.innerWidth - 50;\n  const height = window.innerHeight - 145;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n        background: \"red\",\n        padding: \"10px\",\n        backgroundColor: \"#F8F8FF\",\n      }}\n    >\n      {UpwardPDCModal}\n      {ModalSearchPdcIDs}\n      {ModalSearchBanks}\n      <Box\n        sx={(theme) => ({\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"20px\",\n          [theme.breakpoints.down(\"sm\")]: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            flex: 1,\n            marginBottom: \"15px\",\n          },\n        })}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n            marginBottom: \"15px\",\n          }}\n        >\n          {isLoadingModalSearchPDC ? (\n            <LoadingButton loading={isLoadingModalSearchPDC} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              value={state.search}\n              onChange={handleInputChange}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  openUpwardPDCModal((e.target as HTMLInputElement).value);\n                }\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const datagridview = document.querySelector(\n                    `.grid-container`\n                  ) as HTMLDivElement;\n                  datagridview.focus();\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n                inputRef: searchRef,\n                className: \"manok\",\n              }}\n              sx={{\n                width: \"400px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n          {state.pdcMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              color=\"primary\"\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"pdcMode\",\n                  value: \"add\",\n                });\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            ref={savePDCButtonRef}\n            id=\"save-entry-header\"\n            color=\"success\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={handleOnSave}\n            disabled={state.pdcMode === \"\"}\n            loading={loadingAddNew}\n            startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n          >\n            Save\n          </LoadingButton>\n          {(state.pdcMode === \"add\" || state.pdcMode === \"update\") && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    initialState.Sub_Ref_No = state.Sub_Ref_No;\n                    initialState.Ref_No = state.Sub_Ref_No;\n                    setNewStateValue(dispatch, initialState);\n                    setPdcDataRows([]);\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"pdcMode\",\n                      value: \"\",\n                    });\n                  }\n                });\n              }}\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          )}\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            disabled={state.pdcMode === \"\"}\n            variant=\"contained\"\n            startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n            onClick={() => {\n              const getLastCheck_No: any = pdcDataRows[pdcDataRows.length - 1];\n              modalPdcCheckInititalState.Check_No = incrementCheckNo(\n                getLastCheck_No?.Check_No\n              );\n              setNewStateValue(\n                dispatchModalPdcCheck,\n                modalPdcCheckInititalState\n              );\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"\",\n              });\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n\n              if (state.checkMode !== \"update\") {\n                checkNoRef.current?.focus();\n              }\n            }}\n            ref={addRefButton}\n          >\n            Add Check\n          </Button>\n          <div>\n            <Button\n              disabled={state.pdcMode !== \"update\"}\n              id=\"basic-button\"\n              aria-controls={open ? \"basic-menu\" : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? \"true\" : undefined}\n              onClick={handleClick}\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n                color: \"white\",\n                backgroundColor: grey[600],\n                \"&:hover\": {\n                  backgroundColor: grey[700],\n                },\n              }}\n            >\n              Print\n            </Button>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                \"aria-labelledby\": \"basic-button\",\n              }}\n            >\n              <MenuItem onClick={clickPDCReceipt}>PDC Receipt</MenuItem>\n              <MenuItem onClick={clickPDCLabeling}>PDC Labeling</MenuItem>\n            </Menu>\n          </div>\n        </div>\n      </Box>\n      <form\n        onKeyDown={(e) => {\n          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n            e.preventDefault();\n            return;\n          }\n        }}\n        style={{\n          marginBottom: \"20px\",\n        }}\n      >\n        <Box\n          sx={(theme) => ({\n            display: \"flex\",\n            columnGap: \"15px\",\n            flexDirection: \"row\",\n            [theme.breakpoints.down(\"md\")]: {\n              flexDirection: \"column\",\n              rowGap: \"10px\",\n            },\n          })}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: \"10px\",\n              width: \"100%\",\n            }}\n          >\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                } as any\n              }\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                }}\n              >\n                {newRefNumberLoading ? (\n                  <LoadingButton loading={newRefNumberLoading} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"pdc-id-field\">\n                      Reference No.\n                    </InputLabel>\n                    <OutlinedInput\n                      readOnly={user?.department !== \"UCSMI\"}\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                        fieldset: { borderColor: \"black\" },\n                      }}\n                      disabled={isDisableField}\n                      label=\"Reference No.\"\n                      name=\"Ref_No\"\n                      value={state.Ref_No}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          return savePDCButtonRef.current?.click();\n                        }\n                      }}\n                      id=\"pdc-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  fullWidth={true}\n                  disabled={isDisableField}\n                  label=\"Date Received\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n              </div>\n              <TextField\n                InputLabelProps={{\n                  sx: {\n                    color: \"black\",\n                  },\n                }}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Remarks\"\n                value={state.Remarks}\n                onChange={handleInputChange}\n                disabled={isDisableField}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    savePDCButtonRef.current?.click();\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  fieldset: { borderColor: \"black\" },\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </fieldset>\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  flexDirection: \"column\",\n                } as any\n              }\n            >\n              <div\n                style={{ width: \"100%\", flex: 1, display: \"flex\", gap: \"10px\" }}\n              >\n                {isLoadingModalSearchPdcIDs ? (\n                  <LoadingButton loading={isLoadingModalSearchPdcIDs} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">\n                      PN/Client ID\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        fieldset: { borderColor: \"black\" },\n\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          openIdsButtonRef.current?.click();\n                        }\n                      }}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            ref={openIdsButtonRef}\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => openModalSearchPdcIDs(state.PNo)}\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Acronym\"\n                  value={state.Acronym}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{ width: \"100%\", display: \"flex\", columnGap: \"10px\" }}\n              >\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <Button\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={state.pdcMode === \"\"}\n                  variant=\"contained\"\n                  startIcon={<DownloadIcon sx={{ width: 15, height: 15 }} />}\n                  onClick={() => {\n                    setShowModal(true);\n                  }}\n                >\n                  Upload Check\n                </Button>\n              </div>\n            </fieldset>\n          </Box>\n        </Box>\n      </form>\n      <UpwardTable\n        isLoading={isLoadingSelectedSearch}\n        ref={tableRef}\n        rows={pdcDataRows}\n        column={pdcColumn}\n        width={width}\n        height={height}\n        dataReadOnly={true}\n        onSelectionChange={onSelectionChange}\n        onKeyDown={(row, key) => {\n          if (key === \"Delete\" || key === \"Backspace\") {\n            const rowSelected = row[0];\n            if (\n              (rowSelected.Deposit_Slip && rowSelected.Deposit_Slip !== \"\") ||\n              (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n              (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n            ) {\n              return Swal.fire({\n                position: \"center\",\n                icon: \"warning\",\n                title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n                showConfirmButton: false,\n                timer: 1500,\n              });\n            }\n            const timeout = setTimeout(() => {\n              Swal.fire({\n                title: \"Are you sure?\",\n                text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  return setPdcDataRows((dt) => {\n                    return dt.filter(\n                      (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n                    );\n                  });\n                }\n                table.current?.removeSelection();\n              });\n              clearTimeout(timeout);\n            }, 250);\n          }\n        }}\n        inputsearchselector=\".manok\"\n      />\n\n      <Modal\n        open={openPdcInputModal}\n        onClose={() => {\n          table.current?.removeSelection();\n          setOpenPdcInputModal(false);\n        }}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\" as \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"auto\",\n            bgcolor: \"background.paper\",\n            p: 4,\n          }}\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Check Detail\n          </Typography>\n          <br />\n          <div\n            style={{\n              display: \"flex\",\n              columnGap: \"10px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"10px\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Check No.\"\n                name=\"Check_No\"\n                value={stateModalPdcCheck.Check_No}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkNoRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {isLoadingModalSearchbanks ? (\n                <LoadingButton loading={isLoadingModalSearchbanks} />\n              ) : (\n                <FormControl\n                  sx={{\n                    width: \"100%\",\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                  <OutlinedInput\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                    inputRef={checkBankRef}\n                    fullWidth\n                    label=\"Bank\"\n                    name=\"BankName\"\n                    value={stateModalPdcCheck.BankName}\n                    onChange={handleModalInputChange}\n                    id=\"label-input-id\"\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        setOpenPdcInputModal(false);\n\n                        return openModalSearchBanks(\n                          stateModalPdcCheck.BankName\n                        );\n                      }\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"search-client\"\n                          color=\"secondary\"\n                          edge=\"end\"\n                          onClick={() => {\n                            setOpenPdcInputModal(false);\n\n                            openModalSearchBanks(stateModalPdcCheck.BankName);\n                          }}\n                        >\n                          <PolicyIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"Branch\"\n                value={stateModalPdcCheck.Branch}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkBranchRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Check_Remarks\"\n                value={stateModalPdcCheck.Check_Remarks}\n                onChange={handleModalInputChange}\n                rows={4}\n                multiline\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"auto\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"auto\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                flexDirection: \"column\",\n              }}\n            >\n              <CustomDatePicker\n                label=\"Check Dated\"\n                onChange={(value: any) => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateModalPdcCheck.Check_Date)}\n                inputRef={checkDateRef}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"Check_Amnt\"\n                value={stateModalPdcCheck.Check_Amnt}\n                onChange={handleModalInputChange}\n                placeholder=\"0.00\"\n                onBlur={() => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Amnt\",\n                    value: parseFloat(\n                      stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  inputRef: checkAmountRef,\n                }}\n                sx={{\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {state.checkMode !== \"update\" && (\n                <TextField\n                  type=\"number\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check Count\"\n                  name=\"Check_Count\"\n                  value={stateModalPdcCheck.Check_Count}\n                  onChange={handleModalInputChange}\n                  placeholder=\"0\"\n                  onKeyDown={(e: any) => {\n                    const validCode = [\"Enter\", \"NumpadEnter\"];\n                    if (validCode.includes(e.code)) {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputProps: {\n                      min: 1,\n                      type: \"text\",\n                      pattern: \"[0-9]*\",\n                    },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              width: \"100%\",\n              marginTop: \"10px\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveButtonActionRef}\n                color=\"primary\"\n                variant=\"contained\"\n                autoFocus={state.checkMode !== \"\"}\n                onClick={() => {\n                  if (state.checkMode === \"update\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Update Check ${stateModalPdcCheck.Check_No}`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n                      modalCheckAddUpdate();\n                    });\n                  }\n                  modalCheckAddUpdate();\n\n                  function modalCheckAddUpdate() {\n                    if (\n                      state.checkMode !== \"update\" &&\n                      pdcDataRows\n                        .map((item: any) => item.Check_No)\n                        .includes(stateModalPdcCheck.Check_No)\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Check is already exist!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n                    if (\n                      parseInt(stateModalPdcCheck.Check_Amnt) <= 0 ||\n                      isNaN(parseInt(stateModalPdcCheck.Check_Amnt))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check amount!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide bank!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide branch!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_No.length >= 40) {\n                      return Swal.fire({\n                        text: \"Check No is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_Amnt.length >= 200) {\n                      return Swal.fire({\n                        text: \"Check Amount is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch.length >= 45) {\n                      return Swal.fire({\n                        text: \"Branch is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_Remarks.length >= 220) {\n                      return Swal.fire({\n                        text: \"Remarks is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    stateModalPdcCheck.Check_Amnt = parseFloat(\n                      stateModalPdcCheck.Check_Amnt.toString().replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      style: \"decimal\",\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    stateModalPdcCheck.Check_Date = new Date(\n                      stateModalPdcCheck.Check_Date\n                    ).toLocaleDateString(\"en-US\", {\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                      year: \"numeric\",\n                    });\n                    const checkContainer: any = [];\n                    if (\n                      !isNaN(parseInt(stateModalPdcCheck.Check_Count)) &&\n                      parseInt(stateModalPdcCheck.Check_Count) > 0 &&\n                      state.checkMode !== \"update\"\n                    ) {\n                      for (\n                        let i = 0;\n                        i < parseInt(stateModalPdcCheck.Check_Count);\n                        i++\n                      ) {\n                        let CheckIdx = (\n                          pdcDataRows.length > 0\n                            ? parseInt(\n                              (pdcDataRows[pdcDataRows.length - 1] as any)\n                                .CheckIdx\n                            ) +\n                            (i + 1)\n                            : i\n                        ).toString();\n\n                        const currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + i);\n                        const data: any = {\n                          CheckIdx,\n                          Check_No: incrementStringNumbers(\n                            stateModalPdcCheck.Check_No,\n                            i\n                          ),\n                          Check_Date: currentDate.toLocaleDateString(\"en-US\", {\n                            month: \"2-digit\",\n                            day: \"2-digit\",\n                            year: \"numeric\",\n                          }),\n                          Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                          BankName: stateModalPdcCheck.BankName,\n                          BankCode: stateModalPdcCheck.BankCode,\n                          Branch: stateModalPdcCheck.Branch,\n                          Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                          Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                          DateDeposit: stateModalPdcCheck.DateDeposit,\n                          OR_No: stateModalPdcCheck.OR_No,\n                        };\n\n                        if (\n                          state.checkMode !== \"update\" &&\n                          pdcDataRows\n                            .map((item: any) => item.Check_No)\n                            .includes(data.Check_No)\n                        ) {\n                          setOpenPdcInputModal(false);\n                          return Swal.fire({\n                            text: \"Check is already exist!\",\n                            icon: \"warning\",\n                            showCancelButton: false,\n                            timer: 1500,\n                          }).then(() => {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkNoRef.current?.focus();\n                          });\n                        }\n\n                        checkContainer.push(data);\n                      }\n                      setPdcDataRows((d: any) => {\n                        d = [...d, ...checkContainer];\n                        return d;\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      });\n\n                      return;\n                    }\n\n                    function incrementStringNumbers(\n                      str: string,\n                      increment: number\n                    ) {\n                      let num = parseInt(str);\n                      num = num + increment;\n                      return num.toString().padStart(str.length, \"0\");\n                    }\n\n                    setPdcDataRows((dt: any) => {\n                      let CheckIdx = \"\";\n                      if (dt.length <= 0) {\n                        CheckIdx = \"0\";\n                      } else if (state.checkMode === \"update\") {\n                        CheckIdx = stateModalPdcCheck.CheckIdx;\n                      } else {\n                        CheckIdx = (\n                          parseInt(dt[dt.length - 1].CheckIdx) + 1\n                        ).toString();\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: CheckIdx,\n                      });\n\n                      const data: any = {\n                        Check_No: stateModalPdcCheck.Check_No,\n                        Check_Date: stateModalPdcCheck.Check_Date,\n                        Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                        BankName: stateModalPdcCheck.BankName,\n                        BankCode: stateModalPdcCheck.BankCode,\n                        Branch: stateModalPdcCheck.Branch,\n                        Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                        Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                        DateDeposit: stateModalPdcCheck.DateDeposit,\n                        OR_No: stateModalPdcCheck.OR_No,\n                      };\n                      if (state.checkMode === \"update\") {\n                        dt = dt.map((items: any) => {\n                          if (items.CheckIdx === CheckIdx) {\n                            items = { ...items, ...data };\n                          }\n                          return items;\n                        });\n                      } else {\n                        dt = [...dt, { CheckIdx, ...data }];\n                      }\n                      return dt;\n                    });\n\n                    setOpenPdcInputModal(false);\n\n                    Swal.fire({\n                      text:\n                        state.checkMode === \"update\"\n                          ? \"Check Update Successfully\"\n                          : \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                    }).then(() => {\n                      if (state.checkMode !== \"update\") {\n                        var currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + 1);\n\n                        dispatchModalPdcCheck({\n                          type: \"UPDATE_FIELD\",\n                          field: \"Check_Date\",\n                          value: currentDate,\n                        });\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                        ),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value:\n                          state.checkMode === \"update\"\n                            ? stateModalPdcCheck.Check_No\n                            : incrementCheckNo(stateModalPdcCheck.Check_No),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(true);\n                      });\n                      checkModalSaveButtonActionRef.current.focusVisible();\n                    });\n                  }\n                }}\n              >\n                {state.checkMode === \"update\" ? \"Update\" : \"Save\"}\n              </Button>\n              {state.checkMode === \"update\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Delete Check ${stateModalPdcCheck.Check_No} `,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n\n                      setPdcDataRows((dt) => {\n                        dt = dt.filter(\n                          (items: any) =>\n                            items.CheckIdx !== stateModalPdcCheck.CheckIdx\n                        );\n                        return dt;\n                      });\n                      dataGridFunctions.current?.removeSelection();\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  setNewStateValue(\n                    dispatchModalPdcCheck,\n                    modalPdcCheckInititalState\n                  );\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n              <IconButton\n                style={{\n                  position: \"absolute\",\n                  top: \"10px\",\n                  right: \"10px\",\n                }}\n                aria-label=\"search-client\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <div\n        style={{\n          display: showModal ? \"flex\" : \"none\",\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(158, 155, 157, 0.31)\",\n          zIndex: \"999\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: \"90%\",\n            height: \"90%\",\n          }}\n        >\n          <div\n            style={{\n              width: \"90%\",\n              height: \"90%\",\n              overflow: \"auto\",\n              background: \"white\",\n              padding: \"20px\",\n              margin: \"auto\",\n              zIndex: \"9929\",\n              boxShadow: \" -1px 1px 13px 6px rgba(0,0,0,0.54)\",\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                position: \"relative\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <IconButton\n                sx={{\n                  position: \"absolute\",\n                  right: \"5px\",\n                  top: \"5px\",\n                }}\n                onClick={() => {\n                  setShowModal(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"500px\",\n                  border: isDragging ? \"5px dashed green\" : \"5px dashed grey\",\n                  overflow: \"auto\",\n                  padding: \"10px\",\n                }}\n                onDragEnter={handleDragEnter}\n                onDragOver={(e) => e.preventDefault()}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div\n                  id=\"upload-container\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexWrap: \"wrap\",\n                  }}\n                  onDragEnter={handleDragEnter}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                >\n                  {selectedFiles.map((itm, idx) => {\n                    return (\n                      <DisplayFile\n                        key={idx}\n                        itm={itm}\n                        selectedFiles={selectedFiles}\n                        setSelectedFiles={setSelectedFiles}\n                        fileInput={fileInputRef}\n                      />\n                    );\n                  })}\n                </div>\n                {selectedFiles.length <= 0 && (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"50%\",\n                      left: \"50%\",\n                      transform: \"translate(-50%,-50%)\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <DriveFolderUploadIcon\n                      sx={{ fontSize: \"20em\", color: \"#64748b\" }}\n                    />\n                  </div>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  style={{ display: \"none\", background: \"white\" }}\n                  id=\"input-file\"\n                  onChange={(e) => {\n                    const fileList = e.target.files as FileList;\n                    const files = Array.from(fileList);\n                    const newFiles = [...selectedFiles, ...files];\n                    if (checkFile(newFiles)) {\n                      return alert(\"file is not valid Extention!\");\n                    }\n                    setSelectedFiles(newFiles);\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                }}\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    const inputFile = document.getElementById(\"input-file\");\n                    inputFile?.click();\n                  }}\n                >\n                  CLick it to upload\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {loadingAddNew ||\n        isLoadingSelectedSearch && <div className=\"loading-component\"><div className=\"loader\"></div></div>}\n\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nexport function incrementCheckNo(Check_No: string) {\n  if (Check_No === undefined || Check_No === null || Check_No === \"\") {\n    return \"001\";\n  }\n\n  let incrementedNumber = (parseInt(Check_No) + 1).toString();\n  while (incrementedNumber.length < Check_No.length) {\n    incrementedNumber = \"0\" + incrementedNumber;\n  }\n  return incrementedNumber;\n}\n"],"names":["TextInput","_ref","input","label","inputRef","icon","_ref$iconPosition","iconPosition","_ref$disableIcon","disableIcon","_ref$onIconClick","onIconClick","e","id","useId","_jsxs","style","display","alignItems","position","children","_jsx","_objectSpread","htmlFor","title","left","zIndex","ref","height","onClick","right","top","transform","cursor","justifyContent","background","pointerEvents","SelectInput","_ref2","select","selectRef","_ref2$datasource","datasource","_ref2$values","values","_ref2$display","className","map","itm","idx","value","ButtonField","_ref3","buttonRetRef","button","_ref3$tooltipText","tooltipText","_ref3$disabled","disabled","UpwardTable","forwardRef","UpwardTableRef","_pages$pageNumber","rows","column","width","dataReadOnly","_ref$onSelectionChang","onSelectionChange","_ref$isMultipleSelect","isMultipleSelect","_ref$freeze","freeze","onKeyDown","_ref$inputsearchselec","inputsearchselector","_ref$isRowSelectable","isRowSelectable","_ref$unSelectable","unSelectable","isLoading","_useState","useState","_useState2","_slicedToArray","pages","setPages","_useState3","_useState4","pageNumber","setPageNumber","onSelectionChangeRef","useRef","onKeyDownRef","_useState5","filter","hide","_useState6","columns","setColumns","_useState7","_useState8","hoveredColumn","setHoveredColumn","_useState9","_useState10","selectedRows","setSelectedRows","_useState11","_useState12","lastSelectedRowIndex","setLastSelectedRowIndex","_useState13","_useState14","selectedItems","setSelectedItems","divRef","_useState15","_useState16","_clickTimeout","_setClickTimeout","useEffect","_pages","arr","chunkSize","arguments","length","undefined","result","i","push","slice","formatArrayIntoChunks","startResize","index","preventDefault","stopPropagation","startX","clientX","startWidth","doDrag","moveEvent","newWidth","updatedColumns","_toConsumableArray","document","addEventListener","stopDrag","removeEventListener","handleMouseEnter","handleMouseLeave","useImperativeHandle","resetTableSelected","row","querySelector","concat","scrollIntoView","block","behavior","getSelectedRows","d","includes","setSelectRows","selectRows","key","prevIndex","_row$querySelector","newPrevIndex","focus","tagName","divInput","_row$querySelector2","flexDirection","minHeight","tabIndex","col","fontWeight","defaultValue","headerName","readOnly","onChange","onMouseDown","onMouseEnter","onMouseLeave","rowIndex","event","shiftKey","rangeStart","Math","min","rangeEnd","max","newSelectedRows","selectedItemsParams","_getIndexAndData","selectedRowData","removeNullValue","data","newSelectedRowsFiltered","getIndexAndData","ctrlKey","metaKey","handleRowClick","onDoubleClick","clearTimeout","timeoutId","setTimeout","current","handleRowDoubleClick","handleRowKeyDown","colIndex","field","type","Pagination","count","useUpwardTableModal","_mutationFn","myAxios","user","link","responseDataKey","_ref$onModalClose","onModalClose","inputSearchRef","tableRef","parentRef","show","setShowModal","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variable","wrap","_context","prev","next","get","url","queryUrlName","search","headers","Authorization","accessToken","abrupt","sent","stop","apply","onSuccess","res","mutate","throttledSearch","useCallback","throttle","query","performSearch","closeModal","_parentRef$current","Modal","marginBottom","currentTarget","target","datagridview","console","log","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","openModal","_inputSearchRef$curre","initialState","Sub_Ref_No","Ref_No","PNo","IDNo","Date","Name","Remarks","PDC_Status","Deposit_Slip","DateDeposit","OR_No","pdcMode","checkMode","sub_account","Acronym","modalPdcCheckInititalState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","Check_Count","reducer","state","action","_defineProperty","pdcColumn","pdcSearchColumn","flex","pdcBanksColumn","queryKey","quertKeyPDCSearch","PostDateChecks","_queryFn","_mutationFn2","_onSuccess","_handleOnSave","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","open","Boolean","isDragging","setIsDragging","selectedFiles","setSelectedFiles","pdcDataRows","setPdcDataRows","openPdcInputModal","setOpenPdcInputModal","showModal","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","stateModalPdcCheck","dispatchModalPdcCheck","_useContext","useContext","AuthContext","dataGridFunctions","searchRef","fileInputRef","savePDCButtonRef","openIdsButtonRef","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","checkModalSaveButton","checkModalSaveButtonActionRef","addRefButton","queryClient","useQueryClient","table","_useQuery","useQuery","queryFn","refetchOnWindowFocus","response","RefNo","pdcID","newRefNumberLoading","refetchNewRefNumber","refetch","_callee2","variables","_context2","mode","post","success","invalidateQueries","setNewStateValue","Swal","message","showConfirmButton","timer","loadingAddNew","_useMutation2","_x2","_callee3","_context3","_x3","_callee5","_formatDataToDocument","_response$data$upload","uploadFiles","newObjContainerBasic","fileSelected","formatDataToDocument","_context6","_x4","_x5","_callee4","dataDocument","newObjContainer","_loop","_context5","basicItem","mainURL","blob","file","reader","_context4","uniqueFilename","fetch","File","fileName","fileType","FileReader","Promise","resolve","reject","onload","onerror","Error","name","readAsDataURL","delegateYield","alert","getSearchPDCCheck","upload","JSON","parse","process","all","item","mutateSelectedSearch","isLoadingSelectedSearch","_useUpwardTableModal","selectedRow","_selectedRow$0$Name","_selectedRow$0$remark","client_id","remarks","closeModalSearchPdcIDs","_addRefButton$current","click","ModalSearchPdcIDs","openModalSearchPdcIDs","isLoadingModalSearchPdcIDs","_useUpwardTableModal2","Bank","Bank_Code","closeModalSearchBanks","_checkBranchRef$curre","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useUpwardTableModal3","_searchRef$current","ref_no","closeUpwardPDCModal","UpwardPDCModal","openUpwardPDCModal","isLoadingModalSearchPDC","handleInputChange","_e$target","handleModalInputChange","_e$target2","handleDragLeave","handleDragEnter","handleDrop","_fileInputRef$current","fileList","dataTransfer","files","Array","from","newFiles","checkFile","isDisableField","window","innerWidth","innerHeight","padding","backgroundColor","Box","sx","theme","columnGap","breakpoints","down","LoadingButton","loading","TextField","size","code","InputProps","fontSize","Button","variant","startIcon","AddIcon","color","_x6","_callee6","filePromises","fileTransfer","fileToSave","stateSubmited","_context7","_loop2","_event$target","datakey","fileContent","then","_openIdsButtonRef$cur","checks","stringify","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","saveCondfirmationAlert","isConfirm","SaveIcon","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","_checkNoRef$current","getLastCheck_No","incrementCheckNo","flushSync","grey","Menu","onClose","MenuListProps","MenuItem","localStorage","removeItem","setItem","header","department","elementString","ReactDOMServer","textAlign","marginTop","margin","rowGap","gap","border","borderRadius","FormControl","fullWidth","InputLabel","OutlinedInput","fieldset","borderColor","_savePDCButtonRef$cur","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","_savePDCButtonRef$cur2","textField","InputLabelProps","_savePDCButtonRef$cur3","_openIdsButtonRef$cur2","PersonSearchIcon","_savePDCButtonRef$cur4","_savePDCButtonRef$cur5","DownloadIcon","_checkModalSaveButton","rowSelected","focusVisible","timeout","_table$current","dt","removeSelection","_table$current2","bgcolor","p","Typography","component","_checkModalSaveButton2","PolicyIcon","_checkModalSaveButton3","multiline","_checkModalSaveButton4","_checkModalSaveButton5","placeholder","onBlur","parseFloat","replace","toFixed","_checkModalSaveButton6","inputComponent","NumericFormatCustom","_checkModalSaveButton7","inputProps","pattern","autoFocus","_table$current3","modalCheckAddUpdate","_checkNoRef$current2","_checkNoRef$current3","parseInt","isNaN","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre2","toString","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","month","day","year","checkContainer","currentDate","setMonth","getMonth","incrementStringNumbers","_checkNoRef$current4","str","increment","num","padStart","items","_dataGridFunctions$cu","_table$current4","_table$current5","_table$current6","bottom","overflow","boxShadow","onDragEnter","onDragOver","onDragLeave","onDrop","flexWrap","DisplayFile","fileInput","DriveFolderUploadIcon","multiple","inputFile","getElementById","obj","Object","entries","forEach","_ref4","incrementedNumber"],"sourceRoot":""}