{"version":3,"file":"static/js/2500.5528cf31.chunk.js","mappings":"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","sources":["feautures/Admin/Task/Accounting/CashDisbursement.tsx","../node_modules/@mui/icons-material/NotInterested.js","../node_modules/@mui/material/colors/deepOrange.js"],"sourcesContent":["import { useReducer, useContext, useState, useRef, useEffect, useCallback } from \"react\";\nimport {\n  TextField,\n  Button,\n  Pagination,\n} from \"@mui/material\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Swal from \"sweetalert2\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport {  useMutation, useQuery } from \"react-query\";\nimport useQueryModalTable from \"../../../../hooks/useQueryModalTable\";\nimport { wait } from \"../../../../lib/wait\";\nimport NotInterestedIcon from \"@mui/icons-material/NotInterested\";\nimport { deepOrange, grey } from \"@mui/material/colors\";\nimport { SelectInput, TextAreaInput, TextFormatedInput, TextInput } from \"../../../../components/UpwardFields\";\nimport { format } from \"date-fns\";\nimport \"../../../../style/datagridview.css\"\nimport { setNewStateValue } from \"./PostDateChecks\";\nimport { codeCondfirmationAlert, saveCondfirmationAlert } from \"../../../../lib/confirmationAlert\";\nimport { flushSync } from \"react-dom\";\n\n\nconst initialState = {\n  sub_refNo: \"\",\n  refNo: \"\",\n  dateEntry: format(new Date(), \"yyyy-MM-dd\"),\n  explanation: \"\",\n  particulars: \"\",\n\n  totalDebit: \"\",\n  totalCredit: \"\",\n  totalBalance: \"\",\n\n  jobAutoExp: false,\n  jobTransactionDate: new Date(),\n  jobType: \"\",\n  search: \"\",\n  cashMode: \"\",\n};\n\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\n\n\nconst columns = [\n  {\n    key: \"code\", label: \"Code\", width: 150, type: 'text'\n  },\n  {\n    key: \"acctName\", label: \"Account Name\", width: 400, type: 'text'\n  },\n  {\n    key: \"subAcctName\",\n    label: \"Sub Account\",\n    width: 170,\n    type: 'text'\n\n  },\n  {\n    key: \"ClientName\", label: \"Name\", width: 400, type: 'text'\n\n  },\n  {\n    key: \"debit\", label: \"Debit\", width: 120, type: 'number'\n\n  },\n  {\n    key: \"credit\", label: \"Credit\", width: 120, type: 'number'\n  },\n  {\n    key: \"checkNo\", label: \"Check No\", width: 120, type: 'text'\n  },\n  {\n    key: \"checkDate\", label: \"Check Date\", width: 120, type: 'date'\n  },\n  {\n    key: \"TC_Code\", label: \"TC\", width: 120, type: 'text'\n  },\n  {\n    key: \"remarks\",\n    label: \"Remarks\",\n    width: 400,\n    type: 'text'\n  },\n  {\n    key: \"Payto\", label: \"Payto\", width: 400, type: 'text'\n  },\n  {\n    key: \"vatType\", label: \"Vat Type\", width: 100, type: 'select', options: [{key:'NON-VAT'},{key:'VAT'}]\n  },\n  {\n    key: \"invoice\", label: \"Invoice\", width: 200, type: 'text'\n  },\n  { key: \"TempID\", label: \"TempId\", hide: true },\n  { key: \"IDNo\", label: \"I.D.\", width: 300, hide: true },\n  {\n    key: \"BranchCode\",\n    headerName: \"BranchCode\",\n    width: 300,\n    hide: true,\n  },\n  {\n    key: \"addres\",\n    headerName: \"addres\",\n    hide: true,\n  },\n  {\n    key: \"subAcct\",\n    headerName: \"subAcct\",\n    hide: true,\n  }\n];\n\n\nexport default function  CashDisbursement() {\n  const mode = 'add'\n  const { myAxios, user } = useContext(AuthContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const refNoRef = useRef<HTMLInputElement>(null)\n  const dateRef = useRef<HTMLInputElement>(null)\n  const expRef = useRef<HTMLInputElement>(null)\n  const particularRef = useRef<HTMLTextAreaElement>(null)\n  const IdsSearchInput = useRef<HTMLInputElement>(null)\n  const chartAccountSearchInput = useRef<HTMLInputElement>(null)\n\n  const [showDialog ,setShowDialog] = useState(false)\n  const [cashDMode ,setCashDMode] = useState('')\n  const [data, setData] = useState<any>([]);\n  const [rowEdited,setRowEdited] = useState<any>(null)\n  const [isEdited,setIsEdited] = useState(null)\n\n\n  const {\n  isLoading: loadingGeneralJournalGenerator,\n  refetch: refetchGeneralJournalGenerator,\n  } = useQuery({\n    queryKey: \"general-journal-id-generator\",\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/cash-disbursement/generate-id`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (data) => {\n      const response = data as any;\n      dispatch({\n        type: \"UPDATE_FIELD\", field: \"refNo\", value:response.data.generatedId[0].id\n      })\n      dispatch({\n        type: \"UPDATE_FIELD\", field: \"sub_refNo\", value:response.data.generatedId[0].id\n      })\n    },\n  });\n\n  const {\n    ModalComponent: ModalChartAccountSearch,\n    openModal: openChartAccountSearch,\n    isLoading: isLoadingChartAccountSearch,\n    closeModal: closeChartAccountSearch,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/general-journal/get-chart-account\",\n      queryUrlName: \"chartAccountSearch\",\n    },\n    columns: [\n      { field: \"Acct_Code\", headerName: \"Account Code\", width: 130 },\n      { field: \"Acct_Title\", headerName: \"Account Title.\", width: 250 },\n      {\n        field: \"Short\",\n        headerName: \"Short\",\n        flex: 1,\n      },\n    ],\n    queryKey: \"get-chart-account\",\n    uniqueId: \"Acct_Code\",\n    responseDataKey: \"getChartOfAccount\",\n    onSelected: (selectedRowData, data) => {\n        const RowIndex = Object.keys(rowEdited)[0]\n        setData((d:any)=> {\n          d = d.map((itm:any)=>{\n            if(Object.keys(itm).includes(RowIndex)){\n              itm = {[RowIndex]:{\n                ...itm[RowIndex],\n                code: selectedRowData[0].Acct_Code,\n                acctName: selectedRowData[0].Acct_Title,\n              }}\n            }\n            return itm\n          })\n          return d\n        })\n        setRowEdited((d:any)=>({\n          [RowIndex]:{\n            ...d[RowIndex],\n            code: selectedRowData[0].Acct_Code,\n            acctName: selectedRowData[0].Acct_Title,\n          }\n        }))\n        wait(250).then(()=>{\n            const input = document.querySelector(`.row-${RowIndex}.col-3`) as HTMLInputElement\n            input?.focus()\n        })\n      closeChartAccountSearch();\n    },\n    searchRef: chartAccountSearchInput,\n  });\n  \n  const {\n    ModalComponent: ModalPolicyIdClientIdRefId,\n    openModal: openPolicyIdClientIdRefId,\n    isLoading: isLoadingPolicyIdClientIdRefId,\n    closeModal: closePolicyIdClientIdRefId,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        hide: true,\n      },\n    ],\n    queryKey: \"get-policyId-ClientId-RefId\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData) => {\n      const RowIndex = Object.keys(rowEdited)[0]\n      setData((d:any)=> {\n        d = d.map((itm:any)=>{\n          if(Object.keys(itm).includes(RowIndex)){\n            itm = {[RowIndex]:{\n              ...itm[RowIndex],\n              ClientName: selectedRowData[0].Name,\n              IDNo: selectedRowData[0].IDNo,\n              subAcct: selectedRowData[0].sub_account,\n              subAcctName: selectedRowData[0].ShortName,\n              address: selectedRowData[0].address,\n            }}\n          }\n          return itm\n        })\n        return d\n      })\n      setRowEdited((d:any)=>({\n        [RowIndex]:{\n          ...d[RowIndex],\n          ClientName: selectedRowData[0].Name,\n          IDNo: selectedRowData[0].IDNo,\n          subAcct: selectedRowData[0].sub_account,\n          subAcctName: selectedRowData[0].ShortName,\n          address: selectedRowData[0].address,\n        }\n      }))\n      wait(250).then(()=>{\n          const input = document.querySelector(`.row-${RowIndex}.col-4`) as HTMLInputElement\n          input?.focus()\n      })\n      \n      closePolicyIdClientIdRefId();\n    },\n    searchRef: IdsSearchInput,\n  });\n\n    const {\n    ModalComponent: ModalTransactionAccount,\n    openModal: openTransactionAccount,\n    isLoading: isLoadingTransactionAccount,\n    closeModal: closeTransactionAccount,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/general-journal/get-transaction-account\",\n      queryUrlName: \"transactionCodeSearch\",\n    },\n    columns: [\n      { field: \"Code\", headerName: \"Code\", width: 130 },\n      {\n        field: \"Description\",\n        headerName: \"Description\",\n        flex: 1,\n      },\n    ],\n    queryKey: \"get-transaction-account\",\n    uniqueId: \"Code\",\n    responseDataKey: \"getTransactionAccount\",\n    onSelected: (selectedRowData) => {\n      const RowIndex = Object.keys(rowEdited)[0]\n      setData((d:any)=> {\n        d = d.map((itm:any)=>{\n          if(Object.keys(itm).includes(RowIndex)){\n            itm = {[RowIndex]:{\n              ...itm[RowIndex],\n              TC_Code: selectedRowData[0].Code,\n              TC_Desc: selectedRowData[0].Description,\n            }}\n          }\n          return itm\n        })\n        return d\n      })\n      setRowEdited((d:any)=>({\n        [RowIndex]:{\n          ...d[RowIndex],\n          TC_Code: selectedRowData[0].Code,\n          TC_Desc: selectedRowData[0].Description,\n        }\n      }))\n      wait(250).then(()=>{\n          const input = document.querySelector(`.row-${RowIndex}.col-9`) as HTMLInputElement\n          input?.focus()\n      })\n      closeTransactionAccount();\n    },\n    searchRef: IdsSearchInput,\n  });\n  \n    const {\n    ModalComponent: ModalPolicyIdPayTo,\n    openModal: openPolicyIdPayTo,\n    isLoading: isLoadingPolicyIdPayTo,\n    closeModal: closePolicyIdPayTo,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        hide: true,\n      },\n    ],\n    queryKey: \"get-policyId-ClientId-RefId\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData) => {\n      const RowIndex = Object.keys(rowEdited)[0]\n      setData((d:any)=> {\n        d = d.map((itm:any)=>{\n          if(Object.keys(itm).includes(RowIndex)){\n            itm = {[RowIndex]:{\n              ...itm[RowIndex],\n              Payto: selectedRowData[0].Name,\n            }}\n          }\n          return itm\n        })\n        return d\n      })\n      setRowEdited((d:any)=>({\n        [RowIndex]:{\n          ...d[RowIndex],\n          Payto: selectedRowData[0].Name,\n        }\n      }))\n      wait(250).then(()=>{\n          const input = document.querySelector(`.row-${RowIndex}.col-11`) as HTMLInputElement\n          input?.focus()\n      })\n      closePolicyIdPayTo();\n    },\n    searchRef: IdsSearchInput,\n  });\n  \n\n  const {\n    mutate: getSearchSelectedCashDisbursement,\n    isLoading: loadingGetSearchSelectedCashDisbursement,\n  } = useMutation({\n    mutationKey: \"get-selected-search-general-journal\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/cash-disbursement/get-selected-search-cash-disbursement\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      const selected = response.data.selectedCashDisbursement;\n      const { explanation, dateEntry, refNo, particulars } = selected[0];\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"sub_refNo\",\n        value: refNo,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"refNo\",\n        value: refNo,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"dateEntry\",\n        value: dateEntry,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"explanation\",\n        value: explanation,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"particulars\",\n        value: particulars,\n      });\n\n      const SearchData = selected.map((itm:any,idx:number)=>{\n        itm.credit = parseFloat(itm.credit.replace(/,/g,'')).toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n        itm.debit = parseFloat(itm.debit.replace(/,/g,'')).toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n\n        if(itm.code === '1.01.10'){\n          itm.checkDate =  format(new Date(itm.checkDate), \"yyyy-MM-dd\") \n\n        }else{\n          itm.checkDate = ''\n        }\n        return {[idx]:itm}\n      })\n     setData(SearchData);\n\n    },\n  });\n\n    const {\n    ModalComponent: ModalSearchCashDisbursement,\n    openModal: openSearchCashDisbursement,\n    isLoading: isLoadingSearchCashDisbursement,\n    closeModal: closeSearchCashDisbursement,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/cash-disbursement/search-cash-disbursement\",\n      queryUrlName: \"searchCashDisbursement\",\n    },\n    columns: [\n      { field: \"Date_Entry\", headerName: \"Date\", width: 130 },\n      { field: \"Source_No\", headerName: \"Ref No.\", width: 250 },\n      {\n        field: \"Explanation\",\n        headerName: \"Explanation\",\n        flex: 1,\n      },\n    ],\n    queryKey: \"search-cash-disbursement\",\n    uniqueId: \"Source_No\",\n    responseDataKey: \"search\",\n    onSelected: (selectedRowData, data) => {\n      getSearchSelectedCashDisbursement({\n        Source_No: selectedRowData[0].Source_No,\n      });\n      setCashDMode('update')\n      closeSearchCashDisbursement();\n    },\n    onCloseFunction: (value: any) => {\n    //   dispatch({ type: \"UPDATE_FIELD\", field: \"search\", value });\n    },\n    searchRef: chartAccountSearchInput,\n  });\n\n\n  const {\n        mutate: addCashDisbursementMutate,\n        isLoading: loadingCashDisbursementMutate,\n  } = useMutation({\n    mutationKey: \"add-cash-disbursement\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/cash-disbursement/add-cash-disbursement\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      if (response.data.success) {\n        setNewStateValue(dispatch, initialState);\n        refetchGeneralJournalGenerator();\n \n        const defaultValue = columns.reduce((a:any,b:any)=>{\n          a[b.key] = ''\n          return a\n        },{})\n        const NewRowIndex = \"0\"\n        setData([{ [NewRowIndex]: defaultValue }]);\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: response.data.message,\n          timer: 1500,\n        });\n      }\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: response.data.message,\n        timer: 1500,\n      });\n    },\n  });\n\n  const {\n    mutate: mutateVoidCashDisbursement,\n    isLoading: loadingVoidCashDisbursement,\n  } = useMutation({\n    mutationKey: \"void-cash-disbursement\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/cash-disbursement/void-cash-disbursement\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      if (response.data.success) {\n        setNewStateValue(dispatch, initialState);\n        refetchGeneralJournalGenerator();\n          const defaultValue = columns.reduce((a:any,b:any)=>{\n            a[b.key] = ''\n            return a\n          },{})\n          const NewRowIndex = \"0\"\n          setData([{ [NewRowIndex]: defaultValue }]);\n      \n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: response.data.message,\n          timer: 1500,\n        });\n      }\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: response.data.message,\n        timer: 1500,\n      });\n    },\n  });\n  const {\n    mutate: mutateOnPrint,\n    isLoading: isLoadingOnPrint,\n  } = useMutation({\n    mutationKey: \"get-selected-search-general-journal\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/cash-disbursement/print\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      console.log(response)\n      flushSync(() => {\n        localStorage.removeItem(\"printString\");\n        localStorage.setItem(\"dataString\", JSON.stringify(response.data.print.PrintTable));\n        localStorage.setItem(\"paper-width\", \"8.5in\");\n        localStorage.setItem(\"paper-height\", \"11in\");\n        localStorage.setItem(\"module\", \"cash-disbursement\");\n        localStorage.setItem(\"state\", JSON.stringify(response.data.print.PrintPayeeDetails));\n        localStorage.setItem(\n          \"column\",\n          JSON.stringify([\n            { datakey: \"Account\", header: \"ACCOUNT\", width: \"200px\" },\n            { datakey: \"Identity\", header: \"IDENTITY\", width: \"277px\" },\n            { datakey: \"Debit\", header: \"DEBIT\", width: \"100px\" },\n            { datakey: \"Credit\", header: \"CREDIT\", width: \"100px\" },\n          ])\n        );\n        localStorage.setItem(\n          \"title\",\n          user?.department === \"UMIS\"\n            ? \"UPWARD MANAGEMENT INSURANCE SERVICES\\n\"\n            : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n\"\n        );\n      });\n      window.open(\"/dashboard/print\", \"_blank\");\n\n\n\n    },\n  });\n  \n\n  function handleOnSave() {\n    if (state.refNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide reference number!\",\n        timer: 1500,\n      });\n    }\n    if (state.explanation === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide explanation!\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => {\n          expRef.current?.focus();\n        });\n      });\n    }\n    if (\n      (state.totalDebit === \"\" && state.totalCredit === \"\") ||\n      (state.totalDebit === \"0.00\" && state.totalCredit === \"0.00\")\n    ) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title:\n          \"Total Debit and Credit amount must not be zero(0), please double check the entries\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => { });\n      });\n    }\n    if (state.totalDebit !== state.totalCredit) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title:\n          \"Total Debit and Credit amount must be balance, please double check the entries\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => { });\n      });\n    }\n    const dataValues = data.map((itm:any)=>Object.values(itm)[0])\n    const cashDisbursement = dataValues.filter((itm:any)=>itm.code !== '')\n    if (cashDMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          addCashDisbursementMutate({\n            hasSelected:cashDMode === 'update',\n            refNo: state.refNo,\n            dateEntry: state.dateEntry,\n            explanation: state.explanation,\n            particulars: state.particulars,\n            cashDisbursement,\n            userCodeConfirmation,\n          });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          addCashDisbursementMutate({\n            hasSelected:cashDMode === 'update',\n            refNo: state.refNo,\n            dateEntry: state.dateEntry,\n            explanation: state.explanation,\n            particulars: state.particulars,\n            cashDisbursement,\n          });\n        },\n      });\n    }\n  }\n  function handleVoid() {\n    codeCondfirmationAlert({\n      isUpdate: false,\n      text: `Are you sure you want to void ${state.refNo}`,\n      cb: (userCodeConfirmation) => {\n        mutateVoidCashDisbursement({\n          refNo: state.refNo,\n          dateEntry: state.dateEntry,\n          userCodeConfirmation,\n        });\n      },\n    });\n  }\n  function AddRow(){\n    const defaultValue = columns.reduce((a:any,b:any)=>{\n      a[b.key] = ''\n      return a\n    },{})\n    const keys = Object.keys(data)\n    const NewRowIndex:any = String(isNaN(parseInt(keys[keys.length - 1]) + 1) ? 0 : parseInt(keys[keys.length - 1]) + 1)\n    const dd:any = [...data,{\n      [NewRowIndex]:defaultValue\n    }]\n    setData(dd)\n    wait(250).then(()=>{\n      setRowEdited(dd)\n      setIsEdited(NewRowIndex)\n      setTimeout(()=>{\n        const input = document.querySelector(`.row-${NewRowIndex}.col-0`) as HTMLInputElement\n        if(input){\n            input.focus()\n          }\n      },100)\n    })\n  }\n  function handleRowSave(RowIndex:any) {\n    if(rowEdited[RowIndex].code === ''){\n      alert('Account Code is required')\n      const input = document.querySelector(`.row-${RowIndex}.col-0`) as HTMLInputElement\n      if(input){\n        input.focus()\n      }\n      return false\n\n    }else if(rowEdited[RowIndex].ClientName === ''){\n      alert('Name is required')\n      const input = document.querySelector(`.row-${RowIndex}.col-3`) as HTMLInputElement\n      if(input){\n        input.focus()\n      }\n      return false\n\n    }else if(rowEdited[RowIndex].credit ===  rowEdited[RowIndex].debit){\n      alert('Credit and Debit cannot be the same. They must have a difference.')\n      const input = document.querySelector(`.row-${RowIndex}.col-4`) as HTMLInputElement\n      if(input){\n        input.focus()\n      }\n      return false\n\n    }else if(rowEdited[RowIndex].TC_Code === ''){\n      alert('TC is required')\n      const input = document.querySelector(`.row-${RowIndex}.col-8`) as HTMLInputElement\n      if(input){\n        input.focus()\n      }\n      return false\n    }\n\n    if(rowEdited[RowIndex].vatType === \"VAT\" &&  rowEdited[RowIndex].code !== \"1.06.02\"){\n      const credit = parseFloat(rowEdited[RowIndex].credit.replace(/,/g,''))\n      const debit = parseFloat(rowEdited[RowIndex].debit.replace(/,/g,''))\n      let taxableamt = 0\n      const newRowValue = columns.reduce((a:any,b:any)=>{\n        a[b.key] = ''\n        return a\n      },{})\n      \n      if(debit !== 0){\n        taxableamt =   debit / 1.12\n        setData((d:any)=> {\n          d = d.map((itm:any)=>{\n            if(Object.keys(itm).includes(RowIndex)){\n              itm = {[RowIndex]:{\n                ...itm[RowIndex],\n                debit: taxableamt.toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })\n              }}\n            }\n            return itm\n          })\n          return d\n        })\n        setRowEdited((d:any)=>({\n          [RowIndex]:{\n            ...d[RowIndex],\n            debit: taxableamt.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })\n          }\n        }))\n\n      }else{\n        taxableamt =  credit / 1.12\n        setData((d:any)=> {\n          d = d.map((itm:any)=>{\n            if(Object.keys(itm).includes(RowIndex)){\n              itm = {[RowIndex]:{\n                ...itm[RowIndex],\n                credit: taxableamt.toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                })\n              }}\n            }\n            return itm\n          })\n          return d\n        })\n        setRowEdited((d:any)=>({\n          [RowIndex]:{\n            ...d[RowIndex],\n            credit: taxableamt.toLocaleString(\"en-US\", {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })\n          }\n        }))\n      }\n      \n      let inputtax = taxableamt  * 0.12\n\n      newRowValue.code = \"1.06.02\"\n      newRowValue.acctName  = \"Input Tax\"\n      newRowValue.subAcctName  = rowEdited[RowIndex].subAcctName\n      newRowValue.ClientName = rowEdited[RowIndex].ClientName\n\n      if(parseFloat(newRowValue.debit.replace(/,/g,'')) !== 0){\n        newRowValue.debit = inputtax.toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n        newRowValue.credit = rowEdited[RowIndex].credit\n      }else{\n        newRowValue.credit =  inputtax.toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n        newRowValue.debit = rowEdited[RowIndex].debit\n      }\n\n      newRowValue.checkNo = rowEdited[RowIndex].checkNo\n      newRowValue.checkDate = rowEdited[RowIndex].checkDate \n      newRowValue.TC_Code = rowEdited[RowIndex].TC_Code\n      newRowValue.remarks = rowEdited[RowIndex].remarks\n      newRowValue.Payto = rowEdited[RowIndex].Payto\n      newRowValue.vatType = rowEdited[RowIndex].vatType\n      newRowValue.invoice = rowEdited[RowIndex].invoice\n      newRowValue.TempID = rowEdited[RowIndex].TempID\n      newRowValue.IDNo = rowEdited[RowIndex].IDNo\n      newRowValue.BranchCode = rowEdited[RowIndex].BranchCode\n      newRowValue.addres = rowEdited[RowIndex].addres\n      newRowValue.subAcct = rowEdited[RowIndex].subAcct\n\n      setData((d:any)=>{\n        return insertRowAtIndex(d,parseInt(RowIndex),newRowValue)\n      })\n\n    }\n\n    return true\n\n  }\n  function insertRowAtIndex(data:any, index:any, newRow:any) {\n    // Step 1: Insert the new row at the specified index\n    const updatedData = [\n      ...data.slice(0, index + 1),\n      { [index + 1]: newRow },\n      ...data.slice(index + 1)\n    ];\n  \n    // Step 2: Update keys of subsequent rows\n    return updatedData.map((item, i) => {\n      const value = Object.values(item)[0]; // Get the value\n  \n      // Adjust the key to reflect the new order\n      return { [i]: value };\n    });\n  }\n  function handleClickPrint() {\n    mutateOnPrint({ Source_No: state.refNo })\n  }\n\n    useEffect(() => {\n      if(data.length > 0){\n        const _data = data?.map((itm:any)=>{\n          return Object.values(itm)[0]\n        })\n  \n        const debit = _data.reduce((a: number, item: any) => {\n          let deb = 0\n          if(!isNaN(parseFloat(item.debit.replace(/,/g, \"\")))){\n            deb  =  parseFloat(item.debit.replace(/,/g, \"\"))\n          }\n          return a + deb;\n        }, 0);\n        const credit = _data.reduce((a: number, item: any) => {\n          let cred = 0\n          if(!isNaN(parseFloat(item.credit.replace(/,/g, \"\")))){\n            cred  =  parseFloat(item.credit.replace(/,/g, \"\"))\n          }\n          return a + cred;\n        }, 0);\n  \n        \n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalDebit\",\n          value: debit.toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalCredit\",\n          value: credit.toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalBalance\",\n          value: (debit - credit).toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })\n        });\n      }else{\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalDebit\",\n          value:'0.00'\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalCredit\",\n          value: '0.00'\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"totalBalance\",\n          value: '0.00'\n        });\n      }\n     \n  }, [data]);\n\n  const isDisableField = cashDMode === \"\";\n\n  if( loadingGetSearchSelectedCashDisbursement || loadingGeneralJournalGenerator || isLoadingPolicyIdClientIdRefId || isLoadingChartAccountSearch || isLoadingPolicyIdPayTo || isLoadingTransactionAccount){\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n    {\n      showDialog && \n      <MyDialog \n        title=\"Add New Row?\"\n        onConfirmed={()=>{\n          AddRow()\n          setShowDialog(false)\n        }} \n        onDeclined={()=>{\n          setShowDialog(false)\n        }} \n        onClose={()=>{\n          setShowDialog(false)\n        }} \n      />\n    }\n     \n     <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"5px\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n          }}\n        >\n          {isLoadingSearchCashDisbursement ? (\n            <LoadingButton loading={isLoadingSearchCashDisbursement} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  return openSearchCashDisbursement(\n                    (e.target as HTMLInputElement).value\n                  );\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n\n              }}\n              sx={{\n                width: \"300px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n\n          {cashDMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              onClick={() => {\n                setCashDMode(\"add\")\n              }}\n              color=\"primary\"\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            loading={loadingCashDisbursementMutate}\n            disabled={cashDMode === \"\"}\n            onClick={handleOnSave}\n            color=\"success\"\n            variant=\"contained\"\n          >\n            Save\n          </LoadingButton>\n          {cashDMode !== \"\" && (\n            <LoadingButton\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              color=\"error\"\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    setCashDMode(\"\")\n                    setNewStateValue(dispatch, initialState);\n                    refetchGeneralJournalGenerator();\n                      const defaultValue = columns.reduce((a:any,b:any)=>{\n                        a[b.key] = ''\n                        return a\n                      },{})\n                      const NewRowIndex = \"0\"\n                      setData([{ [NewRowIndex]: defaultValue }]);\n                  }\n                });\n              }}\n              disabled={cashDMode === \"\"}\n            >\n              Cancel\n            </LoadingButton>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n              background: deepOrange[500],\n              \":hover\": {\n                background: deepOrange[600],\n              },\n            }}\n            onClick={handleVoid}\n            loading={loadingVoidCashDisbursement}\n            disabled={cashDMode !== \"update\"}\n            variant=\"contained\"\n            startIcon={<NotInterestedIcon sx={{ width: 20, height: 20 }} />}\n          >\n            Void\n          </LoadingButton>\n          <LoadingButton\n            loading={isLoadingOnPrint}\n            disabled={cashDMode !== \"update\"}\n            id=\"basic-button\"\n            aria-haspopup=\"true\"\n            onClick={handleClickPrint}\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n              color: \"white\",\n              backgroundColor: grey[600],\n              \"&:hover\": {\n                backgroundColor: grey[700],\n              },\n            }}\n          >\n            Print\n          </LoadingButton>\n        </div>\n      </div>\n      <div style={{ display: \"flex\", marginBottom: \"10px\" }}>\n         <fieldset\n          style={{\n            border: \"1px solid #cbd5e1\",\n            borderRadius: \"5px\",\n            position: \"relative\",\n            flex: 1,\n            height: \"auto\",\n            display: \"flex\",\n            marginTop: \"10px\",\n            gap: \"10px\",\n            padding: \"15px\",\n            flexDirection: \"column\"\n          }}\n        >\n          {loadingGeneralJournalGenerator ? (\n            <LoadingButton loading={loadingGeneralJournalGenerator} />\n          ) : (\n            <TextInput\n              label={{\n                title: \"Reference CV- : \",\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n                  width: \"100px\",\n                },\n              }}\n              input={{\n                disabled: isDisableField,\n                type: \"text\",\n                style: { width: \"190px\" },\n                readOnly: true,\n                value:state.refNo,\n                name:\"refNo\",\n                onKeyDown: (e) => {\n                  if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n                    dateRef.current?.focus()\n                  }\n                }\n              }}\n              inputRef={refNoRef}\n            />\n          )}\n          <TextInput\n            label={{\n              title: \"Date : \",\n              style: {\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n                width: \"100px\",\n              },\n            }}\n            input={{\n              disabled: isDisableField,\n              type: \"date\",\n              name:\"dateEntry\",\n              value:state.dateEntry,\n              style: { width: \"190px\" },\n              onKeyDown: (e) => {\n                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n                  expRef.current?.focus()\n                }\n              },\n              onChange:(e)=>{\n                dispatch({\n                  type: \"UPDATE_FIELD\", field: \"dateEntry\", value:e.target.value\n                })\n              },\n            }}\n            inputRef={dateRef}\n          />\n          <TextInput\n            label={{\n              title: \"Explanation : \",\n              style: {\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n                width: \"100px\",\n              },\n            }}\n            input={{\n              disabled: isDisableField,\n              type: \"text\",\n              style: { flex: 1 },\n              name:\"explanation\",\n              value:state.explanation,\n              onChange:(e)=>{\n                dispatch({\n                  type: \"UPDATE_FIELD\", field: \"explanation\", value:e.target.value\n                })\n              },\n              onKeyDown: (e) => {\n                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n                  particularRef.current?.focus()\n                }\n              }\n            }}\n            inputRef={expRef}\n          />\n          <TextAreaInput\n            label={{\n              title: \"Particulars : \",\n              style: {\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n                width: \"100px\",\n              },\n            }}\n            textarea={{\n              rows: 4,\n              disabled: isDisableField,\n              style: { flex: 1 },\n              name:\"particulars\",\n              value:state.particulars,\n              onKeyDown: (e) => {\n                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n                  //  refDate.current?.focus()\n                }\n              },\n              onChange:(e)=>{\n                dispatch({\n                  type: \"UPDATE_FIELD\", field: \"particulars\", value:e.target.value\n                })\n              },\n            }}\n            _inputRef={particularRef}\n          />\n        </fieldset>\n        <fieldset\n          style={{\n            border: \"1px solid #cbd5e1\",\n            borderRadius: \"5px\",\n            position: \"relative\",\n            width: \"400px\",\n            height: \"auto\",\n            display: \"flex\",\n            marginTop: \"10px\",\n            gap: \"10px\",\n            padding: \"15px\",\n          }}\n        >\n          <div style={{ alignItems: \"center\", display: \"flex\", textAlign: \"center\", width: \"100px\" }}>\n            <p style={{ margin: 0, padding: 0, color: \"black\", display: \"flex\", flexDirection: \"column\" }}>\n              <span style={{ fontSize: \"12px\" }}>Total Rows:</span> <strong>{data.length}</strong>\n            </p>\n          </div>\n          <div style={{ display: \"flex\", justifyContent: \"space-around\", flexDirection: \"column\", flex: 1 }}>\n            <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n              <span style={{ fontSize: \"12px\" }}>Total Debit:</span> <strong>{state.totalDebit}</strong>\n            </p>\n            <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n              <span style={{ fontSize: \"12px\" }}>Total Credit:</span> <strong>{state.totalCredit}</strong>\n            </p>\n            <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n              <span style={{ fontSize: \"12px\" }}>Balance:</span>{\" \"}\n              <strong\n                style={{\n                  color:\n                    parseFloat(state.totalBalance.replace(/,/g, \"\")) > 0\n                      ? \"red\"\n                      : \"black\",\n                }}\n              >\n                {state.totalBalance}\n              </strong>\n            </p>\n          </div>\n        </fieldset>\n      </div>\n        <Table\n            isEdited={isEdited}\n            setIsEdited={setIsEdited}\n            rowEdited={rowEdited}\n            setRowEdited={setRowEdited}\n            mode={mode}\n            data={data}\n            setData={setData}\n            setShowDialog={setShowDialog}\n            columns={columns}\n            openTransactionAccount={openTransactionAccount}\n            openPolicyIdPayTo={openPolicyIdPayTo}\n            openPolicyIdClientIdRefId={openPolicyIdClientIdRefId}\n            openChartAccountSearch={openChartAccountSearch}\n            handleRowSave={handleRowSave}\n        /> \n  \n      {ModalPolicyIdClientIdRefId}\n      {ModalChartAccountSearch}\n      {ModalPolicyIdPayTo}\n      {ModalTransactionAccount}\n      {ModalSearchCashDisbursement}\n    </div>\n  );\n};\n\nconst Table = ({\n  isEdited,\n  setIsEdited,\n  rowEdited,\n  setRowEdited,\n  mode,\n  data,\n  setData,\n  setShowDialog,\n  columns:__columns,\n  openTransactionAccount,\n  openPolicyIdPayTo,\n  openPolicyIdClientIdRefId,\n  openChartAccountSearch,\n  handleRowSave,\n}:any)=>{\n  const inputsearchselector = \".search-input-up-on-key-down\"\n  const [rigthClickSelected, setRigthClickSelected] = useState<any>(null)\n  const [modalVisible, setModalVisible] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const [pages, setPages] = useState<Array<any>>([])\n  const [pageNumber, setPageNumber] = useState(0)\n  const [hoveredColumn, setHoveredColumn] = useState(null);\n  const [selectedRows, setSelectedRows] = useState<Array<number>>([0]);\n  const divRef = useRef<HTMLDivElement>(null);\n  const [columns, setColumns] = useState(__columns.filter((itm:any) => !itm.hide));\n\n  const _columns = useRef(columns)\n  const keys = Object.keys(data)\n  \n  const handleInputchange = (RowIndex:any,col:any,e:any) =>{\n    setRowEdited((d:any)=>({\n      [RowIndex]:{\n        ...d[RowIndex],\n        [col.key]:e.target.value\n      }\n    }))\n  }\n  const onBlur = (row:any)=>{\n    setRowEdited(row)\n  }\n\n  async function GoToNextRow(RowIndex:any){\n    const newRowIndex:any = parseInt(RowIndex)  +1\n    const nextRow:any  = Object.entries(data).filter((dd:any)=>{\n      return dd[0] === newRowIndex.toString()\n    })\n \n      if(nextRow.length > 0){\n            setRowEdited(nextRow[0][1])\n            setIsEdited(newRowIndex.toString())\n\n            setTimeout(()=>{\n            const input = document.querySelector(`.row-${newRowIndex}.col-0`) as HTMLInputElement\n            if(input){\n                input.focus()\n              }\n          },100)\n      }\n  }\n\n  async function SaveRow(RowIndex:any,LastRowIndex:any ){\n    if(handleRowSave(RowIndex)){\n      if(mode === 'add' && RowIndex === LastRowIndex){\n        setShowDialog(true)\n      }else{\n        await GoToNextRow(RowIndex)\n      }\n    }\n  \n  }\n\n  const addNewRow = useCallback(() => {\n    const defaultValue = _columns.current.reduce((a:any,b:any)=>{\n      a[b.key] = ''\n      return a\n    },{})\n\n    setData((prevData:any) => {\n      const keys = Object.keys(prevData);\n      const NewRowIndex = String(\n        isNaN(parseInt(keys[keys.length - 1]) + 1)\n          ? 0\n          : parseInt(keys[keys.length - 1]) + 1\n      );\n  \n      return [...prevData, { [NewRowIndex]: defaultValue }];\n    });\n  }, [setData]);\n\n  const onColumnEnter = async (row:any,col:any,RowIndex:any,colIdx:any,e:any)=>{\n    if(e.code === 'Enter' || e.code === 'NumpadEnter'){\n      e.preventDefault()\n            if(col.key === 'debit' || col.key === 'credit'){\n              if(isNaN(parseInt(e.target.value.replace(/,/g,'')))){\n                e.target.value = \"0.00\"\n              }\n            }\n            setData((d:any)=> {\n                d = d.map((itm:any)=>{\n                  if(Object.keys(itm).includes(RowIndex)){\n                    itm = {[RowIndex]:{\n                      ...itm[RowIndex],\n                      [col.key]:e.target.value\n                    }}\n                  }\n                  return itm\n                })\n                return d\n              })\n            if(col.key === 'code'){\n              openChartAccountSearch(e.target.value)\n            }\n            else if(col.key === 'ClientName'){\n              openPolicyIdClientIdRefId(e.target.value)\n            }else if(col.key === 'Payto'){\n              if(rowEdited[RowIndex].code === '1.01.10'){\n                openPolicyIdPayTo(e.target.value)\n              }\n            }else if(col.key === 'TC_Code'){\n              openTransactionAccount(e.target.value)\n            }else if(rowEdited[RowIndex].code !== '1.01.10' && col.key === 'credit'){\n              const input = document.querySelector(`.row-${RowIndex}.col-${colIdx + 3}`) as HTMLInputElement\n              if(input){\n                setTimeout(()=>{\n                  input.focus()    \n                },100)\n              }\n            }else if(rowEdited[RowIndex].code !== '1.01.10' && col.key === 'remarks'){\n              const input = document.querySelector(`.row-${RowIndex}.col-${colIdx + 2}`) as HTMLInputElement\n              if(input){\n                setTimeout(()=>{\n                  input.focus()    \n                },100)\n              }\n            }else{\n               const input = document.querySelector(`.row-${RowIndex}.col-${colIdx + 1}`) as HTMLInputElement\n                if(input){\n                  setTimeout(()=>{\n                    input.focus()    \n                  },100)\n\n                }else{ \n                  const keys = Object.keys(data)\n                  const LastRowIndex = keys[keys.length -1]\n                  await SaveRow(RowIndex ,LastRowIndex)\n                }\n            }\n           \n      return\n    }\n  }\n  const doubleClick = (RowIndex:any,row:any,col:any,e:any)=>{\n    console.log(row)\n    setRowEdited(row)\n    setIsEdited(RowIndex)\n  }\n\n  useEffect(()=>{\n    if(mode === 'add'){\n      addNewRow()\n    }\n  },[mode, addNewRow])\n\n  useEffect(() => {\n    console.log(data)\n    const _pages = formatArrayIntoChunks(data, 100)\n    setPages(_pages)\n  }, [data])\n\n  const startResize = (index: any, e: any) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const startX = e.clientX;\n    const startWidth = columns[index].width;\n\n    const doDrag = (moveEvent: any) => {\n      const newWidth = startWidth + (moveEvent.clientX - startX);\n      const updatedColumns = [...columns];\n      updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\n      setColumns(updatedColumns);\n    };\n\n    const stopDrag = () => {\n      document.removeEventListener(\"mousemove\", doDrag);\n      document.removeEventListener(\"mouseup\", stopDrag);\n    };\n\n    document.addEventListener(\"mousemove\", doDrag);\n    document.addEventListener(\"mouseup\", stopDrag);\n  };\n  const handleMouseEnter = (index: any) => {\n    setHoveredColumn(index); // Set the hovered column index\n  };\n  const handleMouseLeave = () => {\n    setHoveredColumn(null); // Reset hovered column index\n  };\n\n  const handleKeyDown = (e: any) => {\n\n    if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      setSelectedRows((prevIndex: any) => {\n        if (prevIndex[prevIndex.length - 1] === null) return [0];\n        if (prevIndex[prevIndex.length - 1] >= data.length - 1) {\n          return [data.length - 1];\n        }\n        const newPrevIndex = prevIndex[prevIndex.length - 1] + 1;\n        const row = document.querySelector(`.row-${newPrevIndex}`);\n        row?.querySelector(\"input\")?.focus();\n\n        row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n        return [newPrevIndex];\n      });\n    } else if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n\n      if (selectedRows[selectedRows.length - 1] === 0) {\n        const input = document.querySelector(\n          inputsearchselector\n        ) as HTMLInputElement;\n        if (input && input.tagName === \"INPUT\") {\n          input?.focus();\n        } else if (input && input.tagName === \"DIV\") {\n          const divInput = document.querySelector(\n            `${inputsearchselector} input`\n          ) as HTMLInputElement;\n\n          divInput?.focus();\n        }\n      }\n\n      setSelectedRows((prevIndex: any) => {\n        if (prevIndex[prevIndex.length - 1] === 0) return [0];\n        const newPrevIndex = prevIndex[prevIndex.length - 1] - 1;\n        const row = document.querySelector(`.row-${newPrevIndex}`);\n\n        row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n        row?.querySelector(\"input\")?.focus();\n        return [newPrevIndex];\n      });\n    }\n\n  };  \n\n  function handleClickPrintCheck() {\n    if (rigthClickSelected) {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"paper-width\", \"8.27in\");\n      localStorage.setItem(\"paper-height\", \"11.69in\");\n      localStorage.setItem(\"module\", \"cash-disbursement-check\");\n      localStorage.setItem(\"state\", JSON.stringify(rigthClickSelected));\n      localStorage.setItem(\"dataString\", JSON.stringify([]));\n      localStorage.setItem(\"column\", JSON.stringify([]));\n      localStorage.setItem(\"title\", \"\");\n    }\n    setRigthClickSelected(null)\n    window.open(\"/dashboard/print\", \"_blank\");\n  }\n\n  const handleRightClick = (event: any, RowIndex: any ,row:any) => {\n    event.stopPropagation()\n    event.preventDefault();\n    setRigthClickSelected(row[RowIndex])\n    setPosition({ x: event.pageX, y: event.pageY });\n    setModalVisible(true);\n  };\n \n  const width = window.innerWidth - 40\n  const height = window.innerHeight -250\n\n\n  return (\n    <div\n    onClick={()=>{\n      if(rigthClickSelected){\n        setRigthClickSelected(null)\n        setModalVisible(false);\n      }\n    }}\n    style={{\n      display: \"flex\",\n      justifyContent: \"center\",\n    }}\n    onKeyDown={(e)=>{\n      e.stopPropagation()\n      handleKeyDown(e)\n    }}\n  >\n    <div style={{position:\"relative\"}}>\n      <div className=\"table-frame-color\" style={{position:\"relative\"}}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: `${width - 10}px        `,\n            height: `${height - 135}px`,\n            minHeight: \"270px\"\n          }}\n          className=\"table-frame\"\n        >\n          <div className=\"table-panel\">\n            <div ref={divRef} className={`grid-container `} tabIndex={-1}>\n              <div\n                className=\"grid-row grid-header\"\n                style={{\n                  position: \"sticky\",\n                  zIndex: \"10\",\n                  top: \"-1px\",\n                  background: \"white\",\n                }}\n              >\n                {columns.map((col: any, index: number) => (\n                  <div\n                    key={index}\n                    className={`grid-cell header-cell ${hoveredColumn === index ? `highlight-column` : \"\"\n                      }`} // Add the class if hovered\n                    style={{ width: col.width, height: \"20px\", }}\n                  >\n                    <input\n                      style={{ fontWeight: \"bold\" }}\n                      defaultValue={col.label}\n                      readOnly\n                      onChange={(e) => { }}\n                    />\n                    <div\n                      className=\"resize-handle\"\n                      onMouseDown={(e) => startResize(index, e)}\n                      onMouseEnter={(e) => {\n                        e.preventDefault();\n                        handleMouseEnter(index);\n                      }} // On hover\n                      onMouseLeave={(e) => {\n                        e.preventDefault();\n                        handleMouseLeave();\n                      }} // On mouse leave\n                    />\n                  </div>\n                ))}\n              </div>\n              {pages[pageNumber]?.map((row: any, rowIndex: any) => {\n                const RowIndex = keys[rowIndex]\n                return (\n                  <div\n                  className={`grid-row row-${rowIndex}`} // Highlight selected row\n                  key={rowIndex}\n                  style={{\n                    position:\"relative\"\n                  }}\n                >\n                  \n\n                  {columns.map((col: any, colIndex: number) =>{\n                        if(isEdited  === RowIndex) {\n                          if(col.type === 'number'){\n                            return (\n                              <div  \n                              className=\"grid-cell\"\n                              key={colIndex} \n                              id={`${col.key}_RowIndex`}\n                              style={{\n                                width:col.width,\n                                padding:'2px'\n                              }}>\n                                <TextFormatedInput\n                                  onChange={(e)=>{\n                                      handleInputchange(RowIndex,col,e)\n                                  }}\n                                  label={{\n                                    title: \"\",\n                                    style: {\n                                      width: \"0px\",\n                                    },\n                                  }}\n                                  input={{\n                                    className:`row-${RowIndex} col-${colIndex}`,\n                                    type: \"text\",\n                                    style: { width: col.width ,height:\"18px\" },\n                                    value:rowEdited[RowIndex][col.key] , \n                                    onKeyDown:(e)=>{\n                                      if(e.code === \"NumpadEnter\" || e.code === 'Enter'){\n                                        onColumnEnter(row,col,RowIndex,colIndex,e)\n                                      }\n                                    },\n                                    \n                                    onBlur:(e)=>{\n                                      onBlur(row)\n                                    }\n                                  }}\n                                />\n                              </div>\n                            )\n                          }else if(col.type === 'select'){\n                            return (\n                              <div  \n                              className=\"grid-cell\"\n                              key={colIndex} \n                              id={`${col.key}_RowIndex`}\n                              style={{\n                                width:col.width,\n                                padding:'2px'\n                              }}>\n                                <SelectInput\n                                  label={{\n                                    title: \"\",\n                                    style: {\n                                      width: \"0px\",\n                                    },\n                                  }}\n                                  select={{\n                                    value:rowEdited[RowIndex][col.key] || \"\",\n                                    className:`row-${RowIndex} col-${colIndex}`,\n                                    style: { width:col.width, height: \"18px\" },\n                                    onKeyDown:(e)=>{\n                                      e.stopPropagation()\n                                      onColumnEnter(row,col,RowIndex,colIndex,e)\n                                    },\n                                    onBlur:(e)=>{\n                                      onBlur(row)\n                                    },\n                                    onChange:(e)=>{\n                                      handleInputchange(RowIndex,col,e)\n                                    }\n                                  }}\n                                  datasource={col.options}\n                                  values={\"key\"}\n                                  display={\"key\"}\n                                  \n                                />\n                              </div>\n                            )\n                          }else{\n                            return (\n                              <div  \n                               className=\"grid-cell\"\n                              key={colIndex} \n                              id={`${col.key}_RowIndex`}\n                              style={{\n                                width:col.width,\n                                padding:'2px'                              \n                              }}>\n                                 <TextInput\n                                    label={{\n                                      title: \"\",\n                                      style: {\n                                        width: \"0px\",\n                                      },\n                                    }}\n                                    input={{\n                                      readOnly:\n                                        col.key === 'acctName' ||\n                                        col.key === 'subAcctName' ||\n                                        (col.key === 'checkNo' && rowEdited[RowIndex].code !== '1.01.10') ||\n                                        (col.key === 'checkDate' && rowEdited[RowIndex].code !== '1.01.10') ||\n                                        (col.key === 'Payto' && rowEdited[RowIndex].code !== '1.01.10') ,\n                                      className:`row-${RowIndex} col-${colIndex}`,\n                                      type:col.key === 'checkDate' && rowEdited[RowIndex].code === '1.01.10' ? \"date\" :\"text\",\n                                      style: { width: col.width , height:\"18px\" },\n                                      onKeyDown: (e) => {\n                                        onColumnEnter(row,col,RowIndex,colIndex,e)\n                                      },\n                                      onChange:(e)=>{\n                                        handleInputchange(RowIndex,col,e)\n                                      },\n                                      onBlur:(e)=>{\n                                        onBlur(row)\n                                      },\n                                      value:rowEdited[RowIndex][col.key] || \"\"\n                                    }}\n                                  />\n                              </div>\n                            )\n                          }\n                        }else{\n                          let  dd = ''\n                          if(row[RowIndex]){\n                            if(col.key === 'checkDate' && row[RowIndex][col.key] !== '' ){\n                              dd = format(new Date(row[RowIndex][col.key]), \"MM/dd/yyyy\")\n                            }else{\n                              dd = row[RowIndex][col.key]\n                            }\n                          }\n                          \n                          return (\n                            <div  \n                            className=\"grid-cell\"\n                            key={colIndex} \n                            id={`${col.key}_RowIndex`}\n                            style={{\n                              width:col.width,\n                              padding:\"2px\"\n                            }}>\n                              <TextInput\n                                     \n\n                                label={{\n                                  title: \"\",\n                                  style: {\n                                    width: \"0px\",\n                                  },\n                                }}\n                                input={{\n                                  readOnly:true,\n                                  onDoubleClick:(e)=>{\n                                    doubleClick(RowIndex,row,col,e)\n                                  },\n                                  onContextMenu:(e) => handleRightClick(e, RowIndex ,row),\n                                  defaultValue:dd,\n                                  style: { width: col.width ,height:\"18px\"},\n                                }}\n                              />\n                                \n                            </div>\n                          \n                    \n                        )\n                        }\n                  })}\n                </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"table-panel-footer\" >\n        <div>Records : {data.length}</div>\n        <div><Pagination count={pages.length} onChange={(e, value) => {\n          setPageNumber(value - 1)\n        }} />\n        </div>\n      </div>\n    </div>\n  {modalVisible && (\n        <div\n          style={{\n            position: 'absolute',\n            top: position.y -20,\n            left: position.x - 20,\n            backgroundColor: 'white',\n            padding: '10px',\n            border: '1px solid black',\n            borderRadius: '4px',\n            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n            zIndex: 1000,\n            display: \"flex\",\n            flexDirection: \"column\",\n            rowGap: \"5px\"\n          }}\n        >\n          <Button\n            sx={{\n              height: \"22px\",\n              fontSize: \"11px\",\n            }}\n            variant=\"contained\"\n            onClick={() => {\n              if (rigthClickSelected) {\n                Swal.fire({\n                  title: `Are you sure you want to delete?`,\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, delete it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    // setCashDisbursement((d: any) => {\n                    //   return d.filter(\n                    //     (items: any) => items.TempID !== rigthClickSelected.TempID\n                    //   );\n                    // });\n                    setRigthClickSelected(null)\n                  }\n                });\n              }\n            }} \n            >\n              Delete Row\n          </Button>\n          {(rigthClickSelected && rigthClickSelected.code === '1.01.10') &&\n            <Button variant=\"contained\"\n              sx={{\n                height: \"22px\",\n                fontSize: \"11px\",\n              }}\n              onClick={handleClickPrintCheck}\n            >\n              Print\n          </Button>}\n        </div>\n      )}\n  </div>\n  )\n}\nconst MyDialog = ({onConfirmed,onDeclined,onClose ,title}:any)=>{\n  const confirmButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLButtonElement>(null)\n  useEffect(()=>{\n    wait(200).then(()=>{\n      confirmButtonRef.current?.focus()\n    })\n  },[])\n\n  return (\n    <>\n      <div style={{\n    position:\"absolute\",\n    top:\"55%\",\n    left:\"50%\",\n    transform:\"translate(-50%,-50%)\",\n    width:\"300px\",\n    height:\"auto\",\n    border:\"1px solid #94a3b8\",\n    padding:\"10px\",\n    borderRadius:\"5px\",\n    boxShadow:\"-1px 0px 10px -1px rgba(0,0,0,0.75)\",\n    zIndex:\"299\",\n    background:\"white\"\n    \n  }}>\n    <button \n      style={{\n        background:\"white\",\n        padding:'5px',\n        margin:\"0\",\n        position:\"absolute\",\n        top:\"5px\",\n        right:\"5px\"\n      }}\n      onClick={(e)=>{\n        e.preventDefault()\n        onClose()\n      }}\n      >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16px\" height=\"16px\" viewBox=\"0 0 24 24\" fill=\"none\">\n          <g id=\"Menu / Close_LG\">\n          <path id=\"Vector\" d=\"M21 21L12 12M12 12L3 3M12 12L21.0001 3M12 12L3 21.0001\" \n          stroke=\"red\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </g>\n        </svg>\n    </button>\n    <h2 style={{fontSize:\"14px\" ,textTransform:\"uppercase\", fontWeight:\"bold\"}}>{title}</h2>\n    <div>\n      <button \n      ref={confirmButtonRef} \n      style={{padding:\"5px 15px\" ,background:\"white\",border:\"none\",color:\"black\"}}\n      onKeyDown={(e)=>{\n        if(e.code === 'ArrowRight'){\n          cancelButtonRef.current?.focus()\n        }\n      }}\n      onClick={(e)=>{\n        e.preventDefault()\n        onConfirmed()\n      }}\n      >Ok</button>\n      <button \n      ref={cancelButtonRef} \n      style={{padding:\"5px 15px\" ,background:\"white\",border:\"none\",color:\"black\"}}\n      onKeyDown={(e)=>{\n        if(e.code === 'ArrowLeft'){\n          confirmButtonRef.current?.focus()\n        }\n      }}\n      onClick={(e)=>{\n        e.preventDefault()\n        onDeclined()\n      }}\n      >Cancel</button>\n    </div>\n  </div>\n  <div \n    onClick={(e)=>{\n      e.preventDefault()\n      onClose()\n    }} \n    style={{position:\"absolute\",top:0,left:0,bottom:0,right:0,background:\"trnsparent\",zIndex:\"1\"}}></div>\n    </>\n  )\n}\nfunction formatArrayIntoChunks(arr: Array<any>, chunkSize = 100) {\n  let result = [];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    result.push(arr.slice(i, i + chunkSize));\n  }\n  return result;\n}\n\n\n// export default function CashDisbursement() {\n//   const defaultValue = {\n//     code: \"\",\n//     acctName: \"\",\n//     subAcctName: \"\",\n//     ClientName: \"\",\n//     debit: \"\",\n//     credit: \"\",\n//     checkNo: \"\",\n//     checkDate: \"\",\n//     TC_Code: \"\",\n//     remarks: \"\",\n//     Payto: \"\",\n//     vatType: \"\",\n//     invoice: \"\",\n//     TempID: \"\",\n//     IDNo: \"\",\n//     BranchCode: \"\",\n//     addres: \"\",\n//   }\n//   const [modalVisible, setModalVisible] = useState(false);\n//   const [position, setPosition] = useState({ x: 0, y: 0 });\n\n//   const [rigthClickSelected, setRigthClickSelected] = useState<any>(null);\n\n\n//   const { myAxios, user } = useContext(AuthContext);\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const [openJobs, setOpenJobs] = useState(false);\n//   const [isPayToEnter, setIsPayToEnter] = useState(false);\n//   const [hasSelected, setHasSelected] = useState(false);\n//   const [editTransaction, setEditTransaction] = useState({\n//     edit: false,\n//     updateId: \"\",\n//   });\n\n//   const [cashDisbursement, setCashDisbursement] = useState<any>([]);\n//   const [newRowData, setNewRowData] = useState(defaultValue);\n//   const [updateRowData, setUpdateRowData] = useState(defaultValue);\n//   const [editCell, setEditCell] = useState({ TempID: null });\n\n\n\n//   const queryClient = useQueryClient();\n//   const explanationInputRef = useRef<HTMLInputElement>(null);\n\n\n//   const idInputRef = useRef<HTMLInputElement>(null);\n//   const vatRef = useRef<HTMLInputElement>(null);\n//   const debitInputRef = useRef<HTMLInputElement>(null);\n//   const tcInputRef = useRef<HTMLInputElement>(null);\n\n//   const chartAccountSearchInput = useRef<HTMLInputElement>(null);\n//   const IdsSearchInput = useRef<HTMLInputElement>(null);\n//   const codeInputRef = useRef<HTMLInputElement>(null);\n\n\n//   // new Ref\n//   const _refNoRef = useRef<any>(null)\n//   const refNoRef = useRef<HTMLInputElement>(null)\n//   const dateRef = useRef<HTMLInputElement>(null)\n//   const expRef = useRef<HTMLInputElement>(null)\n//   const particularRef = useRef<HTMLTextAreaElement>(null)\n\n\n\n\n\n\n\n//   const {\n//     isLoading: loadingGeneralJournalGenerator,\n//     refetch: refetchGeneralJournalGenerator,\n//   } = useQuery({\n//     queryKey: \"general-journal-id-generator\",\n//     queryFn: async () =>\n//       await myAxios.get(`/task/accounting/cash-disbursement/generate-id`, {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       }),\n//     refetchOnWindowFocus: false,\n//     onSuccess: (data) => {\n//       const response = data as any;\n//       wait(100).then(() => {\n//         if (refNoRef.current) {\n//           refNoRef.current.value = response.data.generatedId[0].id\n//           _refNoRef.current = response.data.generatedId[0].id\n//         }\n//         if (dateRef.current) {\n//           dateRef.current.value = format(new Date(), \"yyyy-MM-dd\")\n//         }\n//       })\n\n//       // dispatch({\n//       //   type: \"UPDATE_FIELD\",\n//       //   field: \"refNo\",\n//       //   value: response.data.generatedId[0].id,\n//       // });\n//       // dispatch({\n//       //   type: \"UPDATE_FIELD\",\n//       //   field: \"sub_refNo\",\n//       //   value: response.data.generatedId[0].id,\n//       // });\n//     },\n//   });\n\n//   const {\n//     mutate: addCashDisbursementMutate,\n//     isLoading: loadingCashDisbursementMutate,\n//   } = useMutation({\n//     mutationKey: \"add-cash-disbursement\",\n//     mutationFn: async (variable: any) =>\n//       await myAxios.post(\n//         \"/task/accounting/cash-disbursement/add-cash-disbursement\",\n//         variable,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${user?.accessToken}`,\n//           },\n//         }\n//       ),\n//     onSuccess: (res) => {\n//       const response = res as any;\n//       if (response.data.success) {\n//         queryClient.invalidateQueries(\"search-general-journal\");\n//         setHasSelected(false);\n//         setNewStateValue(dispatch, initialState);\n//         refetchGeneralJournalGenerator();\n//         setCashDisbursement([]);\n//         setEditTransaction({\n//           edit: false,\n//           updateId: \"\",\n//         });\n\n//         return Swal.fire({\n//           position: \"center\",\n//           icon: \"success\",\n//           title: response.data.message,\n//           timer: 1500,\n//         });\n//       }\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: response.data.message,\n//         timer: 1500,\n//       });\n//     },\n//   });\n\n//   const { mutate: mutateJob, isLoading: isLoadingJob } = useMutation({\n//     mutationKey: \"jobs\",\n//     mutationFn: async (variable: any) =>\n//       await myAxios.post(\"/task/accounting/general-journal/jobs\", variable, {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       }),\n//     onSuccess: (res) => {\n//       const response = res as any;\n//       setCashDisbursement([]);\n//       setCashDisbursement(response.data.jobs);\n//       setOpenJobs(false);\n//     },\n//   });\n\n//   const {\n//     mutate: mutateVoidCashDisbursement,\n//     isLoading: loadingVoidCashDisbursement,\n//   } = useMutation({\n//     mutationKey: \"void-cash-disbursement\",\n//     mutationFn: async (variable: any) =>\n//       await myAxios.post(\n//         \"/task/accounting/cash-disbursement/void-cash-disbursement\",\n//         variable,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${user?.accessToken}`,\n//           },\n//         }\n//       ),\n//     onSuccess: (res) => {\n//       const response = res as any;\n//       if (response.data.success) {\n//         queryClient.invalidateQueries(\"search-general-journal\");\n//         setHasSelected(false);\n//         setNewStateValue(dispatch, initialState);\n//         refetchGeneralJournalGenerator();\n//         setCashDisbursement([]);\n//         setEditTransaction({\n//           edit: false,\n//           updateId: \"\",\n//         });\n//         return Swal.fire({\n//           position: \"center\",\n//           icon: \"success\",\n//           title: response.data.message,\n//           timer: 1500,\n//         });\n//       }\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: response.data.message,\n//         timer: 1500,\n//       });\n//     },\n//   });\n\n//   const {\n//     mutate: getSearchSelectedCashDisbursement,\n//     isLoading: loadingGetSearchSelectedCashDisbursement,\n//   } = useMutation({\n//     mutationKey: \"get-selected-search-general-journal\",\n//     mutationFn: async (variable: any) =>\n//       await myAxios.post(\n//         \"/task/accounting/cash-disbursement/get-selected-search-cash-disbursement\",\n//         variable,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${user?.accessToken}`,\n//           },\n//         }\n//       ),\n//     onSuccess: (res) => {\n//       const response = res as any;\n//       const selected = response.data.selectedCashDisbursement;\n//       const { explanation, dateEntry, refNo, particulars } = selected[0];\n//       dispatch({\n//         type: \"UPDATE_FIELD\",\n//         field: \"sub_refNo\",\n//         value: refNo,\n//       });\n//       dispatch({\n//         type: \"UPDATE_FIELD\",\n//         field: \"refNo\",\n//         value: refNo,\n//       });\n//       dispatch({\n//         type: \"UPDATE_FIELD\",\n//         field: \"dateEntry\",\n//         value: dateEntry,\n//       });\n//       dispatch({\n//         type: \"UPDATE_FIELD\",\n//         field: \"explanation\",\n//         value: explanation,\n//       });\n//       dispatch({\n//         type: \"UPDATE_FIELD\",\n//         field: \"particulars\",\n//         value: particulars,\n//       });\n//       setCashDisbursement(selected);\n\n\n\n//       setHasSelected(true);\n//     },\n//   });\n\n//   const {\n//     ModalComponent: ModalSearchCashDisbursement,\n//     openModal: openSearchCashDisbursement,\n//     isLoading: isLoadingSearchCashDisbursement,\n//     closeModal: closeSearchCashDisbursement,\n//   } = useQueryModalTable({\n//     link: {\n//       url: \"/task/accounting/cash-disbursement/search-cash-disbursement\",\n//       queryUrlName: \"searchCashDisbursement\",\n//     },\n//     columns: [\n//       { field: \"Date_Entry\", headerName: \"Date\", width: 130 },\n//       { field: \"Source_No\", headerName: \"Ref No.\", width: 250 },\n//       {\n//         field: \"Explanation\",\n//         headerName: \"Explanation\",\n//         flex: 1,\n//       },\n//     ],\n//     queryKey: \"search-cash-disbursement\",\n//     uniqueId: \"Source_No\",\n//     responseDataKey: \"search\",\n//     onSelected: (selectedRowData, data) => {\n//       getSearchSelectedCashDisbursement({\n//         Source_No: selectedRowData[0].Source_No,\n//       });\n//       handleInputChange({\n//         target: { value: \"edit\", name: \"cashMode\" },\n//       });\n//       setCashDisbursement([]);\n//       setEditTransaction({\n//         edit: false,\n//         updateId: \"\",\n//       });\n\n//       closeSearchCashDisbursement();\n//     },\n//     onCloseFunction: (value: any) => {\n//       dispatch({ type: \"UPDATE_FIELD\", field: \"search\", value });\n//     },\n//     searchRef: chartAccountSearchInput,\n//   });\n\n//   const {\n//     ModalComponent: ModalChartAccountSearch,\n//     openModal: openChartAccountSearch,\n//     isLoading: isLoadingChartAccountSearch,\n//     closeModal: closeChartAccountSearch,\n//   } = useQueryModalTable({\n//     link: {\n//       url: \"/task/accounting/general-journal/get-chart-account\",\n//       queryUrlName: \"chartAccountSearch\",\n//     },\n//     columns: [\n//       { field: \"Acct_Code\", headerName: \"Account Code\", width: 130 },\n//       { field: \"Acct_Title\", headerName: \"Account Title.\", width: 250 },\n//       {\n//         field: \"Short\",\n//         headerName: \"Short\",\n//         flex: 1,\n//       },\n//     ],\n//     queryKey: \"get-chart-account\",\n//     uniqueId: \"Acct_Code\",\n//     responseDataKey: \"getChartOfAccount\",\n//     onSelected: (selectedRowData, data) => {\n//       if (editCell.TempID !== null) {\n//         setCashDisbursement((d: any) => {\n//           const newD = d.map((itm: any) => {\n//             if (itm.TempID === editCell.TempID) {\n//               itm = {\n//                 ...itm,\n//                 code: selectedRowData[0].Acct_Code,\n//                 acctName: selectedRowData[0].Acct_Title\n//               }\n//             }\n//             return itm\n//           })\n//           return newD\n//         })\n//       } else {\n//         setNewRowData((d) => ({\n//           ...d,\n//           code: selectedRowData[0].Acct_Code,\n//           acctName: selectedRowData[0].Acct_Title\n//         }))\n//       }\n\n//       closeChartAccountSearch();\n//       setTimeout(() => {\n//         const nextInput = document.querySelector(`#ClientName`) as HTMLInputElement;\n//         if (nextInput) {\n//           nextInput.focus(); // Move focus to the next input\n//         }\n//       }, 150);\n//     },\n//     searchRef: chartAccountSearchInput,\n//   });\n\n//   const {\n//     ModalComponent: ModalPolicyIdClientIdRefId,\n//     openModal: openPolicyIdClientIdRefId,\n//     isLoading: isLoadingPolicyIdClientIdRefId,\n//     closeModal: closePolicyIdClientIdRefId,\n//   } = useQueryModalTable({\n//     link: {\n//       url: \"/task/accounting/search-pdc-policy-id\",\n//       queryUrlName: \"searchPdcPolicyIds\",\n//     },\n//     columns: [\n//       { field: \"Type\", headerName: \"Type\", width: 130 },\n//       { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n//       {\n//         field: \"Name\",\n//         headerName: \"Name\",\n//         flex: 1,\n//       },\n//       {\n//         field: \"ID\",\n//         headerName: \"ID\",\n//         hide: true,\n//       },\n//     ],\n//     queryKey: \"get-policyId-ClientId-RefId\",\n//     uniqueId: \"IDNo\",\n//     responseDataKey: \"clientsId\",\n//     onSelected: (selectedRowData) => {\n//       if (editCell.TempID !== null) {\n//         setCashDisbursement((d: any) => {\n//           const newD = d.map((itm: any) => {\n//             if (itm.TempID === editCell.TempID) {\n//               itm = {\n//                 ...itm,\n//                 ClientName: selectedRowData[0].Name,\n//                 IDNo: selectedRowData[0].IDNo,\n//                 subAcct: selectedRowData[0].sub_account,\n//                 subAcctName: selectedRowData[0].ShortName,\n//                 address: selectedRowData[0].address,\n//               }\n//             }\n//             return itm\n//           })\n\n\n//           return newD\n//         })\n//       } else {\n//         setNewRowData((d) => ({\n//           ...d,\n//           ClientName: selectedRowData[0].Name,\n//           IDNo: selectedRowData[0].IDNo,\n//           subAcct: selectedRowData[0].sub_account,\n//           subAcctName: selectedRowData[0].ShortName,\n//           address: selectedRowData[0].address,\n//         }))\n//       }\n\n\n//       closePolicyIdClientIdRefId();\n//       setTimeout(() => {\n//         const nextInput = document.querySelector(`#debit`) as HTMLInputElement;\n//         if (nextInput) {\n//           nextInput.focus(); // Move focus to the next input\n//         }\n//       }, 200);\n//     },\n//     searchRef: IdsSearchInput,\n//   });\n\n//   const {\n//     ModalComponent: ModalPolicyIdPayTo,\n//     openModal: openPolicyIdPayTo,\n//     isLoading: isLoadingPolicyIdPayTo,\n//     closeModal: closePolicyIdPayTo,\n//   } = useQueryModalTable({\n//     link: {\n//       url: \"/task/accounting/search-pdc-policy-id\",\n//       queryUrlName: \"searchPdcPolicyIds\",\n//     },\n//     columns: [\n//       { field: \"Type\", headerName: \"Type\", width: 130 },\n//       { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n//       {\n//         field: \"Name\",\n//         headerName: \"Name\",\n//         flex: 1,\n//       },\n//       {\n//         field: \"ID\",\n//         headerName: \"ID\",\n//         hide: true,\n//       },\n//     ],\n//     queryKey: \"get-policyId-ClientId-RefId\",\n//     uniqueId: \"IDNo\",\n//     responseDataKey: \"clientsId\",\n//     onSelected: (selectedRowData) => {\n//       if (editCell.TempID !== null) {\n//         setCashDisbursement((d: any) => {\n//           const newD = d.map((itm: any) => {\n//             if (itm.TempID === editCell.TempID) {\n//               itm = {\n//                 ...itm,\n//                 Payto: selectedRowData[0].Name,\n//               }\n//             }\n//             return itm\n//           })\n//           return newD\n//         })\n//       } else {\n//         setNewRowData((d) => ({\n//           ...d,\n//           Payto: selectedRowData[0].Name,\n//         }))\n//       }\n\n//       closePolicyIdPayTo();\n//       setTimeout(() => {\n//         const nextInput = document.querySelector(`#vatType`) as HTMLInputElement;\n//         if (nextInput) {\n//           nextInput.focus(); // Move focus to the next input\n//         }\n//       }, 200);\n\n//     },\n//     searchRef: IdsSearchInput,\n//   });\n\n\n//   const {\n//     ModalComponent: ModalTransactionAccount,\n//     openModal: openTransactionAccount,\n//     isLoading: isLoadingTransactionAccount,\n//     closeModal: closeTransactionAccount,\n//   } = useQueryModalTable({\n//     link: {\n//       url: \"/task/accounting/general-journal/get-transaction-account\",\n//       queryUrlName: \"transactionCodeSearch\",\n//     },\n//     columns: [\n//       { field: \"Code\", headerName: \"Code\", width: 130 },\n//       {\n//         field: \"Description\",\n//         headerName: \"Description\",\n//         flex: 1,\n//       },\n//     ],\n//     queryKey: \"get-transaction-account\",\n//     uniqueId: \"Code\",\n//     responseDataKey: \"getTransactionAccount\",\n//     onSelected: (selectedRowData) => {\n\n//       if (editCell.TempID !== null) {\n//         setCashDisbursement((d: any) => {\n//           const newD = d.map((itm: any) => {\n//             if (itm.TempID === editCell.TempID) {\n//               itm = {\n//                 ...itm,\n//                 TC_Code: selectedRowData[0].Code,\n//                 TC_Desc: selectedRowData[0].Description,\n//               }\n//             }\n//             return itm\n//           })\n//           return newD\n//         })\n//       } else {\n//         setNewRowData((d) => ({\n//           ...d,\n//           TC_Code: selectedRowData[0].Code,\n//           TC_Desc: selectedRowData[0].Description,\n//         }))\n//       }\n\n\n\n\n//       closeTransactionAccount();\n//       setTimeout(() => {\n//         const nextInput = document.querySelector(`#remarks`) as HTMLInputElement;\n//         if (nextInput) {\n//           nextInput.focus(); // Move focus to the next input\n//         }\n//       }, 250);\n//     },\n//     searchRef: IdsSearchInput,\n//   });\n\n//   useEffect(() => {\n//     const debit = cashDisbursement.reduce((a: number, item: any) => {\n//       return a + parseFloat(item.debit.replace(/,/g, \"\"));\n//     }, 0);\n//     const credit = cashDisbursement.reduce((a: number, item: any) => {\n//       return a + parseFloat(item.credit.replace(/,/g, \"\"));\n//     }, 0);\n//     dispatch({\n//       type: \"UPDATE_FIELD\",\n//       field: \"totalDebit\",\n//       value: debit.toFixed(2),\n//     });\n//     dispatch({\n//       type: \"UPDATE_FIELD\",\n//       field: \"totalCredit\",\n//       value: credit.toFixed(2),\n//     });\n//     dispatch({\n//       type: \"UPDATE_FIELD\",\n//       field: \"totalBalance\",\n//       value: (debit - credit).toFixed(2),\n//     });\n//   }, [cashDisbursement]);\n\n//   const handleInputChange = (e: any) => {\n//     const { name, value } = e.target;\n//     dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n//   };\n\n//   function handleOnSave() {\n//     if (state.refNo === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Please provide reference number!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.explanation === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Please provide explanation!\",\n//         timer: 1500,\n//       }).then(() => {\n//         wait(300).then(() => {\n//           explanationInputRef.current?.focus();\n//         });\n//       });\n//     }\n//     if (\n//       (state.totalDebit === \"\" && state.totalCredit === \"\") ||\n//       (state.totalDebit === \"0.00\" && state.totalCredit === \"0.00\")\n//     ) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title:\n//           \"Total Debit and Credit amount must not be zero(0), please double check the entries\",\n//         timer: 1500,\n//       }).then(() => {\n//         wait(300).then(() => { });\n//       });\n//     }\n//     if (state.totalDebit !== state.totalCredit) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title:\n//           \"Total Debit and Credit amount must be balance, please double check the entries\",\n//         timer: 1500,\n//       }).then(() => {\n//         wait(300).then(() => { });\n//       });\n//     }\n//     if (state.cashMode === \"edit\") {\n//       codeCondfirmationAlert({\n//         isUpdate: true,\n//         cb: (userCodeConfirmation) => {\n//           addCashDisbursementMutate({\n//             hasSelected,\n//             refNo: state.refNo,\n//             dateEntry: state.dateEntry,\n//             explanation: state.explanation,\n//             particulars: state.particulars,\n//             cashDisbursement,\n//             userCodeConfirmation,\n//           });\n//         },\n//       });\n//     } else {\n//       saveCondfirmationAlert({\n//         isConfirm: () => {\n//           addCashDisbursementMutate({\n//             hasSelected,\n//             refNo: state.refNo,\n//             dateEntry: state.dateEntry,\n//             explanation: state.explanation,\n//             particulars: state.particulars,\n//             cashDisbursement,\n//           });\n//         },\n//       });\n//     }\n//   }\n\n//   function handleVoid() {\n//     codeCondfirmationAlert({\n//       isUpdate: false,\n//       text: `Are you sure you want to void ${state.refNo}`,\n//       cb: (userCodeConfirmation) => {\n//         mutateVoidCashDisbursement({\n//           refNo: state.refNo,\n//           dateEntry: state.dateEntry,\n//           userCodeConfirmation,\n//         });\n//       },\n//     });\n//   }\n\n//   function handleRowSave() {\n//     if (isNaN(parseFloat(state.credit))) {\n//       state.credit = \"0.00\";\n//     }\n//     if (isNaN(parseFloat(state.debit))) {\n//       state.debit = \"0.00\";\n//     }\n//     if (state.code === \"\" || state.acctName === \"\") {\n//       return openChartAccountSearch(state.code);\n//     }\n\n//     if (state.subAcctName === \"\" || state.ClientName === \"\") {\n//       return openPolicyIdClientIdRefId(state.ClientName);\n//     }\n//     if (state.credit === state.debit) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"The values for credit and debit must be different\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.code === \"1.01.10\" && state.checkNo === \"\") {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Check No. is Required!\",\n//         timer: 1500,\n//       });\n//     }\n\n//     if (state.TC_Code === \"\") {\n//       return openTransactionAccount(state.TC_Code);\n//     }\n\n//     if (state.Payto === \"\" && state.code === \"1.01.10\") {\n//       setIsPayToEnter(true);\n//       return openPolicyIdClientIdRefId(state.Payto);\n//     }\n\n//     if (state.code.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Code is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.ClientName.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Client Name is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.debit.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Debit is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.credit.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Credit is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.checkNo.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Check No is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.TC_Code.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"TC is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.Payto.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Pay to is too long!\",\n//         timer: 1500,\n//       });\n//     }\n//     if (state.invoice.length >= 200) {\n//       return Swal.fire({\n//         position: \"center\",\n//         icon: \"warning\",\n//         title: \"Invoice is too long!\",\n//         timer: 1500,\n//       });\n//     }\n\n//     function generateID(array: Array<any>) {\n//       const lastItem = array.length ? array[array.length - 1].TempID : \"000\";\n//       const numericPart = (parseInt(lastItem.toString().match(/\\d+/)[0]) + 1)\n//         .toString()\n//         .padStart(3, \"0\");\n//       return numericPart;\n//     }\n\n//     Swal.fire({\n//       title: editTransaction.edit\n//         ? `Are you sure you want to update row?`\n//         : `Are you sure you want to add new row?`,\n//       text: \"You won't be able to revert this!\",\n//       icon: \"warning\",\n//       showCancelButton: true,\n//       confirmButtonColor: \"#3085d6\",\n//       cancelButtonColor: \"#d33\",\n//       confirmButtonText: editTransaction.edit\n//         ? \"Yes, update it!\"\n//         : \"Yes Add it\",\n//     }).then((result) => {\n//       if (result.isConfirmed) {\n//         setCashDisbursement((d: any) => {\n//           if (state.code === \"1.01.10\") {\n//             state.checkDate = formatDate(state.checkDate);\n//           } else {\n//             state.checkDate = \"\";\n//           }\n\n//           if (state.vatType === \"VAT\" && state.code !== \"1.06.02\") {\n//             let taxableamt;\n\n//             if (parseFloat(state.debit.replace(/,/g, \"\")) !== 0) {\n//               taxableamt = parseFloat(state.debit.replace(/,/g, \"\")) / 1.12;\n//               state.debit = taxableamt.toLocaleString(\"en-US\", {\n//                 minimumFractionDigits: 2,\n//                 maximumFractionDigits: 2,\n//               });\n//             } else {\n//               taxableamt = parseFloat(state.credit.replace(/,/g, \"\")) / 1.12;\n//               state.credit = taxableamt.toLocaleString(\"en-US\", {\n//                 minimumFractionDigits: 2,\n//                 maximumFractionDigits: 2,\n//               });\n//             }\n\n//             if (editTransaction.edit) {\n//               d = d.map((item: any) => {\n//                 if (editTransaction.updateId === item.TempID) {\n//                   item = {\n//                     ...item,\n//                     ...state,\n//                   };\n//                 }\n//                 return item;\n//               });\n//             } else {\n//               d = [\n//                 ...d,\n//                 {\n//                   ...state,\n//                   TempID: generateID(d),\n//                 },\n//               ];\n//             }\n\n//             let inputtax = taxableamt * 0.12;\n\n//             if (parseFloat(state.debit.replace(/,/g, \"\")) !== 0) {\n//               state.debit = inputtax.toLocaleString(\"en-US\", {\n//                 minimumFractionDigits: 2,\n//                 maximumFractionDigits: 2,\n//               });\n//             } else {\n//               state.credit = inputtax.toLocaleString(\"en-US\", {\n//                 minimumFractionDigits: 2,\n//                 maximumFractionDigits: 2,\n//               });\n//             }\n//             d = [\n//               ...d,\n//               {\n//                 ...state,\n//                 code: \"1.06.02\",\n//                 acctName: \"Input Tax\",\n//                 TempID: generateID(d),\n//               },\n//             ];\n//           } else {\n//             const credit = parseFloat(\n//               state.credit.replace(/,/g, \"\")\n//             ).toLocaleString(\"en-US\", {\n//               minimumFractionDigits: 2,\n//               maximumFractionDigits: 2,\n//             });\n//             const debit = parseFloat(\n//               state.debit.replace(/,/g, \"\")\n//             ).toLocaleString(\"en-US\", {\n//               minimumFractionDigits: 2,\n//               maximumFractionDigits: 2,\n//             });\n\n//             state.credit = credit;\n//             state.debit = debit;\n\n//             if (editTransaction.edit) {\n//               const newD = d.map((item: any) => {\n//                 if (editTransaction.updateId === item.TempID) {\n//                   item = {\n//                     ...item,\n//                     ...state,\n//                   };\n//                 }\n//                 return item;\n//               });\n//               return newD;\n//             }\n//             d = [\n//               ...d,\n//               {\n//                 ...state,\n//                 TempID: generateID(d),\n//               },\n//             ];\n//           }\n\n//           return d;\n//         });\n\n//         const resetValue = {\n//           code: \"\",\n//           acctName: \"\",\n//           subAcct: \"\",\n//           subAcctName: \"\",\n//           IDNo: \"\",\n//           ClientName: \"\",\n//           credit: \"\",\n//           debit: \"\",\n//           TC_Code: \"\",\n//           TC_Desc: \"\",\n//           remarks: \"\",\n//           vatType: \"NON-VAT\",\n//           invoice: \"\",\n//           address: \"\",\n//           checkNo: \"\",\n//           checkDate: new Date(),\n//         };\n//         setNewStateValue(dispatch, { ...state, ...resetValue });\n//         setEditTransaction({ edit: false, updateId: \"\" });\n//         wait(300).then(() => {\n//           codeInputRef.current?.focus();\n//         });\n//       }\n//     });\n//   }\n\n//   function handleClickPrint() {\n//     mutateOnPrint({ Source_No: state.refNo })\n//   }\n//   function handleClickPrintCheck() {\n//     setRigthClickSelected(null)\n//     if (rigthClickSelected) {\n//       localStorage.removeItem(\"printString\");\n//       localStorage.setItem(\"paper-width\", \"8.27in\");\n//       localStorage.setItem(\"paper-height\", \"11.69in\");\n//       localStorage.setItem(\"module\", \"cash-disbursement-check\");\n//       localStorage.setItem(\"state\", JSON.stringify(rigthClickSelected));\n//       localStorage.setItem(\"dataString\", JSON.stringify([]));\n//       localStorage.setItem(\"column\", JSON.stringify([]));\n//       localStorage.setItem(\"title\", \"\");\n//     }\n//     window.open(\"/dashboard/print\", \"_blank\");\n//   }\n//   // mutateOnPrint({ Source_No: state.refNo })\n//   const isDisableField = state.cashMode === \"\";\n//   const width = window.innerWidth - 50;\n//   const height = window.innerHeight - 205;\n\n//   const closeModal = () => {\n//     setModalVisible(false);\n//   };\n\n//   if (isLoadingTransactionAccount || isLoadingPolicyIdPayTo || isLoadingPolicyIdClientIdRefId || isLoadingChartAccountSearch) {\n//     return <div>loading...</div>\n//   }\n\n//   const handleSave = (newData: any) => {\n//     // Logic to save new data (e.g., update state, call an API, etc.)\n//     console.log('Saving new data:', newData);\n//   };\n\n\n//   return (\n//     <div\n//       onClick={() => {\n//         closeModal()\n//         if (rigthClickSelected) {\n//           setRigthClickSelected(null)\n//         }\n//       }}\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         width: \"100%\",\n//         height: \"100%\",\n//         flex: 1,\n//       }}\n//     >\n//       <div\n//         style={{\n//           display: \"flex\",\n//           alignItems: \"center\",\n//           columnGap: \"5px\",\n//         }}\n//       >\n//         <div\n//           style={{\n//             display: \"flex\",\n//             alignItems: \"center\",\n//             columnGap: \"5px\",\n//           }}\n//         >\n//           {isLoadingSearchCashDisbursement ? (\n//             <LoadingButton loading={isLoadingSearchCashDisbursement} />\n//           ) : (\n//             <TextField\n//               label=\"Search\"\n//               size=\"small\"\n//               name=\"search\"\n//               value={state.search}\n//               onChange={handleInputChange}\n//               onKeyDown={(e) => {\n//                 if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                   e.preventDefault();\n//                   return openSearchCashDisbursement(\n//                     (e.target as HTMLInputElement).value\n//                   );\n//                 }\n//               }}\n//               InputProps={{\n//                 style: { height: \"27px\", fontSize: \"14px\" },\n//               }}\n//               sx={{\n//                 width: \"300px\",\n//                 height: \"27px\",\n//                 \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             />\n//           )}\n\n//           {state.cashMode === \"\" && (\n//             <Button\n//               sx={{\n//                 height: \"30px\",\n//                 fontSize: \"11px\",\n//               }}\n//               variant=\"contained\"\n//               startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n//               id=\"entry-header-save-button\"\n//               onClick={() => {\n//                 handleInputChange({\n//                   target: { value: \"add\", name: \"cashMode\" },\n//                 });\n//               }}\n//               color=\"primary\"\n//             >\n//               New\n//             </Button>\n//           )}\n//           <LoadingButton\n//             sx={{\n//               height: \"30px\",\n//               fontSize: \"11px\",\n//             }}\n//             loading={loadingCashDisbursementMutate}\n//             disabled={state.cashMode === \"\"}\n//             onClick={handleOnSave}\n//             color=\"success\"\n//             variant=\"contained\"\n//           >\n//             Save\n//           </LoadingButton>\n//           {state.cashMode !== \"\" && (\n//             <LoadingButton\n//               sx={{\n//                 height: \"30px\",\n//                 fontSize: \"11px\",\n//               }}\n//               variant=\"contained\"\n//               startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n//               color=\"error\"\n//               onClick={() => {\n//                 Swal.fire({\n//                   title: \"Are you sure?\",\n//                   text: \"You won't be able to revert this!\",\n//                   icon: \"warning\",\n//                   showCancelButton: true,\n//                   confirmButtonColor: \"#3085d6\",\n//                   cancelButtonColor: \"#d33\",\n//                   confirmButtonText: \"Yes, cancel it!\",\n//                 }).then((result) => {\n//                   if (result.isConfirmed) {\n//                     refetchGeneralJournalGenerator();\n//                     handleInputChange({\n//                       target: { value: \"\", name: \"cashMode\" },\n//                     });\n//                     setNewStateValue(dispatch, initialState);\n//                     setCashDisbursement([]);\n//                     // setSearchSelected(false);\n//                     setEditTransaction({\n//                       edit: false,\n//                       updateId: \"\",\n//                     });\n//                   }\n//                 });\n//               }}\n//               disabled={state.cashMode === \"\"}\n//             >\n//               Cancel\n//             </LoadingButton>\n//           )}\n//           <LoadingButton\n//             sx={{\n//               height: \"30px\",\n//               fontSize: \"11px\",\n//               background: deepOrange[500],\n//               \":hover\": {\n//                 background: deepOrange[600],\n//               },\n//             }}\n//             onClick={handleVoid}\n//             loading={loadingVoidCashDisbursement}\n//             disabled={state.cashMode !== \"edit\"}\n//             variant=\"contained\"\n//             startIcon={<NotInterestedIcon sx={{ width: 20, height: 20 }} />}\n//           >\n//             Void\n//           </LoadingButton>\n//           <LoadingButton\n//             loading={isLoadingOnPrint}\n//             disabled={state.cashMode !== \"edit\"}\n//             id=\"basic-button\"\n//             aria-haspopup=\"true\"\n//             onClick={handleClickPrint}\n//             sx={{\n//               height: \"30px\",\n//               fontSize: \"11px\",\n//               color: \"white\",\n//               backgroundColor: grey[600],\n//               \"&:hover\": {\n//                 backgroundColor: grey[700],\n//               },\n//             }}\n//           >\n//             Print\n//           </LoadingButton>\n//         </div>\n//       </div>\n//       <div style={{ display: \"flex\", marginBottom: \"10px\" }}>\n//         <fieldset\n//           style={{\n//             border: \"1px solid #cbd5e1\",\n//             borderRadius: \"5px\",\n//             position: \"relative\",\n//             flex: 1,\n//             height: \"auto\",\n//             display: \"flex\",\n//             marginTop: \"10px\",\n//             gap: \"10px\",\n//             padding: \"15px\",\n//             flexDirection: \"column\"\n//           }}\n//         >\n//           {loadingGeneralJournalGenerator ? (\n//             <LoadingButton loading={loadingGeneralJournalGenerator} />\n//           ) : (\n//             <TextInput\n//               label={{\n//                 title: \"Reference CV- : \",\n//                 style: {\n//                   fontSize: \"12px\",\n//                   fontWeight: \"bold\",\n//                   width: \"100px\",\n//                 },\n//               }}\n//               input={{\n//                 disabled: isDisableField,\n//                 type: \"text\",\n//                 style: { width: \"190px\" },\n//                 readOnly: true,\n//                 onKeyDown: (e) => {\n//                   if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n//                     dateRef.current?.focus()\n//                   }\n//                 }\n//               }}\n//               inputRef={refNoRef}\n//             />\n//           )}\n//           <TextInput\n//             label={{\n//               title: \"Date : \",\n//               style: {\n//                 fontSize: \"12px\",\n//                 fontWeight: \"bold\",\n//                 width: \"100px\",\n//               },\n//             }}\n//             input={{\n//               disabled: isDisableField,\n//               type: \"date\",\n//               style: { width: \"190px\" },\n//               onKeyDown: (e) => {\n//                 if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n//                   expRef.current?.focus()\n//                 }\n//               }\n//             }}\n//             inputRef={dateRef}\n//           />\n//           <TextInput\n//             label={{\n//               title: \"Explanation : \",\n//               style: {\n//                 fontSize: \"12px\",\n//                 fontWeight: \"bold\",\n//                 width: \"100px\",\n//               },\n//             }}\n//             input={{\n//               disabled: isDisableField,\n//               type: \"text\",\n//               style: { flex: 1 },\n//               onKeyDown: (e) => {\n//                 if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n//                   particularRef.current?.focus()\n//                 }\n//               }\n//             }}\n//             inputRef={expRef}\n//           />\n//           <TextAreaInput\n//             label={{\n//               title: \"Particulars : \",\n//               style: {\n//                 fontSize: \"12px\",\n//                 fontWeight: \"bold\",\n//                 width: \"100px\",\n//               },\n//             }}\n//             textarea={{\n//               rows: 4,\n//               disabled: isDisableField,\n//               style: { flex: 1 },\n//               onKeyDown: (e) => {\n//                 if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\n//                   //  refDate.current?.focus()\n//                 }\n//               },\n//             }}\n//             _inputRef={particularRef}\n//           />\n//         </fieldset>\n//         <fieldset\n//           style={{\n//             border: \"1px solid #cbd5e1\",\n//             borderRadius: \"5px\",\n//             position: \"relative\",\n//             width: \"400px\",\n//             height: \"auto\",\n//             display: \"flex\",\n//             marginTop: \"10px\",\n//             gap: \"10px\",\n//             padding: \"15px\",\n//           }}\n//         >\n//           <div style={{ alignItems: \"center\", display: \"flex\", textAlign: \"center\", width: \"100px\" }}>\n//             <p style={{ margin: 0, padding: 0, color: \"black\", display: \"flex\", flexDirection: \"column\" }}>\n//               <span style={{ fontSize: \"12px\" }}>Total Rows:</span> <strong>{cashDisbursement.length}</strong>\n//             </p>\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"space-around\", flexDirection: \"column\", flex: 1 }}>\n//             <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n//               <span style={{ fontSize: \"12px\" }}>Total Debit:</span> <strong>{state.totalDebit}</strong>\n//             </p>\n//             <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n//               <span style={{ fontSize: \"12px\" }}>Total Credit:</span> <strong>{state.totalCredit}</strong>\n//             </p>\n//             <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n//               <span style={{ fontSize: \"12px\" }}>Balance:</span>{\" \"}\n//               <strong\n//                 style={{\n//                   color:\n//                     parseFloat(state.totalBalance.replace(/,/g, \"\")) > 0\n//                       ? \"red\"\n//                       : \"black\",\n//                 }}\n//               >\n//                 {state.totalBalance}\n//               </strong>\n//             </p>\n//           </div>\n//         </fieldset>\n//       </div>\n//       {/* <fieldset\n//         style={{\n//           border: \"1px solid #cbd5e1\",\n//           borderRadius: \"5px\",\n//           position: \"relative\",\n//           width: \"100%\",\n//           height: \"auto\",\n//           marginTop: \"10px\",\n\n//           padding: \"15px\",\n//         }}\n//       >\n//         <div\n//           style={{\n//             display: \"flex\",\n//             gap: \"10px\",\n//           }}\n//         >\n//           {isLoadingChartAccountSearch ? (\n//             <LoadingButton loading={isLoadingChartAccountSearch} />\n//           ) : (\n//             <FormControl\n//               variant=\"outlined\"\n//               size=\"small\"\n//               disabled={isDisableField}\n//               sx={{\n//                 width: \"130px\",\n//                 \".MuiFormLabel-root\": {\n//                   fontSize: \"14px\",\n//                   background: \"white\",\n//                   zIndex: 99,\n//                   padding: \"0 3px\",\n//                 },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             >\n//               <InputLabel htmlFor=\"chart-account-id\">Code</InputLabel>\n//               <OutlinedInput\n//                 sx={{\n//                   height: \"27px\",\n//                   fontSize: \"14px\",\n//                 }}\n//                 readOnly\n//                 disabled={isDisableField}\n//                 fullWidth\n//                 label=\"Code\"\n//                 name=\"code\"\n//                 inputRef={codeInputRef}\n//                 value={state.code}\n//                 onChange={handleInputChange}\n//                 onKeyDown={(e) => {\n//                   if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                     e.preventDefault();\n//                     return openChartAccountSearch(state.code);\n//                   }\n//                 }}\n//                 id=\"chart-account-id\"\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       ref={reloadIDButtonRef}\n//                       disabled={isDisableField}\n//                       aria-label=\"search-client\"\n//                       color=\"secondary\"\n//                       edge=\"end\"\n//                       onClick={() => {\n//                         openChartAccountSearch(state.code);\n//                       }}\n//                     >\n//                       <RestartAltIcon />\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//               />\n//             </FormControl>\n//           )}\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"Account Name\"\n//             size=\"small\"\n//             name=\"acctName\"\n//             value={state.acctName}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (\n//                 e.code === \"Enter\" ||\n//                 (e.code === \"NumpadEnter\" && state.acctName !== \"\")\n//               ) {\n//                 e.preventDefault();\n//                 subAccountRef.current?.focus()\n//               }\n\n//             }}\n//             InputProps={{\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//               inputRef: accountNameRef\n//             }}\n//             sx={{\n//               flex: 1,\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"Sub Account\"\n//             size=\"small\"\n//             name=\"subAcctName\"\n//             value={state.subAcctName}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (\n//                 e.code === \"Enter\" ||\n//                 (e.code === \"NumpadEnter\" && state.subAcctName !== \"\")\n//               ) {\n//                 e.preventDefault();\n//                 idInputRef.current?.focus()\n//               }\n\n//             }}\n//             InputProps={{\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//               inputRef: subAccountRef\n//             }}\n//             sx={{\n//               width: \"150px\",\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           {isLoadingPolicyIdClientIdRefId ? (\n//             <LoadingButton loading={isLoadingPolicyIdClientIdRefId} />\n//           ) : (\n//             <FormControl\n//               variant=\"outlined\"\n//               size=\"small\"\n//               disabled={isDisableField}\n//               sx={{\n//                 width: \"300px\",\n//                 \".MuiFormLabel-root\": {\n//                   fontSize: \"14px\",\n//                   background: \"white\",\n//                   zIndex: 99,\n//                   padding: \"0 3px\",\n//                 },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             >\n//               <InputLabel htmlFor=\"policy-client-ref-id\">I.D</InputLabel>\n//               <OutlinedInput\n//                 readOnly\n//                 sx={{\n//                   height: \"27px\",\n//                   fontSize: \"14px\",\n//                 }}\n//                 inputRef={idInputRef}\n//                 disabled={isDisableField}\n//                 fullWidth\n//                 label=\"I.D\"\n//                 name=\"ClientName\"\n//                 value={state.ClientName}\n//                 onChange={handleInputChange}\n//                 onKeyDown={(e) => {\n//                   if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                     e.preventDefault();\n//                     setIsPayToEnter(false);\n//                     return openPolicyIdClientIdRefId(state.ClientName);\n//                   }\n//                 }}\n//                 id=\"policy-client-ref-id\"\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       ref={reloadIDButtonRef}\n//                       disabled={isDisableField}\n//                       aria-label=\"search-client\"\n//                       color=\"secondary\"\n//                       edge=\"end\"\n//                       onClick={() => {\n//                         openPolicyIdClientIdRefId(state.ClientName);\n//                       }}\n//                     >\n//                       <RestartAltIcon />\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//               />\n//             </FormControl>\n//           )}\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"Debit\"\n//             size=\"small\"\n//             name=\"debit\"\n//             value={state.debit}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                 e.preventDefault();\n//                 creditRef.current?.focus()\n//               }\n//             }}\n//             onBlur={(e) => {\n//               e.preventDefault();\n//               let num = \"0\";\n//               if (!isNaN(parseFloat(state.debit))) {\n//                 num = state.debit;\n//               }\n//               dispatch({\n//                 type: \"UPDATE_FIELD\",\n//                 field: \"debit\",\n//                 value: parseFloat(num.toString().replace(/,/g, \"\")).toFixed(2),\n//               });\n//             }}\n//             InputProps={{\n//               inputComponent: NumericFormatCustom as any,\n//               inputRef: debitInputRef,\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//             }}\n//             sx={{\n//               width: \"160px\",\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"Credit\"\n//             size=\"small\"\n//             name=\"credit\"\n//             value={state.credit}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                 e.preventDefault();\n//                 if (state.code === \"1.01.10\") {\n//                   checkNoRef.current?.focus()\n//                 } else {\n//                   tcDateRef.current?.focus()\n//                 }\n//               }\n//             }}\n//             onFocus={(e) => {\n//               e.preventDefault();\n//               if (state.code === \"1.01.10\") {\n//                 dispatch({\n//                   type: \"UPDATE_FIELD\",\n//                   field: \"credit\",\n//                   value: state.totalBalance,\n//                 });\n//               }\n//             }}\n//             onBlur={(e) => {\n//               e.preventDefault();\n//               let num = \"0\";\n//               if (!isNaN(parseFloat(state.credit))) {\n//                 num = state.credit;\n//               }\n//               dispatch({\n//                 type: \"UPDATE_FIELD\",\n//                 field: \"credit\",\n//                 value: parseFloat(num.toString().replace(/,/g, \"\")).toFixed(2),\n//               });\n//             }}\n//             InputProps={{\n//               inputComponent: NumericFormatCustom as any,\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//               inputRef: creditRef\n//             }}\n//             sx={{\n//               width: \"160px\",\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           <TextField\n//             disabled={isDisableField || state.code !== \"1.01.10\"}\n//             label=\"Check No\"\n//             size=\"small\"\n//             name=\"checkNo\"\n//             value={state.checkNo}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                 e.preventDefault();\n//                 checkDateRef.current?.focus()\n//               }\n//             }}\n//             InputProps={{\n//               inputRef: checkNoRef,\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//             }}\n//             sx={{\n//               width: \"160px\",\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//         </div>\n//         <div\n//           style={{\n//             display: \"flex\",\n//             gap: \"10px\",\n//             marginTop: \"10px\",\n//           }}\n//         >\n//           {state.code === \"1.01.10\" ? (\n//             <CustomDatePicker\n//               fullWidth={false}\n//               disabled={isDisableField || state.code !== \"1.01.10\"}\n//               label=\"Check Date\"\n//               onChange={(value: any) => {\n//                 dispatch({\n//                   type: \"UPDATE_FIELD\",\n//                   field: \"checkDate\",\n//                   value: value,\n//                 });\n//               }}\n//               value={state.checkDate}\n//               onKeyDown={(e: any) => {\n//                 if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                   // const timeout = setTimeout(() => {\n//                   //   checkDatePickerRef.current\n//                   //     ?.querySelector(\"button\")\n//                   //     ?.click();\n//                   //   clearTimeout(timeout);\n//                   // }, 150);\n//                   tcDateRef.current?.focus()\n//                 }\n//               }}\n//               datePickerRef={checkDatePickerRef}\n//               inputRef={checkDateRef}\n//               textField={{\n//                 InputLabelProps: {\n//                   style: {\n//                     fontSize: \"14px\",\n//                   },\n//                 },\n//                 InputProps: {\n//                   style: { height: \"27px\", fontSize: \"14px\", width: \"150px\" },\n//                 },\n//               }}\n//             />\n//           ) : (\n//             <TextField\n//               disabled={isDisableField || state.code !== \"1.01.10\"}\n//               label=\"Check Date\"\n//               size=\"small\"\n//               name=\"checkDate\"\n//               InputProps={{\n//                 style: { height: \"27px\", fontSize: \"14px\" },\n//               }}\n//               sx={{\n//                 width: \"160px\",\n//                 \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             />\n//           )}\n//           {isLoadingTransactionAccount ? (\n//             <LoadingButton loading={isLoadingTransactionAccount} />\n//           ) : (\n//             <FormControl\n//               variant=\"outlined\"\n//               size=\"small\"\n//               disabled={isDisableField}\n//               sx={{\n//                 width: \"130px\",\n//                 \".MuiFormLabel-root\": {\n//                   fontSize: \"14px\",\n//                   background: \"white\",\n//                   zIndex: 99,\n//                   padding: \"0 3px\",\n//                 },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             >\n//               <InputLabel htmlFor=\"tc\">TC</InputLabel>\n//               <OutlinedInput\n//                 inputRef={tcDateRef}\n//                 sx={{\n//                   height: \"27px\",\n//                   fontSize: \"14px\",\n//                 }}\n//                 readOnly\n//                 fullWidth\n//                 label=\"TC\"\n//                 name=\"TC_Code\"\n//                 value={state.TC_Code}\n//                 onChange={handleInputChange}\n//                 onKeyDown={(e) => {\n//                   if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                     e.preventDefault();\n//                     return openTransactionAccount(state.TC_Code);\n//                   }\n//                 }}\n//                 id=\"tc\"\n//                 endAdornment={\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       ref={reloadIDButtonRef}\n//                       disabled={isDisableField}\n//                       aria-label=\"search-client\"\n//                       color=\"secondary\"\n//                       edge=\"end\"\n//                       onClick={() => {\n//                         openTransactionAccount(state.TC_Code);\n//                       }}\n//                     >\n//                       <RestartAltIcon />\n//                     </IconButton>\n//                   </InputAdornment>\n//                 }\n//               />\n//             </FormControl>\n//           )}\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"Remarks\"\n//             size=\"small\"\n//             name=\"remarks\"\n//             value={state.remarks}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                 e.preventDefault();\n//                 if (state.code === \"1.01.10\") {\n//                   idInputRefPayTo.current?.focus()\n//                 } else {\n//                   vatRef.current?.focus()\n//                 }\n//               }\n//             }}\n//             InputProps={{\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//               inputRef: tcInputRef,\n//             }}\n//             sx={{\n//               flex: 1,\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           {state.code !== \"1.01.10\" && (\n//             <TextField\n//               disabled={isDisableField}\n//               label=\"Payto\"\n//               size=\"small\"\n//               name=\"Payto\"\n//               value={state.Payto}\n//               onChange={handleInputChange}\n//               onKeyDown={(e) => {\n//                 if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                   e.preventDefault();\n//                   return handleRowSave();\n//                 }\n//               }}\n//               InputProps={{\n//                 readOnly: true,\n//                 inputRef: paytoRef,\n//                 style: { height: \"27px\", fontSize: \"14px\" },\n//               }}\n//               sx={{\n//                 width: \"160px\",\n//                 \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             />\n//           )}\n\n//           {state.code === \"1.01.10\" && (\n//             <>\n//               {isLoadingPolicyIdClientIdRefId ? (\n//                 <LoadingButton loading={isLoadingPolicyIdClientIdRefId} />\n//               ) : (\n//                 <FormControl\n//                   variant=\"outlined\"\n//                   size=\"small\"\n//                   disabled={isDisableField}\n//                   sx={{\n//                     width: \"300px\",\n//                     \".MuiFormLabel-root\": {\n//                       fontSize: \"14px\",\n//                       background: \"white\",\n//                       zIndex: 99,\n//                       padding: \"0 3px\",\n//                     },\n//                     \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//                   }}\n//                 >\n//                   <InputLabel htmlFor=\"policy-client-Payto\">Payto</InputLabel>\n//                   <OutlinedInput\n//                     readOnly\n//                     sx={{\n//                       height: \"27px\",\n//                       fontSize: \"14px\",\n//                     }}\n//                     inputRef={idInputRefPayTo}\n//                     disabled={isDisableField}\n//                     fullWidth\n//                     label=\"Payto\"\n//                     name=\"Payto\"\n//                     value={state.Payto}\n//                     onChange={handleInputChange}\n//                     onKeyDown={(e) => {\n//                       if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                         e.preventDefault();\n//                         setIsPayToEnter(true);\n//                         return openPolicyIdClientIdRefId(state.Payto);\n//                       }\n//                     }}\n//                     id=\"policy-client-Payto\"\n//                     endAdornment={\n//                       <InputAdornment position=\"end\">\n//                         <IconButton\n//                           ref={reloadIDButtonRef}\n//                           disabled={isDisableField}\n//                           color=\"secondary\"\n//                           edge=\"end\"\n//                           onClick={() => {\n//                             openPolicyIdClientIdRefId(state.Payto);\n//                           }}\n//                         >\n//                           <RestartAltIcon />\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                   />\n//                 </FormControl>\n//               )}\n//             </>\n//           )}\n//           <FormControl\n//             size=\"small\"\n//             variant=\"outlined\"\n//             sx={{\n//               width: \"120px\",\n//               \".MuiFormLabel-root\": {\n//                 fontSize: \"14px\",\n//                 background: \"white\",\n//                 zIndex: 99,\n//                 padding: \"0 3px\",\n//               },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           >\n//             <InputLabel id=\"label-selection-reason\">Vat Type</InputLabel>\n//             <Select\n//               labelId=\"label-selection-reason\"\n//               value={state.vatType}\n//               name=\"vatType\"\n//               onChange={handleInputChange}\n//               autoWidth\n//               sx={{\n//                 height: \"27px\",\n//                 fontSize: \"14px\",\n//               }}\n//               inputRef={vatRef}\n//               disabled={isDisableField}\n\n//             >\n//               <MenuItem value=\"VAT\" onKeyDown={(e) => {\n//                 if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                   e.preventDefault();\n//                   wait(300).then(() => {\n//                     invoiceRef.current?.focus()\n//                   })\n\n//                 }\n//               }}>VAT</MenuItem>\n//               <MenuItem value={\"NON-VAT\"} onKeyDown={(e) => {\n//                 if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                   e.preventDefault();\n//                   wait(300).then(() => {\n//                     invoiceRef.current?.focus()\n//                   })\n//                 }\n//               }}>NON-VAT</MenuItem>\n//             </Select>\n//           </FormControl>\n//           <TextField\n//             disabled={isDisableField}\n//             label=\"OR/Invoice No.\"\n//             size=\"small\"\n//             name=\"invoice\"\n//             value={state.invoice}\n//             onChange={handleInputChange}\n//             onKeyDown={(e) => {\n//               if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n//                 e.preventDefault();\n//                 handleRowSave()\n//               }\n//             }}\n//             InputProps={{\n//               style: { height: \"27px\", fontSize: \"14px\" },\n//               inputRef: invoiceRef\n//             }}\n//             sx={{\n//               width: \"200px\",\n//               \".MuiFormLabel-root\": { fontSize: \"14px\" },\n//               \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//             }}\n//           />\n//           <Button\n//             disabled={isDisableField}\n//             sx={{\n//               height: \"27px\",\n//               fontSize: \"11px\",\n//             }}\n//             variant=\"contained\"\n//             startIcon={<SaveIcon sx={{ fontSize: \"18px\" }} />}\n//             onClick={() => {\n//               handleRowSave()\n//             }}\n//             color=\"primary\"\n//           >\n//             Save Row\n//           </Button>\n//         </div>\n//       </fieldset> */}\n//       {/* <div\n//         ref={refParent}\n//         style={{\n//           marginTop: \"10px\",\n//           width: \"100%\",\n//           position: \"relative\",\n//           flex: 1,\n//         }}\n//       >\n//         <Box\n//           style={{\n//             height: `${refParent.current?.getBoundingClientRect().height}px`,\n//             width: \"100%\",\n//             overflowX: \"scroll\",\n//             position: \"absolute\",\n//           }}\n//         >\n//           <Table\n//             ref={table}\n//             isLoading={\n//               loadingCashDisbursementMutate ||\n//               loadingGetSearchSelectedCashDisbursement ||\n//               isLoadingJob\n//             }\n//             columns={selectedCollectionColumns}\n//             rows={formatDebitCredit(cashDisbursement)}\n//             table_id={\"TempID\"}\n//             isSingleSelection={true}\n//             isRowFreeze={false}\n//             dataSelection={(selection, data, code) => {\n//               const rowSelected = data.filter(\n//                 (item: any) => item.TempID === selection[0]\n//               )[0];\n//               if (rowSelected === undefined || rowSelected.length <= 0) {\n//                 const resetValue = {\n//                   code: \"\",\n//                   acctName: \"\",\n//                   subAcct: \"\",\n//                   subAcctName: \"\",\n//                   IDNo: \"\",\n//                   ClientName: \"\",\n//                   credit: \"\",\n//                   debit: \"\",\n//                   TC_Code: \"\",\n//                   TC_Desc: \"\",\n//                   remarks: \"\",\n//                   vatType: \"NON-VAT\",\n//                   invoice: \"\",\n//                   checkNo: \"\",\n//                   checkDate: new Date(),\n//                 };\n//                 setNewStateValue(dispatch, { ...state, ...resetValue });\n//                 setEditTransaction({ edit: false, updateId: \"\" });\n//                 return;\n//               }\n\n//               if (code === \"Delete\" || code === \"Backspace\") {\n//                 Swal.fire({\n//                   title: `Are you sure you want to delete?`,\n//                   text: \"You won't be able to revert this!\",\n//                   icon: \"warning\",\n//                   showCancelButton: true,\n//                   confirmButtonColor: \"#3085d6\",\n//                   cancelButtonColor: \"#d33\",\n//                   confirmButtonText: \"Yes, delete it!\",\n//                 }).then((result) => {\n//                   if (result.isConfirmed) {\n//                     return setCashDisbursement((d) => {\n//                       return d.filter(\n//                         (items: any) => items.TempID !== selection[0]\n//                       );\n//                     });\n//                   }\n//                 });\n//                 return;\n//               }\n//               setNewStateValue(dispatch, {\n//                 ...rowSelected,\n//                 checkDate: new Date(rowSelected.checkDate),\n//                 sub_refNo: state.sub_refNo,\n//                 refNo: state.refNo,\n//                 dateEntry: state.dateEntry,\n//                 explanation: state.explanation,\n//                 particulars: state.particulars,\n//                 totalDebit: state.totalDebit,\n//                 totalCredit: state.totalCredit,\n//                 totalBalance: state.totalBalance,\n//               });\n//               setEditTransaction({\n//                 edit: true,\n//                 updateId: rowSelected.TempID,\n//               });\n//             }}\n//           />\n//         </Box>\n//       </div> */}\n\n//       {/* <UpwardTable\n       \n//         isLoading={loadingCashDisbursementMutate ||\n//           loadingGetSearchSelectedCashDisbursement ||\n//           isLoadingJob ||\n//           isLoadingChartAccountSearch}\n//         ref={table}\n//         rows={formatDebitCredit(cashDisbursement)}\n//         column={selectedCollectionColumns}\n//         width={width}\n//         height={height}\n//         dataReadOnly={false}\n//         onSelectionChange={(selected) => {\n//           const rowSelected = selected[0]\n//           if (selected.length > 0) {\n//             setNewStateValue(dispatch, {\n//               ...rowSelected,\n//               checkDate: new Date(rowSelected.checkDate),\n//               sub_refNo: state.sub_refNo,\n//               refNo: state.refNo,\n//               dateEntry: state.dateEntry,\n//               explanation: state.explanation,\n//               particulars: state.particulars,\n//               totalDebit: state.totalDebit,\n//               totalCredit: state.totalCredit,\n//               totalBalance: state.totalBalance,\n//             });\n//             setEditTransaction({\n//               edit: true,\n//               updateId: rowSelected.TempID,\n//             });\n//           } else {\n//             const resetValue = {\n//               code: \"\",\n//               acctName: \"\",\n//               subAcct: \"\",\n//               subAcctName: \"\",\n//               IDNo: \"\",\n//               ClientName: \"\",\n//               credit: \"\",\n//               debit: \"\",\n//               TC_Code: \"\",\n//               TC_Desc: \"\",\n//               remarks: \"\",\n//               vatType: \"NON-VAT\",\n//               invoice: \"\",\n//               checkNo: \"\",\n//               checkDate: new Date(),\n//             };\n//             setNewStateValue(dispatch, { ...state, ...resetValue });\n//             setEditTransaction({ edit: false, updateId: \"\" });\n//             return;\n//           }\n//         }}\n//         onKeyDown={(row, key) => {\n\n//           if (key === \"Delete\" || key === \"Backspace\") {\n//             const rowSelected = row[0];\n\n//             Swal.fire({\n//               title: `Are you sure you want to delete?`,\n//               text: \"You won't be able to revert this!\",\n//               icon: \"warning\",\n//               showCancelButton: true,\n//               confirmButtonColor: \"#3085d6\",\n//               cancelButtonColor: \"#d33\",\n//               confirmButtonText: \"Yes, delete it!\",\n//             }).then((result) => {\n//               if (result.isConfirmed) {\n//                 return setCashDisbursement((d: any) => {\n//                   return d.filter(\n//                     (items: any) => items.TempID !== rowSelected.TempID\n//                   );\n//                 });\n//               }\n//             });\n//             return;\n//           }\n\n//           // if (key === \"Delete\" || key === \"Backspace\") {\n//           //   const rowSelected = row[0];\n//           //   if (\n//           //     (rowSelected.Deposit_Slip && rowSelected.Deposit_Slip !== \"\") ||\n//           //     (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n//           //     (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n//           //   ) {\n//           //     return Swal.fire({\n//           //       position: \"center\",\n//           //       icon: \"warning\",\n//           //       title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n//           //       showConfirmButton: false,\n//           //       timer: 1500,\n//           //     });\n//           //   }\n//           //   const timeout = setTimeout(() => {\n//           //     Swal.fire({\n//           //       title: \"Are you sure?\",\n//           //       text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n//           //       icon: \"warning\",\n//           //       showCancelButton: true,\n//           //       confirmButtonColor: \"#3085d6\",\n//           //       cancelButtonColor: \"#d33\",\n//           //       confirmButtonText: \"Yes, delete it!\",\n//           //     }).then((result) => {\n//           //       if (result.isConfirmed) {\n//           //         return setPdcDataRows((dt) => {\n//           //           return dt.filter(\n//           //             (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n//           //           );\n//           //         });\n//           //       }\n//           //       table.current?.removeSelection();\n//           //     });\n//           //     clearTimeout(timeout);\n//           //   }, 250);\n//           // }\n//         }}\n//         onRightClick={(rowSelected, event) => {\n//           console.log(rowSelected)\n//           event.stopPropagation()\n//           setPosition({ x: event.pageX, y: event.pageY });\n//           setModalVisible(true);\n//           setRigthClickSelected(rowSelected)\n//         }}\n//         inputsearchselector=\".manok\"\n//       /> */}\n//       {/* <TableWithDynamicColumns\n//         cashDisbursement={cashDisbursement}\n//         setCashDisbursement={setCashDisbursement}\n//         columns={columns.filter((d) => !d.hide)}\n//         newRowData={newRowData}\n//         setNewRowData={setNewRowData}\n//         editCell={editCell}\n//         setEditCell={setEditCell}\n//         updateRowData={updateRowData}\n//         setUpdateRowData={setUpdateRowData}\n//         onRowKeyEvent={(e: any, key: string, addRow: CallableFunction) => {\n//           if (key === 'code') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               openChartAccountSearch(e.target.value)\n//             }\n//           }\n//           else if (key === 'ClientName') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               openPolicyIdClientIdRefId(e.target.value)\n//             }\n//           }\n//           else if (key === 'TC_Code') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               openTransactionAccount(e.target.value)\n//             }\n//           }\n//           else if (key === 'Payto') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               openPolicyIdPayTo(e.target.value)\n//             }\n//           }\n//           else if (key === 'acctName') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#subAcctName`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n//           else if (key === 'subAcctName') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#ClientName`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n//           else if (key === 'debit') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#credit`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n//           else if (key === 'credit') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               if (newRowData.code !== \"1.01.10\") {\n//                 const nextInput = document.querySelector(`#TC_Code`) as HTMLInputElement;\n//                 if (nextInput) {\n//                   nextInput.focus(); // Move focus to the next input\n//                 }\n//               } else {\n//                 const nextInput = document.querySelector(`#checkNo`) as HTMLInputElement;\n//                 if (nextInput) {\n//                   nextInput.focus(); // Move focus to the next input\n//                 }\n//               }\n\n//             }\n//           }\n//           else if (key === 'checkNo') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#checkDate`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n//           else if (key === 'checkDate') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#TC_Code`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n\n//           else if (key === 'remarks') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n\n//               if (newRowData.code !== \"1.01.10\") {\n//                 const nextInput = document.querySelector(`#vatType`) as HTMLInputElement;\n//                 if (nextInput) {\n//                   nextInput.focus(); // Move focus to the next input\n//                 }\n//               } else {\n//                 const nextInput = document.querySelector(`#Payto`) as HTMLInputElement;\n//                 if (nextInput) {\n//                   nextInput.focus(); // Move focus to the next input\n//                 }\n//               }\n\n//             }\n//           }\n//           else if (key === 'vatType') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               const nextInput = document.querySelector(`#invoice`) as HTMLInputElement;\n//               if (nextInput) {\n//                 nextInput.focus(); // Move focus to the next input\n//               }\n//             }\n//           }\n//           else if (key === 'invoice') {\n//             if (e.code === 'NumpadEnter' || e.code === 'Enter') {\n//               addRow()\n//             }\n//           }\n//         }}\n//         defaultValue={defaultValue}\n//         readOnlyLogic={(column: any) => {\n//           return column.key === 'acctName' || column.key === 'subAcctName'\n//         }}\n//         disableLogic={(column: any) => {\n//           return (column.key === 'checkNo' && newRowData.code !== \"1.01.10\") ||\n//             (column.key === 'checkDate' && newRowData.code !== \"1.01.10\") ||\n//             (column.key === 'Payto' && newRowData.code !== \"1.01.10\")\n//         }}\n//       /> */}\n\n//       <DataGridView\n//         rows={cashDisbursement}\n//         column={columns}\n//         onSave={handleSave}\n//         defaultValue={defaultValue}\n//       />\n//       <Modal open={openJobs} onClose={() => setOpenJobs(false)}>\n//         <Box\n//           sx={{\n//             position: \"absolute\" as \"absolute\",\n//             top: \"50%\",\n//             left: \"50%\",\n//             transform: \"translate(-50%, -50%)\",\n//             width: 470,\n//             bgcolor: \"background.paper\",\n//             p: 4,\n//           }}\n//         >\n//           <IconButton\n//             style={{\n//               position: \"absolute\",\n//               top: \"10px\",\n//               right: \"10px\",\n//             }}\n//             aria-label=\"search-client\"\n//             onClick={() => setOpenJobs(false)}\n//           >\n//             <CloseIcon />\n//           </IconButton>\n//           <Typography\n//             id=\"modal-modal-title\"\n//             variant=\"h6\"\n//             component=\"h2\"\n//             sx={{ marginBottom: \"20px\" }}\n//           >\n//             Jobs\n//           </Typography>\n//           <div\n//             style={{\n//               width: \"400px\",\n//             }}\n//           >\n//             <div\n//               style={{\n//                 width: \"100%\",\n//                 display: \"flex\",\n//                 marginBottom: \"10px\",\n//                 justifyContent: \"space-between\",\n//                 alignItems: \"center\",\n//               }}\n//             >\n//               <LocalizationProvider dateAdapter={AdapterDateFns}>\n//                 <DatePicker\n//                   sx={{\n//                     width: \"200px\",\n//                     \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//                   }}\n//                   slotProps={{\n//                     textField: {\n//                       size: \"small\",\n//                       name: \"\",\n//                       InputLabelProps: {\n//                         style: {\n//                           fontSize: \"14px\",\n//                         },\n//                       },\n//                       InputProps: {\n//                         style: { height: \"27px\", fontSize: \"14px\" },\n//                       },\n//                     },\n//                   }}\n//                   label={\"Transaction Date: \"}\n//                   views={[\"month\", \"year\"]}\n//                   value={state.jobTransactionDate}\n//                   onChange={(value) => {\n//                     dispatch({\n//                       type: \"UPDATE_FIELD\",\n//                       field: \"jobTransactionDate\",\n//                       value: value,\n//                     });\n//                   }}\n//                 />\n//               </LocalizationProvider>\n//               <FormControlLabel\n//                 sx={{\n//                   height: \"30px\",\n//                   \"& .MuiTypography-root\": {\n//                     fontSize: \"14px\",\n//                   },\n//                 }}\n//                 control={\n//                   <Checkbox\n//                     size=\"small\"\n//                     checked={state.jobAutoExp}\n//                     onChange={(e) => {\n//                       dispatch({\n//                         type: \"UPDATE_FIELD\",\n//                         field: \"jobAutoExp\",\n//                         value: !state.jobAutoExp,\n//                       });\n//                     }}\n//                   />\n//                 }\n//                 label=\"Auto Explanation\"\n//               />\n//             </div>\n//             <FormControl\n//               fullWidth\n//               size=\"small\"\n//               variant=\"outlined\"\n//               sx={{\n//                 \".MuiFormLabel-root\": {\n//                   fontSize: \"14px\",\n//                   background: \"white\",\n//                   zIndex: 99,\n//                   padding: \"0 3px\",\n//                 },\n//                 \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n//               }}\n//             >\n//               <InputLabel id=\"label-selection-job-type\">Type of Job</InputLabel>\n//               <Select\n//                 labelId=\"label-selection-job-type\"\n//                 value={state.jobType}\n//                 name=\"jobType\"\n//                 onChange={handleInputChange}\n//                 autoWidth\n//                 sx={{\n//                   height: \"27px\",\n//                   fontSize: \"14px\",\n//                 }}\n//               >\n//                 <MenuItem value={\"\"}> </MenuItem>\n//                 <MenuItem value={\"0\"}>Reversal of Accrued Interest </MenuItem>\n//                 <MenuItem value={\"1\"}>\n//                   {\" \"}\n//                   Income Recognition & Accrual of Interest\n//                 </MenuItem>\n//                 <MenuItem value={\"2\"}>Penalty Charges</MenuItem>\n//                 <MenuItem value={\"3\"}>Penalty Income</MenuItem>\n//                 <MenuItem value={\"4\"}>RPT Transaction (NIL-HN)</MenuItem>\n//                 <MenuItem value={\"5\"}>RPT Transaction (AMIFIN)</MenuItem>\n//                 <MenuItem value={\"6\"}>RPT Income</MenuItem>\n//                 <MenuItem value={\"7\"}>Monthly Accrual Expenses</MenuItem>\n//                 <MenuItem value={\"8\"}>Monthly Accrual Income</MenuItem>\n//                 <MenuItem value={\"9\"}>\n//                   Production (Milestone Guarantee)\n//                 </MenuItem>\n//                 <MenuItem value={\"10\"}>\n//                   Production (Liberty Insurance Co.)\n//                 </MenuItem>\n//                 <MenuItem value={\"11\"}>Production (Federal Phoenix)</MenuItem>\n//               </Select>\n//             </FormControl>\n//           </div>\n\n//           <div\n//             style={{\n//               display: \"flex\",\n//               columnGap: \"30px\",\n//               alignItems: \"flex-end\",\n//               marginTop: \"20px\",\n//             }}\n//           >\n//             <LoadingButton\n//               loading={isLoadingJob}\n//               color=\"success\"\n//               variant=\"contained\"\n//               onClick={() => mutateJob(state)}\n//             >\n//               Create Job\n//             </LoadingButton>\n//             <Button\n//               // ref={checkModalSaveButton}\n//               color=\"error\"\n//               variant=\"contained\"\n//               onClick={() => setOpenJobs(false)}\n//             >\n//               Cancel\n//             </Button>\n//           </div>\n//         </Box>\n//       </Modal>\n//       {ModalChartAccountSearch}\n//       {ModalPolicyIdClientIdRefId}\n//       {ModalTransactionAccount}\n//       {ModalSearchCashDisbursement}\n//       {ModalPolicyIdPayTo}\n//       {modalVisible && (\n//         <div\n//           style={{\n//             position: 'absolute',\n//             top: position.y,\n//             left: position.x,\n//             backgroundColor: 'white',\n//             padding: '10px',\n//             border: '1px solid black',\n//             borderRadius: '4px',\n//             boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n//             zIndex: 1000,\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             rowGap: \"5px\"\n//           }}\n//         >\n//           <Button\n//             sx={{\n//               height: \"22px\",\n//               fontSize: \"11px\",\n//             }}\n//             variant=\"contained\"\n//             onClick={() => {\n\n//               if (rigthClickSelected) {\n//                 Swal.fire({\n//                   title: `Are you sure you want to delete?`,\n//                   text: \"You won't be able to revert this!\",\n//                   icon: \"warning\",\n//                   showCancelButton: true,\n//                   confirmButtonColor: \"#3085d6\",\n//                   cancelButtonColor: \"#d33\",\n//                   confirmButtonText: \"Yes, delete it!\",\n//                 }).then((result) => {\n//                   if (result.isConfirmed) {\n//                     setCashDisbursement((d: any) => {\n//                       return d.filter(\n//                         (items: any) => items.TempID !== rigthClickSelected.TempID\n//                       );\n//                     });\n//                     setRigthClickSelected(null)\n//                   }\n//                 });\n//               }\n//             }} >Delete Row</Button>\n//           {(rigthClickSelected && rigthClickSelected.code === '1.01.10') &&\n//             <Button variant=\"contained\"\n//               sx={{\n//                 height: \"22px\",\n//                 fontSize: \"11px\",\n//               }}\n//               onClick={handleClickPrintCheck}>Print</Button>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// const DataGridView = ({\n//   rows,\n//   column,\n//   onSave,\n//   defaultValue\n// }: any) => {\n//   const [pageNumber, setPageNumber] = useState(0)\n//   const [columns, setColumns] = useState(column.filter((itm: any) => !itm.hide));\n//   const [hoveredColumn, setHoveredColumn] = useState(null);\n\n//   const divRef = useRef<HTMLDivElement>(null);\n\n//   const pages = useMemo(() => {\n//     let transformed: any = []\n\n//     if (rows.length > 0) {\n//       transformed = rows.map((item: any, index: number) => ({\n//         RowIndex: index,\n//         RowValue: { ...item },\n//       }));\n//     }\n\n//     const lasttransformed = formatArrayIntoChunks(transformed, 100)\n//     return lasttransformed;\n//   }, [rows])\n\n//   // State to track which row is in edit mode\n//   const [editRowIndex, setEditRowIndex] = useState(null);\n//   // State to track temporary input values for the editable row\n//   const [editValues, setEditValues] = useState<any>({})\n\n\n//   // Handle input change\n//   const handleInputChange = (key: any, value: any) => {\n//     setEditValues((prevValues: any) => ({ ...prevValues, [key]: value }));\n//   };\n//   // Handle enabling edit mode for a row\n//   const handleEditRow = (rowIndex: any) => {\n//     setEditRowIndex(rowIndex);\n//     setEditValues(pages[pageNumber][rowIndex].RowValue); // Pre-fill the edit values\n//   };\n//   // Revert value on blur\n//   const handleBlur = (rowIndex: any) => {\n//     setEditValues((prevEditValues: any) => ({\n//       ...prevEditValues,\n//       [rowIndex]: { ...pages[pageNumber][rowIndex].RowValue },\n//     }));\n//   };\n//   const handleSaveRow = (rowIndex: any) => {\n//     const rowData = { ...editValues };\n//     if (rowData) {\n//       pages[pageNumber][rowIndex].RowValue = rowData; // Update the existing row with new values\n//       console.log('Updated data:', pages[pageNumber][rowIndex]);\n//       onSave(rowData); // Call the provided onSave function\n//       setEditRowIndex(null); // Exit edit mode\n//     }\n//   };\n\n//   const startResize = (index: any, e: any) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n\n//     const startX = e.clientX;\n//     const startWidth = columns[index].width;\n\n//     const doDrag = (moveEvent: any) => {\n//       const newWidth = startWidth + (moveEvent.clientX - startX);\n//       const updatedColumns = [...columns];\n//       updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\n//       setColumns(updatedColumns);\n//     };\n\n//     const stopDrag = () => {\n//       document.removeEventListener(\"mousemove\", doDrag);\n//       document.removeEventListener(\"mouseup\", stopDrag);\n//     };\n\n//     document.addEventListener(\"mousemove\", doDrag);\n//     document.addEventListener(\"mouseup\", stopDrag);\n//   };\n//   const handleMouseEnter = (index: any) => {\n//     setHoveredColumn(index); // Set the hovered column index\n//   };\n//   const handleMouseLeave = () => {\n//     setHoveredColumn(null); // Reset hovered column index\n//   };\n//   function formatArrayIntoChunks(arr: Array<any>, chunkSize = 100) {\n//     let result = [];\n\n//     for (let i = 0; i < arr.length; i += chunkSize) {\n//       // Use slice to create chunks of 'chunkSize'\n//       result.push(arr.slice(i, i + chunkSize));\n//     }\n//     return result;\n//   }\n\n\n//   console.log(pages[pageNumber])\n\n//   return (\n//     <div className=\"table-frame-color\">\n//       <div\n//         style={{\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           width: `calc(100vw - 40px)`,\n//           height: `300px`,\n//           minHeight: \"270px\"\n//         }}\n//         className=\"table-frame\"\n//       >\n//         <div className=\"table-panel\">\n//           <div ref={divRef} className={`grid-container`} tabIndex={-1}>\n//             <div\n//               className=\"grid-row grid-header\"\n//               style={{\n//                 position: \"sticky\",\n//                 zIndex: \"10\",\n//                 top: \"-1px\",\n//                 background: \"white\",\n//               }}\n//             >\n//               {columns.map((col: any, index: number) => (\n//                 <div\n//                   key={index}\n//                   className={`grid-cell header-cell ${hoveredColumn === index ? `highlight-column` : \"\"\n//                     }`} // Add the class if hovered\n//                   style={{ width: col.width, height: \"20px\", }}\n//                 >\n//                   <input\n//                     style={{ fontWeight: \"bold\" }}\n//                     defaultValue={col.label}\n//                     readOnly\n//                     onChange={(e) => { }}\n//                   />\n//                   <div\n//                     className=\"resize-handle\"\n//                     onMouseDown={(e) => startResize(index, e)}\n//                     onMouseEnter={(e) => {\n//                       e.preventDefault();\n//                       handleMouseEnter(index);\n//                     }} // On hover\n//                     onMouseLeave={(e) => {\n//                       e.preventDefault();\n//                       handleMouseLeave();\n//                     }} // On mouse leave\n//                   />\n//                 </div>\n//               ))}\n//             </div>\n//             {\n//               pages[pageNumber]?.map((row: any, rowIndex: number) => {\n//                 return (\n//                   <div key={rowIndex} className={`grid-row row-${rowIndex}`}>\n//                     {\n//                       columns.map((column: any, idx: number) => {\n//                         return (\n//                           <div\n//                             key={column.key}\n//                             className=\"grid-cell\"\n//                             style={{ width: column.width, padding: '8px' }}>\n//                             {editRowIndex === row.RowIndex ? (\n//                               // Editable fields when in edit mode\n//                               <input\n//                                 type={column.type === 'number' ? 'number' : 'text'}\n//                                 value={editValues[column.key] || ''} // Display current value or empty\n//                                 onChange={(e) => handleInputChange(column.key, e.target.value)} // Handle input changes\n//                               />\n//                             ) : (\n//                               // Read-only display when not in edit mode\n//                               <span>{row.RowValue[column.key]}</span>\n//                             )}\n//                           </div>\n\n//                           // <div\n//                           //   key={idx}\n//                           //   className=\"grid-cell\"\n//                           //   style={{\n//                           //     width: itm.width,\n//                           //     fontSize: \"12px\",\n//                           //     padding: \"0 5px\"\n//                           //   }}\n//                           // >\n//                           //   <input\n//                           //     key={idx}\n//                           //     type=\"text\"\n//                           //     value={editValues[row.RowIndex]?.[column.key] || ''} // Display the current value\n//                           //     // value={row.RowValue[itm.key]}\n//                           //     onChange={(e) => {\n//                           //       handleInputChange(row.RowIndex, itm.key, e.target.value)\n//                           //     }}\n//                           //     onKeyPress={(e) => handleKeyPress(e, row.RowIndex)}\n//                           //     onBlur={() => handleBlur(row.RowIndex)}\n//                           //   />\n//                           // </div>\n//                         )\n//                       })\n//                     }\n//                     {row.RowIndex !== pages[pageNumber].length - 1 && (\n//                       <button onClick={() => handleEditRow(row.RowIndex)}>Edit</button>\n//                     )}\n//                     {/* Save button when in edit mode */}\n//                     {editRowIndex === row.RowIndex && (\n//                       <button onClick={() => handleSaveRow(row.RowIndex)}>Save</button>\n//                     )}\n//                   </div>)\n//               })\n//             }\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n// const TableWithDynamicColumns = ({\n//   cashDisbursement,\n//   setCashDisbursement,\n//   columns,\n//   defaultValue,\n//   onRowKeyEvent,\n//   newRowData,\n//   setNewRowData,\n//   readOnlyLogic,\n//   disableLogic,\n//   editCell,\n//   setEditCell\n// }: any) => {\n\n//   // Function to handle input changes in the regular rows\n//   const handleInputChange = (e: any, rowId: any, columnKey: any) => {\n//     const { value } = e.target;\n//     setCashDisbursement((prevData: any) =>\n//       prevData.map((row: any) =>\n//         row.TempID === rowId ? { ...row, [columnKey]: value } : row\n//       )\n//     );\n//   };\n\n//   // Function to handle input changes in the extra row\n//   const handleNewRowChange = (e: any) => {\n//     const { name, value } = e.target;\n//     setNewRowData((prevData: any) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const addRow = () => {\n//     let TempID = ''\n//     if (cashDisbursement.length > 0) {\n//       TempID = String(parseInt(cashDisbursement[cashDisbursement.length - 1].TempID) + 1).padStart(3, '0')\n//     } else {\n//       TempID = '1'.padStart(3, '0')\n//     }\n//     const newRow = {\n//       ...newRowData,\n//       TempID\n\n//     };\n//     setCashDisbursement((prevData: any) => [...prevData, newRow]);\n\n//     // Reset the new row data\n//     setNewRowData(defaultValue);\n//     setEditCell({ TempID: null });\n\n//   };\n\n//   const handleDoubleClick = (TempID: any) => {\n//     setEditCell({ TempID });\n//   };\n\n//   console.log(cashDisbursement)\n\n//   return (\n//     <div>\n//       <button onClick={addRow}>Add Row</button>\n//       <table border={1} >\n//         <thead>\n//           <tr>\n//             {columns.map((column: any) => (\n//               <th style={{\n//                 width: `${column.width}`\n//               }} key={column.key}>{column.label}</th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {cashDisbursement.map((row: any) => (\n//             <tr key={row.TempID}>\n//               {columns.map((column: any) => (\n//                 <td key={column.key} style={{ height: \"20px\" }} >\n//                   {column.type === 'text' && (\n//                     <input\n//                       // disabled={disableLogic(column)}\n//                       // readOnly={readOnlyLogic(column)}\n//                       id={editCell.TempID === row.TempID ? column.key : \"\"}\n//                       type=\"text\"\n//                       name={column.key}\n//                       value={row[column.key]}\n//                       onChange={(e) => handleInputChange(e, row.TempID, column.key)}\n//                       onKeyDown={(e) => {\n//                         onRowKeyEvent(e, column.key, addRow)\n//                       }}\n//                       onDoubleClick={() => {\n//                         handleDoubleClick(row.TempID)\n//                       }}\n//                       style={{\n//                         width: `${column.width}`,\n//                         height: \"auto\"\n//                       }}\n//                     />\n//                   )}\n//                   {column.type === 'number' && (\n//                     <TextFormatedInput\n\n//                       onChange={(e) => {\n//                         handleInputChange(e, row.TempID, column.key)\n//                       }}\n//                       label={{\n//                         title: \"\",\n//                       }}\n//                       input={{\n//                         // disabled: disableLogic(column),\n//                         // readOnly: readOnlyLogic(column),\n//                         id: editCell.TempID === row.TempID ? column.key : \"\",\n//                         name: column.key,\n//                         value: row[column.key],\n//                         type: \"text\",\n//                         style: {\n//                           width: `${column.width}`,\n//                           height: \"auto\"\n//                         },\n//                         onKeyDown: (e: any) => {\n//                           onRowKeyEvent(e, column.key, addRow)\n//                         },\n//                         onDoubleClick: () => {\n//                           handleDoubleClick(row.TempID)\n//                         }\n//                       }}\n//                     />\n//                   )}\n//                   {column.type === 'select' && (\n//                     <select\n//                       onChange={e => handleInputChange(e, row.TempID, column.key)}\n//                       style={{\n//                         width: `${column.width}`\n//                       }}\n\n//                       // disabled={disableLogic(column)}\n//                       id={editCell.TempID === row.TempID ? column.key : \"\"}\n//                       name={column.key}\n//                       value={row[column.key]}\n//                       onKeyDown={(e) => {\n//                         onRowKeyEvent(e, column.key, addRow)\n//                       }}\n//                       onDoubleClick={() => {\n//                         handleDoubleClick(row.TempID)\n//                       }}\n//                     >\n//                       {column.options.map((option: any) => (\n//                         <option key={option} value={option}>\n//                           {option}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   )}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//           <tr>\n//             {columns.map((column: any) => (\n//               <td key={column.key} style={{ height: \"auto\" }}>\n//                 {column.type === 'text' && (\n//                   <input\n//                     onDoubleClick={() => {\n//                       handleDoubleClick('000-99123')\n//                     }}\n//                     disabled={disableLogic(column)}\n//                     readOnly={readOnlyLogic(column)}\n//                     id={editCell.TempID ? \"\" : column.key}\n//                     type=\"text\"\n//                     name={column.key}\n//                     value={newRowData[column.key]}\n//                     onChange={handleNewRowChange}\n//                     onKeyDown={(e) => {\n//                       onRowKeyEvent(e, column.key, addRow)\n//                     }}\n\n//                   />\n//                 )}\n//                 {column.type === 'number' && (\n//                   <TextFormatedInput\n//                     onChange={(e) => {\n//                       handleNewRowChange(e)\n//                     }}\n//                     label={{\n//                       title: \"\",\n//                     }}\n//                     input={{\n//                       disabled: disableLogic(column),\n//                       readOnly: readOnlyLogic(column),\n//                       id: editCell.TempID ? \"\" : column.key,\n//                       name: column.key,\n//                       value: newRowData[column.key],\n//                       type: \"text\",\n//                       style: { flex: 1 },\n//                       onKeyDown: (e: any) => {\n//                         onRowKeyEvent(e, column.key, addRow)\n//                       },\n//                       onDoubleClick: () => {\n//                         handleDoubleClick('000-99123')\n//                       }\n//                     }}\n\n//                   />\n//                 )}\n//                 {column.type === 'select' && (\n//                   <select\n//                     disabled={disableLogic(column)}\n//                     id={editCell.TempID ? \"\" : column.key}\n//                     name={column.key}\n//                     value={newRowData[column.key]}\n//                     onChange={handleNewRowChange}\n//                     onKeyDown={(e) => {\n//                       onRowKeyEvent(e, column.key, addRow)\n//                     }}\n//                     onDoubleClick={() => {\n//                       handleDoubleClick('000-99123')\n//                     }}\n\n//                   >\n//                     {column.options.map((option: any) => (\n//                       <option key={option} value={option}>\n//                         {option}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 )}\n//               </td>\n//             ))}\n//           </tr>\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// function setNewStateValue(dispatch: any, obj: any) {\n//   Object.entries(obj).forEach(([field, value]) => {\n//     dispatch({ type: \"UPDATE_FIELD\", field, value });\n//   });\n// }\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8 0-1.85.63-3.55 1.69-4.9L16.9 18.31C15.55 19.37 13.85 20 12 20zm6.31-3.1L7.1 5.69C8.45 4.63 10.15 4 12 4c4.42 0 8 3.58 8 8 0 1.85-.63 3.55-1.69 4.9z\"\n}), 'NotInterested');\nexports.default = _default;","const deepOrange = {\n  50: '#fbe9e7',\n  100: '#ffccbc',\n  200: '#ffab91',\n  300: '#ff8a65',\n  400: '#ff7043',\n  500: '#ff5722',\n  600: '#f4511e',\n  700: '#e64a19',\n  800: '#d84315',\n  900: '#bf360c',\n  A100: '#ff9e80',\n  A200: '#ff6e40',\n  A400: '#ff3d00',\n  A700: '#dd2c00'\n};\nexport default deepOrange;"],"names":["initialState","sub_refNo","refNo","dateEntry","format","Date","explanation","particulars","totalDebit","totalCredit","totalBalance","jobAutoExp","jobTransactionDate","jobType","search","cashMode","reducer","state","action","type","_objectSpread","_defineProperty","field","value","columns","key","label","width","options","hide","headerName","CashDisbursement","_queryFn","_mutationFn","_mutationFn2","_mutationFn3","_mutationFn4","_useContext","useContext","AuthContext","myAxios","user","_useReducer","useReducer","_useReducer2","_slicedToArray","dispatch","refNoRef","useRef","dateRef","expRef","particularRef","IdsSearchInput","chartAccountSearchInput","_useState","useState","_useState2","showDialog","setShowDialog","_useState3","_useState4","cashDMode","setCashDMode","_useState5","_useState6","data","setData","_useState7","_useState8","rowEdited","setRowEdited","_useState9","_useState10","isEdited","setIsEdited","_useQuery","useQuery","queryKey","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","refetchOnWindowFocus","onSuccess","response","generatedId","id","loadingGeneralJournalGenerator","isLoading","refetchGeneralJournalGenerator","refetch","_useQueryModalTable","useQueryModalTable","link","url","queryUrlName","flex","uniqueId","responseDataKey","onSelected","selectedRowData","RowIndex","Object","keys","d","map","itm","includes","code","Acct_Code","acctName","Acct_Title","wait","then","input","document","querySelector","focus","closeChartAccountSearch","searchRef","ModalChartAccountSearch","ModalComponent","openChartAccountSearch","openModal","isLoadingChartAccountSearch","closeModal","_useQueryModalTable2","ClientName","Name","IDNo","subAcct","sub_account","subAcctName","ShortName","address","closePolicyIdClientIdRefId","ModalPolicyIdClientIdRefId","openPolicyIdClientIdRefId","isLoadingPolicyIdClientIdRefId","_useQueryModalTable3","TC_Code","Code","TC_Desc","Description","closeTransactionAccount","ModalTransactionAccount","openTransactionAccount","isLoadingTransactionAccount","_useQueryModalTable4","Payto","closePolicyIdPayTo","ModalPolicyIdPayTo","openPolicyIdPayTo","isLoadingPolicyIdPayTo","_useMutation","useMutation","mutationKey","mutationFn","_x","_callee2","variable","_context2","post","res","selected","selectedCashDisbursement","_selected$","SearchData","idx","credit","parseFloat","replace","toLocaleString","minimumFractionDigits","maximumFractionDigits","debit","checkDate","getSearchSelectedCashDisbursement","mutate","loadingGetSearchSelectedCashDisbursement","_useQueryModalTable5","Source_No","closeSearchCashDisbursement","onCloseFunction","ModalSearchCashDisbursement","openSearchCashDisbursement","isLoadingSearchCashDisbursement","_useMutation2","_x2","_callee3","_context3","success","setNewStateValue","defaultValue","reduce","a","b","Swal","position","icon","title","message","timer","addCashDisbursementMutate","loadingCashDisbursementMutate","_useMutation3","_x3","_callee4","_context4","mutateVoidCashDisbursement","loadingVoidCashDisbursement","_useMutation4","_x4","_callee5","_context5","console","log","flushSync","localStorage","removeItem","setItem","JSON","stringify","print","PrintTable","PrintPayeeDetails","datakey","header","department","window","open","mutateOnPrint","isLoadingOnPrint","useEffect","length","_data","values","item","deb","isNaN","cred","isDisableField","_jsx","children","_jsxs","MyDialog","onConfirmed","NewRowIndex","String","parseInt","dd","_toConsumableArray","setTimeout","AddRow","onDeclined","onClose","style","display","alignItems","columnGap","LoadingButton","loading","TextField","size","name","onKeyDown","e","preventDefault","target","InputProps","height","fontSize","sx","top","Button","variant","startIcon","AddIcon","onClick","color","disabled","_expRef$current","current","cashDisbursement","filter","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","hasSelected","saveCondfirmationAlert","isConfirm","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","background","deepOrange","NotInterestedIcon","backgroundColor","grey","marginBottom","border","borderRadius","marginTop","gap","padding","flexDirection","TextInput","fontWeight","readOnly","_dateRef$current","inputRef","_expRef$current2","onChange","_particularRef$curren","TextAreaInput","textarea","rows","_inputRef","textAlign","margin","justifyContent","Table","mode","handleRowSave","alert","vatType","taxableamt","newRowValue","inputtax","checkNo","remarks","invoice","TempID","BranchCode","addres","index","newRow","updatedData","slice","i","insertRowAtIndex","_ref14","_GoToNextRow","_SaveRow","_ref17","_pages$pageNumber","__columns","inputsearchselector","_useState11","_useState12","rigthClickSelected","setRigthClickSelected","_useState13","_useState14","modalVisible","setModalVisible","_useState15","x","y","_useState16","setPosition","_useState17","_useState18","pages","setPages","_useState19","_useState20","pageNumber","setPageNumber","_useState21","_useState22","hoveredColumn","setHoveredColumn","_useState23","_useState24","selectedRows","setSelectedRows","divRef","_useState25","_useState26","setColumns","_columns","handleInputchange","col","onBlur","row","GoToNextRow","_x5","_callee6","newRowIndex","nextRow","_context6","entries","toString","SaveRow","_x6","_x7","_callee7","LastRowIndex","_context7","addNewRow","useCallback","prevData","onColumnEnter","_x8","_x9","_x10","_x11","_x12","_callee8","colIdx","_input4","_input5","_keys","_context8","_pages","arr","chunkSize","undefined","push","formatArrayIntoChunks","innerWidth","innerHeight","stopPropagation","prevIndex","_row$querySelector","newPrevIndex","scrollIntoView","block","behavior","tagName","divInput","_row$querySelector2","handleKeyDown","className","minHeight","ref","tabIndex","zIndex","onMouseDown","startX","clientX","startWidth","doDrag","moveEvent","newWidth","updatedColumns","addEventListener","stopDrag","removeEventListener","startResize","onMouseEnter","handleMouseEnter","onMouseLeave","rowIndex","colIndex","TextFormatedInput","SelectInput","select","datasource","onDoubleClick","doubleClick","onContextMenu","event","pageX","pageY","handleRightClick","Pagination","count","left","boxShadow","rowGap","_ref18","confirmButtonRef","cancelButtonRef","_confirmButtonRef$cur","_Fragment","transform","right","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","textTransform","_cancelButtonRef$curr","_confirmButtonRef$cur2","bottom","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","A100","A200","A400","A700"],"sourceRoot":""}