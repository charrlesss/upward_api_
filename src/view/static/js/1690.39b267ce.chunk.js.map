{"version":3,"file":"static/js/1690.39b267ce.chunk.js","mappings":"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","sources":["components/DataGridViewReact.tsx","components/UpwardFields.tsx","lib/executeQueryFromClient.ts"],"sourcesContent":["import {\r\n    useState, useRef,\r\n    forwardRef, useEffect,\r\n    useImperativeHandle,\r\n\r\n} from \"react\";\r\nimport useExecuteQueryFromClient from \"../lib/executeQueryFromClient\";\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { TextInput } from \"./UpwardFields\";\r\nimport { wait } from \"../lib/wait\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nexport const DataGridViewReact = forwardRef(({\r\n    columns,\r\n    rows = [],\r\n    height = \"400px\",\r\n    getSelectedItem,\r\n    onKeyDown,\r\n    disbaleTable = false,\r\n    isTableSelectable = true,\r\n    containerStyle,\r\n    focusElementOnMaxTop\r\n}: any, ref) => {\r\n    const parentElementRef = useRef<any>(null)\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null)\r\n    const [data, setData] = useState([])\r\n    const [column, setColumn] = useState([])\r\n    const [selectedRow, setSelectedRow] = useState<any>(0)\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<any>(null)\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0)\r\n\r\n    useEffect(() => {\r\n        if (columns.length > 0) {\r\n            setColumn(columns.filter((itm: any) => !itm.hide))\r\n        }\r\n    }, [columns])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        checkNoIsExist: (checkNo: string) => {\r\n            return data.some((subArray: any) => subArray[2] === checkNo);\r\n        },\r\n        selectedRow: () => selectedRow,\r\n        getData: () => {\r\n            const newData = [...data];\r\n            return newData\r\n        },\r\n        setData: (newData: any) => {\r\n            setData(newData)\r\n        },\r\n        getColumns: () => {\r\n            return columns\r\n        },\r\n        resetTable: () => {\r\n            setData([])\r\n            setSelectedRow(0)\r\n            setSelectedRowIndex(null)\r\n        },\r\n        getSelectedRow: () => {\r\n            return selectedRowIndex\r\n        },\r\n        setSelectedRow: (value: any) => {\r\n            return setSelectedRowIndex(value)\r\n        },\r\n        _setSelectedRow: (value: any) => {\r\n            return setSelectedRow(value)\r\n        },\r\n        setDataFormated: (newData: any) => {\r\n            setData(newData.map((itm: any) => {\r\n                return columns.map((col: any) => itm[col.key])\r\n            }))\r\n        },\r\n        getDataFormatted: () => {\r\n            const newData = [...data];\r\n            const newDataFormatted = newData.map((itm: any) => {\r\n                let newItm = {\r\n                    Check_No: itm[0],\r\n                    Check_Date: itm[1],\r\n                    Check_Amnt: itm[2],\r\n                    BankName: itm[3],\r\n                    Branch: itm[4],\r\n                    Check_Remarks: itm[5],\r\n                    Deposit_Slip: itm[6],\r\n                    DateDeposit: itm[7],\r\n                    OR_No: itm[8],\r\n                    BankCode: itm[9]\r\n\r\n                }\r\n                return newItm\r\n            })\r\n\r\n            return newDataFormatted\r\n        },\r\n        getElementBody: () => tbodyRef.current,\r\n        getParentElement: () => parentElementRef.current\r\n    }))\r\n\r\n\r\n    return (\r\n        <div\r\n            ref={parentElementRef}\r\n            style={{\r\n                width: \"100%\",\r\n                height,\r\n                overflow: \"auto\",\r\n                position: \"relative\",\r\n                pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n                border: disbaleTable ? \"2px solid #8c8f8e\" : '2px solid #c0c0c0',\r\n                boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n                ...containerStyle,\r\n                background: \"#dcdcdc\"\r\n            }}\r\n\r\n        >\r\n            <div style={{ position: \"absolute\", width: `${totalRowWidth}px`, height: \"auto\" }}>\r\n                <table\r\n                    id=\"upward-cutom-table\"\r\n                    style={{\r\n                        borderCollapse: \"collapse\",\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                        background: \"#dcdcdc\"\r\n                    }}>\r\n                    <thead >\r\n                        <tr>\r\n                            <th style={{\r\n                                width: '30px',\r\n                                border: \"none\",\r\n                                position: \"sticky\",\r\n                                top: 0,\r\n                                zIndex: 1,\r\n                                background: \"#f0f0f0\",\r\n\r\n                            }}\r\n                            >\r\n\r\n                            </th>\r\n                            {\r\n                                column.map((colItm: any, idx: number) => {\r\n                                    return (\r\n                                        <th\r\n                                            key={idx}\r\n                                            style={{\r\n                                                width: colItm.width,\r\n                                                borderRight: \"1px solid #e2e8f0\",\r\n                                                position: \"sticky\",\r\n                                                top: 0,\r\n                                                zIndex: 1,\r\n                                                background: \"#f0f0f0\",\r\n                                                fontSize: \"12px\",\r\n                                                padding: \"0px 5px\",\r\n                                                textAlign: colItm.type === 'number' ? \"center\" : \"left\"\r\n\r\n                                            }}\r\n                                        >{colItm.label}</th>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody ref={tbodyRef} >\r\n                        {\r\n                            data?.map((rowItm: any, rowIdx: number) => {\r\n\r\n                                return (\r\n                                    <tr\r\n                                        data-index={rowIdx}\r\n                                        key={rowIdx}\r\n                                        className={`row ${(selectedRow === rowIdx) || (selectedRowIndex === rowIdx) ? \"selected\" : \"\"}`}>\r\n                                        <td\r\n                                            style={{\r\n                                                position: \"relative\",\r\n                                                border: \"none\",\r\n                                                cursor: \"pointer\",\r\n                                                background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n                                                padding: 0,\r\n                                                margin: 0,\r\n\r\n                                            }}>\r\n                                            <div style={{\r\n                                                width: \"18px\",\r\n                                                height: \"18px\",\r\n                                                position: \"relative\",\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                justifyContent: \"center\"\r\n                                            }}>\r\n                                                <input\r\n                                                    style={{\r\n                                                        cursor: \"pointer\",\r\n                                                        margin: \"0px !important\",\r\n                                                        position: \"absolute\",\r\n                                                    }}\r\n                                                    readOnly={true}\r\n                                                    checked={selectedRowIndex === rowIdx}\r\n                                                    type=\"checkbox\"\r\n                                                    onClick={() => {\r\n                                                        if (!isTableSelectable) {\r\n                                                            return\r\n                                                        }\r\n                                                        setSelectedRowIndex(rowIdx)\r\n\r\n                                                        if (getSelectedItem) {\r\n                                                            getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                        }\r\n                                                        setSelectedRow(null)\r\n\r\n                                                    }}\r\n                                                />\r\n\r\n                                            </div>\r\n\r\n                                        </td>\r\n\r\n                                        {\r\n                                            column.map((colItm: any, colIdx: number) => {\r\n                                                return (\r\n                                                    <td\r\n                                                        className={`td row-${rowIdx} col-${colIdx} `}\r\n                                                        tabIndex={0}\r\n                                                        onDoubleClick={() => {\r\n                                                            if (!isTableSelectable) {\r\n                                                                return\r\n                                                            }\r\n                                                            if (selectedRowIndex === rowIdx) {\r\n                                                                setSelectedRowIndex(null)\r\n\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(null, null, rowIdx, null)\r\n                                                                }\r\n                                                            } else {\r\n\r\n                                                                setSelectedRowIndex(rowIdx)\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                                }\r\n                                                            }\r\n                                                            setSelectedRow(null)\r\n                                                        }}\r\n                                                        onClick={() => {\r\n                                                            setSelectedRow(rowIdx)\r\n                                                        }}\r\n                                                        onKeyDown={(e) => {\r\n                                                            if (onKeyDown) {\r\n                                                                onKeyDown(rowItm, rowIdx, e)\r\n                                                            }\r\n                                                            if (e.key === \"ArrowUp\") {\r\n                                                                setSelectedRow((prev: any) => {\r\n                                                                    const index = Math.max(prev - 1, -1)\r\n                                                                    const td = document.querySelector(`.td.row-${index}`) as HTMLTableDataCellElement\r\n                                                                    if (index < 0) {\r\n                                                                        if (focusElementOnMaxTop) {\r\n                                                                            focusElementOnMaxTop()\r\n                                                                        }\r\n                                                                        return\r\n                                                                    }\r\n                                                                    if (td) {\r\n                                                                        td.focus();\r\n                                                                    }\r\n                                                                    return index\r\n                                                                });\r\n                                                            } else if (e.key === \"ArrowDown\") {\r\n\r\n                                                                setSelectedRow((prev: any) => {\r\n                                                                    const index = Math.min(prev + 1, data.length - 1)\r\n                                                                    const td = document.querySelector(`.td.row-${index}`) as HTMLTableDataCellElement\r\n                                                                    if (td) {\r\n                                                                        td.focus();\r\n                                                                        if (index <= 15) {\r\n                                                                            parentElementRef.current.style.overflow = \"hidden\";\r\n                                                                            setTimeout(() => {\r\n                                                                                parentElementRef.current.style.overflow = \"auto\";\r\n                                                                            }, 100)\r\n                                                                            return index\r\n                                                                        }\r\n                                                                    }\r\n                                                                    return index\r\n                                                                });\r\n                                                            }\r\n                                                            if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n                                                                e.preventDefault()\r\n\r\n                                                                if (!isTableSelectable) {\r\n                                                                    return\r\n                                                                }\r\n\r\n                                                                setSelectedRowIndex(rowIdx)\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                                }\r\n                                                                setSelectedRow(null)\r\n                                                            }\r\n                                                        }}\r\n                                                        key={colIdx}\r\n\r\n                                                        style={{\r\n                                                            border: \"none\",\r\n                                                            fontSize: \"12px\",\r\n                                                            padding: \"0px 5px\",\r\n                                                            cursor: \"pointer\",\r\n                                                            height: \"20px\",\r\n                                                            userSelect: \"none\",\r\n\r\n                                                        }}\r\n                                                    >{\r\n                                                            <input\r\n                                                                readOnly={true}\r\n                                                                value={rowItm[colIdx]}\r\n                                                                style={{\r\n                                                                    width: colItm.width,\r\n                                                                    pointerEvents: \"none\",\r\n                                                                    border: \"none\",\r\n                                                                    background: \"transparent\",\r\n                                                                    userSelect: \"none\",\r\n                                                                    height: \"100%\",\r\n                                                                    textAlign: colItm.type === 'number' ? \"right\" : \"left\"\r\n\r\n                                                                }} />\r\n                                                        }</td>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                <style>\r\n\r\n                    {`\r\n             #upward-cutom-table tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n              #upward-cutom-table tr.selected td {\r\n                  background-color: #0076d7 !important;\r\n                  color: #ffffff !important;\r\n                  border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n\r\n              }\r\n              \r\n               #upward-cutom-table tr.selected td input {\r\n                  color: #ffffff !important;\r\n              }\r\n  \r\n              `}\r\n                </style>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n})\r\nexport const DataGridViewMultiSelectionReact = forwardRef(({\r\n    columns,\r\n    rows = [],\r\n    height = \"400px\",\r\n    getSelectedItem,\r\n    onKeyDown,\r\n    disbaleTable = false,\r\n    isTableSelectable = true,\r\n    containerStyle,\r\n    focusElementOnMaxTop,\r\n    onCheckAll,\r\n    onUnCheckAll\r\n}: any, ref) => {\r\n    const parentElementRef = useRef<any>(null)\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null)\r\n    const [data, setData] = useState([])\r\n    const [column, setColumn] = useState([])\r\n    const [selectedRow, setSelectedRow] = useState<any>(0)\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<Array<any>>([])\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0)\r\n\r\n    useEffect(() => {\r\n        if (columns.length > 0) {\r\n            setColumn(columns.filter((itm: any) => !itm.hide))\r\n        }\r\n    }, [columns])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        checkNoIsExist: (checkNo: string) => {\r\n            return data.some((subArray: any) => subArray[2] === checkNo);\r\n        },\r\n        selectedRow: () => selectedRow,\r\n        getData: () => {\r\n            const newData = [...data];\r\n            return newData\r\n        },\r\n        getSelectedRowsData: () => {\r\n            const newData = [...data];\r\n            return selectedRowIndex.map(index => newData[index]).filter(item => item !== undefined);\r\n        },\r\n        setData: (newData: any) => {\r\n            setData(newData)\r\n        },\r\n        getColumns: () => {\r\n            return columns\r\n        },\r\n        resetTable: () => {\r\n            setData([])\r\n            setSelectedRow(0)\r\n            setSelectedRowIndex([])\r\n        },\r\n        getSelectedRow: () => {\r\n            return selectedRowIndex\r\n        },\r\n        setSelectedRow: (value: any) => {\r\n            return setSelectedRowIndex(value)\r\n        },\r\n        _setSelectedRow: (value: any) => {\r\n            return setSelectedRow(value)\r\n        },\r\n        setDataFormated: (newData: any) => {\r\n            setData(newData.map((itm: any) => {\r\n                return columns.map((col: any) => itm[col.key])\r\n            }))\r\n        },\r\n        getDataFormatted: () => {\r\n            const newData = [...data];\r\n            const newDataFormatted = newData.map((itm: any) => {\r\n                let newItm = {\r\n                    Check_No: itm[0],\r\n                    Check_Date: itm[1],\r\n                    Check_Amnt: itm[2],\r\n                    BankName: itm[3],\r\n                    Branch: itm[4],\r\n                    Check_Remarks: itm[5],\r\n                    Deposit_Slip: itm[6],\r\n                    DateDeposit: itm[7],\r\n                    OR_No: itm[8],\r\n                    BankCode: itm[9]\r\n\r\n                }\r\n                return newItm\r\n            })\r\n\r\n            return newDataFormatted\r\n        },\r\n        getElementBody: () => tbodyRef.current,\r\n        getParentElement: () => parentElementRef.current\r\n    }))\r\n\r\n\r\n    return (\r\n        <div\r\n            ref={parentElementRef}\r\n            style={{\r\n                width: \"100%\",\r\n                height,\r\n                overflow: \"auto\",\r\n                position: \"relative\",\r\n                pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n                border: disbaleTable ? \"2px solid #8c8f8e\" : '2px solid #c0c0c0',\r\n                boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n                ...containerStyle,\r\n                background: \"#dcdcdc\"\r\n            }}\r\n\r\n        >\r\n            <div style={{ position: \"absolute\", width: `${totalRowWidth}px`, height: \"auto\" }}>\r\n                <table\r\n                    id=\"upward-cutom-table\"\r\n                    style={{\r\n                        borderCollapse: \"collapse\",\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                        background: \"#dcdcdc\"\r\n                    }}>\r\n                    <thead >\r\n                        <tr>\r\n                            <th style={{\r\n                                width: '30px',\r\n                                border: \"none\",\r\n                                position: \"sticky\",\r\n                                top: 0,\r\n                                zIndex: 1,\r\n                                background: \"#f0f0f0\",\r\n\r\n                            }}\r\n                            >\r\n                                <div style={{\r\n                                    width: \"18px\",\r\n                                    height: \"18px\",\r\n                                    position: \"relative\",\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"center\"\r\n                                }}>\r\n                                    <input\r\n                                        style={{\r\n                                            cursor: \"pointer\",\r\n                                            margin: \"0px !important\",\r\n                                            position: \"absolute\",\r\n                                        }}\r\n                                        readOnly={true}\r\n                                        type=\"checkbox\"\r\n                                        onClick={(e) => {\r\n                                            if (e.currentTarget.checked) {\r\n                                                if (onCheckAll) {\r\n                                                    onCheckAll()\r\n                                                }\r\n                                                setSelectedRowIndex(data.map((itm: any, idx: any) => idx))\r\n                                            } else {\r\n                                                if (onUnCheckAll) {\r\n                                                    onUnCheckAll()\r\n                                                }\r\n                                                setSelectedRowIndex([])\r\n                                            }\r\n\r\n                                        }}\r\n                                    />\r\n\r\n                                </div>\r\n\r\n                            </th>\r\n                            {\r\n                                column.map((colItm: any, idx: number) => {\r\n                                    return (\r\n                                        <th\r\n                                            key={idx}\r\n                                            style={{\r\n                                                width: colItm.width,\r\n                                                borderRight: \"1px solid #e2e8f0\",\r\n                                                position: \"sticky\",\r\n                                                top: 0,\r\n                                                zIndex: 1,\r\n                                                background: \"#f0f0f0\",\r\n                                                fontSize: \"12px\",\r\n                                                padding: \"0px 5px\",\r\n                                                textAlign: colItm.type === 'number' ? \"center\" : \"left\"\r\n\r\n                                            }}\r\n                                        >{colItm.label}</th>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody ref={tbodyRef} >\r\n                        {\r\n                            data?.map((rowItm: any, rowIdx: number) => {\r\n\r\n                                return (\r\n                                    <tr\r\n                                        data-index={rowIdx}\r\n                                        key={rowIdx}\r\n                                        className={`row ${(selectedRow === rowIdx) || (selectedRowIndex.includes(rowIdx)) ? \"selected\" : \"\"}`}>\r\n                                        <td\r\n                                            style={{\r\n                                                position: \"relative\",\r\n                                                border: \"none\",\r\n                                                cursor: \"pointer\",\r\n                                                background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n                                                padding: 0,\r\n                                                margin: 0,\r\n\r\n                                            }}>\r\n                                            <div style={{\r\n                                                width: \"18px\",\r\n                                                height: \"18px\",\r\n                                                position: \"relative\",\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                justifyContent: \"center\"\r\n                                            }}>\r\n                                                <input\r\n                                                    style={{\r\n                                                        cursor: \"pointer\",\r\n                                                        margin: \"0px !important\",\r\n                                                        position: \"absolute\",\r\n                                                    }}\r\n                                                    readOnly={true}\r\n                                                    checked={selectedRowIndex.includes(rowIdx)}\r\n                                                    type=\"checkbox\"\r\n                                                    onClick={() => {\r\n                                                        if (!isTableSelectable) {\r\n                                                            return\r\n                                                        }\r\n\r\n                                                        if (selectedRowIndex.includes(rowIdx)) {\r\n                                                            setSelectedRowIndex((d: any) => d.filter((i: any) => i !== rowIdx))\r\n                                                        } else {\r\n                                                            setSelectedRowIndex((d: any) => [...d, rowIdx])\r\n                                                        }\r\n\r\n                                                        if (getSelectedItem) {\r\n                                                            getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                        }\r\n\r\n                                                    }}\r\n                                                />\r\n\r\n                                            </div>\r\n\r\n                                        </td>\r\n\r\n                                        {\r\n                                            column.map((colItm: any, colIdx: number) => {\r\n                                                return (\r\n                                                    <td\r\n                                                        className={`td row-${rowIdx} col-${colIdx} `}\r\n                                                        tabIndex={0}\r\n                                                        onDoubleClick={() => {\r\n                                                            if (!isTableSelectable) {\r\n                                                                return\r\n                                                            }\r\n\r\n                                                            if (selectedRowIndex.includes(rowIdx)) {\r\n                                                                setSelectedRowIndex((d: any) => d.filter((i: any) => i !== rowIdx))\r\n\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(null, null, rowIdx, null)\r\n                                                                }\r\n\r\n                                                                return\r\n                                                            } else {\r\n\r\n                                                                setSelectedRowIndex((d: any) => [...d, rowIdx])\r\n\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                                }\r\n                                                            }\r\n                                                        }}\r\n                                                        onClick={() => {\r\n                                                            setSelectedRow(rowIdx)\r\n                                                        }}\r\n                                                        onKeyDown={(e) => {\r\n                                                            if (onKeyDown) {\r\n                                                                onKeyDown(rowItm, rowIdx, e)\r\n                                                            }\r\n                                                            if (e.key === \"ArrowUp\") {\r\n                                                                setSelectedRow((prev: any) => {\r\n                                                                    const index = Math.max(prev - 1, -1)\r\n                                                                    const td = document.querySelector(`.td.row-${index}`) as HTMLTableDataCellElement\r\n                                                                    if (index < 0) {\r\n                                                                        if (focusElementOnMaxTop) {\r\n                                                                            focusElementOnMaxTop()\r\n                                                                        }\r\n                                                                        return\r\n                                                                    }\r\n                                                                    if (td) {\r\n                                                                        td.focus();\r\n                                                                    }\r\n                                                                    return index\r\n                                                                });\r\n                                                            } else if (e.key === \"ArrowDown\") {\r\n\r\n                                                                setSelectedRow((prev: any) => {\r\n                                                                    const index = Math.min(prev + 1, data.length - 1)\r\n                                                                    const td = document.querySelector(`.td.row-${index}`) as HTMLTableDataCellElement\r\n                                                                    if (td) {\r\n                                                                        td.focus();\r\n                                                                        if (index <= 15) {\r\n                                                                            parentElementRef.current.style.overflow = \"hidden\";\r\n                                                                            setTimeout(() => {\r\n                                                                                parentElementRef.current.style.overflow = \"auto\";\r\n                                                                            }, 100)\r\n                                                                            return index\r\n                                                                        }\r\n                                                                    }\r\n                                                                    return index\r\n                                                                });\r\n                                                            }\r\n                                                            if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n                                                                e.preventDefault()\r\n\r\n                                                                if (!isTableSelectable) {\r\n                                                                    return\r\n                                                                }\r\n\r\n                                                                if (selectedRowIndex.includes(rowIdx)) {\r\n                                                                    setSelectedRowIndex((d: any) => d.filter((i: any) => i !== rowIdx))\r\n                                                                } else {\r\n                                                                    setSelectedRowIndex((d: any) => [...d, rowIdx])\r\n\r\n                                                                }\r\n                                                                if (getSelectedItem) {\r\n                                                                    getSelectedItem(rowItm, null, rowIdx, null)\r\n                                                                }\r\n                                                            }\r\n                                                        }}\r\n                                                        key={colIdx}\r\n\r\n                                                        style={{\r\n                                                            border: \"none\",\r\n                                                            fontSize: \"12px\",\r\n                                                            padding: \"0px 5px\",\r\n                                                            cursor: \"pointer\",\r\n                                                            height: \"20px\",\r\n                                                            userSelect: \"none\",\r\n\r\n                                                        }}\r\n                                                    >{\r\n                                                            <input\r\n                                                                readOnly={true}\r\n                                                                value={rowItm[colIdx]}\r\n                                                                style={{\r\n                                                                    width: colItm.width,\r\n                                                                    pointerEvents: \"none\",\r\n                                                                    border: \"none\",\r\n                                                                    background: \"transparent\",\r\n                                                                    userSelect: \"none\",\r\n                                                                    height: \"100%\",\r\n                                                                    textAlign: colItm.type === 'number' ? \"right\" : \"left\"\r\n\r\n                                                                }} />\r\n                                                        }</td>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                <style>\r\n\r\n                    {`\r\n             #upward-cutom-table tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n              #upward-cutom-table tr.selected td {\r\n                  background-color: #0076d7 !important;\r\n                  color: #ffffff !important;\r\n                  border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n\r\n              }\r\n              \r\n               #upward-cutom-table tr.selected td input {\r\n                  color: #ffffff !important;\r\n              }\r\n  \r\n              `}\r\n                </style>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\nlet dataCache: any = []\r\nlet searchInputValueCache = ''\r\nexport const useUpwardTableModalSearch = ({\r\n    column,\r\n    query,\r\n    getSelectedItem,\r\n    onKeyDown,\r\n    customWidth,\r\n    onClose\r\n}: any) => {\r\n    const [show, setShow] = useState(false)\r\n    const searchInputRef = useRef<HTMLInputElement>(null)\r\n\r\n    function openModal() {\r\n        const body = document.body\r\n        const div = document.createElement('div')\r\n        div.id = 'modal-portal'\r\n\r\n        if (document.getElementById('modal-portal'))\r\n            body.removeChild(document.getElementById('modal-portal') as HTMLElement)\r\n\r\n        body.insertBefore(div, document.getElementById('root'))\r\n        wait(100).then(() => {\r\n            div.innerHTML = ReactDOMServer.renderToString(<UpwardTableModalSearch />)\r\n        })\r\n\r\n        setShow(true)\r\n        setTimeout(() => {\r\n            if (searchInputRef.current) {\r\n                const event = new KeyboardEvent(\"keydown\", { code: \"Enter\", bubbles: true });\r\n                searchInputRef.current.focus(); // Ensure the element has focus\r\n                searchInputRef.current.dispatchEvent(event); // Dispatch the native event\r\n                setTimeout(() => {\r\n                    searchInputRef.current?.focus();\r\n                }, 100)\r\n            }\r\n        }, 100)\r\n    }\r\n    function closeModal(muteOnClose = true) {\r\n        if (onClose && muteOnClose) {\r\n            onClose()\r\n        }\r\n        setShow(false)\r\n        dataCache = []\r\n    }\r\n    const UpwardTableModalSearch = () => {\r\n        const tableRef = useRef<any>(null)\r\n        const [blick, setBlick] = useState(false)\r\n        const [data, setData] = useState([])\r\n        const { executeQueryToClient } = useExecuteQueryFromClient()\r\n\r\n        useEffect(() => {\r\n            if (dataCache.length > 0) {\r\n                if (searchInputRef.current) {\r\n                    searchInputRef.current.value = searchInputValueCache\r\n                }\r\n                setData(dataCache)\r\n            }\r\n        }, [setData])\r\n\r\n        useEffect(() => {\r\n            if (data.length > 0) {\r\n                dataCache = data\r\n                tableRef.current?.setDataFormated(data)\r\n            }\r\n        }, [data])\r\n\r\n\r\n        return (\r\n            show ?\r\n                <div id=\"modal-inject\">\r\n                    <div style={{\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        left: 0,\r\n                        right: 0,\r\n                        background: \"transparent\",\r\n                        zIndex: \"88\"\r\n                    }}\r\n                        onClick={() => {\r\n                            setBlick(true)\r\n                            setTimeout(() => {\r\n                                setBlick(false)\r\n                            }, 250)\r\n                        }}\r\n\r\n                    ></div>\r\n\r\n                    <div\r\n                        style={{\r\n                            background: \"#F1F1F1\",\r\n                            width: customWidth ? customWidth(blick, column) : blick ? \"451px\" : \"450px\",\r\n                            height: blick ? \"501px\" : \"500px\",\r\n                            position: \"absolute\",\r\n                            zIndex: 111111,\r\n                            top: \"50%\",\r\n                            left: \"50%\",\r\n                            transform: \"translate(-50%,-50%)\",\r\n                            boxShadow: '3px 6px 32px -7px rgba(0,0,0,0.75)',\r\n                            boxSizing: \"border-box\",\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                height: \"22px\",\r\n                                background: \"white\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                padding: \"5px\",\r\n                                position: \"relative\",\r\n                                alignItems: \"center\"\r\n\r\n                            }}\r\n                        >\r\n                            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>Search</span>\r\n                            <button\r\n                                className=\"btn-check-exit-modal\"\r\n                                style={{\r\n                                    padding: \"0 5px\",\r\n                                    borderRadius: \"0px\",\r\n                                    background: \"white\",\r\n                                    color: \"black\",\r\n                                    height: \"22px\",\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    right: 0\r\n                                }}\r\n                                onClick={() => {\r\n                                    closeModal()\r\n                                }}\r\n                            >\r\n                                <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n                            </button>\r\n                        </div>\r\n                        <div style={{\r\n                            padding: \"5px\",\r\n                        }}>\r\n                            <TextInput\r\n                                containerStyle={{\r\n                                    width: \"100%\"\r\n                                }}\r\n                                label={{\r\n                                    title: \"Search : \",\r\n                                    style: {\r\n                                        fontSize: \"12px\",\r\n                                        fontWeight: \"bold\",\r\n                                        width: \"70px\",\r\n                                        display: \"none\"\r\n                                    },\r\n                                }}\r\n                                input={{\r\n                                    type: \"text\",\r\n                                    style: { width: \"100%\" },\r\n                                    onKeyDown: async (e) => {\r\n                                        if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                            searchInputValueCache = e.currentTarget.value\r\n                                            const searchQuery = query(e.currentTarget.value)\r\n                                            console.log(searchQuery)\r\n                                            const dd = await executeQueryToClient(searchQuery)\r\n                                            setData(dd.data.data)\r\n                                        }\r\n\r\n                                        if (e.code === \"ArrowDown\") {\r\n                                            const td = document.querySelector(`.td.row-0`) as HTMLTableDataCellElement\r\n                                            if (td) {\r\n                                                const parentElement = tableRef.current.getParentElement()\r\n\r\n                                                td.focus({\r\n                                                    preventScroll: true\r\n                                                });\r\n                                                parentElement.style.overflow = \"hidden\";\r\n                                                wait(100).then(() => {\r\n                                                    parentElement.style.overflow = \"auto\";\r\n                                                })\r\n                                            }\r\n                                            tableRef.current?._setSelectedRow(0)\r\n                                        }\r\n\r\n                                    },\r\n                                }}\r\n                                inputRef={searchInputRef}\r\n                                icon={<SearchIcon sx={{ fontSize: \"18px\" }} />}\r\n                                onIconClick={async (e) => {\r\n                                    e.preventDefault()\r\n                                    if (searchInputRef.current)\r\n                                        searchInputValueCache = searchInputRef.current.value\r\n                                    const searchQuery = query(searchInputRef.current?.value)\r\n                                    const dd = await executeQueryToClient(searchQuery)\r\n                                    setData(dd.data.data)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div style={{\r\n                            flex: 1,\r\n                        }}>\r\n                            <DataGridViewReact\r\n                                columns={column}\r\n                                height={\"100%\"}\r\n                                ref={tableRef}\r\n                                getSelectedItem={getSelectedItem}\r\n                                onKeyDown={onKeyDown}\r\n                                focusElementOnMaxTop={() => {\r\n                                    searchInputRef.current?.focus()\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div style={{ padding: \"0 10px\" }}>\r\n                            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>Records: Top {data.length}</span>\r\n                        </div>\r\n                        <style>\r\n                            {\r\n                                `\r\n                                    .btn-check-exit-modal:hover{\r\n                                        background:red !important;\r\n                                        color:white !important;\r\n                                    }\r\n                                `\r\n                            }\r\n                        </style>\r\n                    </div >\r\n                </div>\r\n                : <></>\r\n        )\r\n\r\n    }\r\n\r\n    return {\r\n        openModal,\r\n        closeModal,\r\n        UpwardTableModalSearch\r\n    }\r\n}","import { HtmlHTMLAttributes, InputHTMLAttributes, useId, ReactNode, useState, LegacyRef, HTMLInputTypeAttribute, TextareaHTMLAttributes, CSSProperties } from \"react\";\nimport \"../style/design.css\";\n\n\ninterface TextInputProps {\n  input: InputHTMLAttributes<HTMLInputElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: 'start' | 'end'; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n  disableIcon?: boolean\n  containerStyle?: CSSProperties\n}\n\ninterface TextAreaPrps {\n  textarea: TextareaHTMLAttributes<HTMLTextAreaElement>\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  _inputRef: LegacyRef<HTMLTextAreaElement>\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: 'start' | 'end'; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n  disableIcon?: boolean\n}\n\ninterface TextFormatedInputProps extends TextInputProps {\n  onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined\n}\nexport function TextFormatedInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => { },\n  onChange = (e) => { },\n  containerStyle\n}: TextFormatedInputProps) {\n  // const [inputValue, setInputValue] = useState('');\n  const id = useId();\n\n\n  // Helper function to format numbers with commas\n  const formatNumber = (value: string) => {\n    if (!value) return value;\n\n    // Split the value into integer and decimal parts\n    const parts = value.split('.');\n\n    // Add commas to the integer part only\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n    // Join the integer and decimal parts if decimal exists\n    return parts.join('.');\n  };\n\n  // Helper function to remove commas\n  const unformatNumber = (value: string) => {\n    return value.replace(/,/g, '');\n  };\n\n  // Function to ensure two decimal places\n  const ensureTwoDecimals = (value: string) => {\n    // If the value has no decimal part, append '.00'\n    if (!value.includes('.')) {\n      if (value === '') {\n        return '0.00';\n      } else {\n\n        return value + '.00';\n      }\n    }\n\n    // If the value has one decimal place, append '0'\n    const parts = value.split('.');\n    if (parts[1].length === 1) {\n      return value + '0';\n    }\n\n    // If it already has two decimal places, return as is\n    return value;\n  };\n\n  const handleChange = (e: any) => {\n    let value = e.target.value;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Allow only numbers, commas, and one decimal point\n    const regex = /^-?\\d+(,\\d{3})*(\\.\\d*)?$/;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Check if the value is valid\n    if (value === '' || regex.test(value)) {\n      // Set the formatted value back in the input field\n\n      //setInputValue(formatNumber(value));\n      e.target.value = formatNumber(value)\n\n    }\n  };\n\n  const handleBlur = (e: any) => {\n    let value = unformatNumber(e.target.value);\n\n    // Ensure the value has two decimal places\n    value = ensureTwoDecimals(value);\n\n    // Set the value with commas and .00 (if needed)\n    // setInputValue(formatNumber(value));\n    e.target.value = formatNumber(value)\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative',\n        ...containerStyle // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        type=\"text\"\n        style={{\n          height: '100%',\n          ...input.style,\n        }}\n        onChange={(e) => {\n          handleChange(e)\n          onChange(e)\n        }}\n        onBlur={(e) => {\n          handleBlur(e)\n        }}  // Add .00 on blur\n\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\"\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\nexport function TextInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  containerStyle,\n  onIconClick = (e) => { }\n}: TextInputProps) {\n  const id = useId();\n\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative',\n        ...containerStyle\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        style={{\n          height: '100%',\n          ...input.style,\n        }}\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\",\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\n\nexport function TextAreaInput({\n  textarea,\n  label,\n  _inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => { }\n}: TextAreaPrps) {\n  const id = useId();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative', // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <textarea\n        ref={_inputRef}\n        id={id}\n        {...textarea}\n        style={{\n          height: '100%',\n          ...textarea.style,\n        }}\n\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\"\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\nexport function SelectInput({\n  select,\n  label,\n  selectRef,\n  datasource = [],\n  values = \"\",\n  display = \"\",\n  containerStyle\n}: {\n  selectRef?: React.RefObject<HTMLSelectElement>;\n  labelRef?: React.RefObject<HTMLLabelElement>;\n  select: InputHTMLAttributes<HTMLSelectElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  datasource: Array<any>;\n  values: string;\n  display: string;\n  containerStyle?: React.CSSProperties | undefined\n}) {\n  const id = useId();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"18px\",\n        alignItems: \"center\",\n        ...containerStyle\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      <select\n        {...select}\n        ref={selectRef}\n        className={`select ${select.className}`}\n        style={{\n          height: \"18px\",\n          ...select.style,\n        }}\n      >\n        {datasource.map((itm, idx) => {\n          return (\n            <option key={idx} value={itm[values]}>\n              {itm[display]}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n}\n\nexport function ButtonField({\n  buttonRetRef,\n  button,\n  tooltipText = \"\",\n  children,\n  disabled = false,\n}: {\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\n  tooltipText: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}) {\n  return (\n    <div className=\"tooltip\">\n      <button\n        disabled={disabled}\n        {...button}\n        ref={buttonRetRef}\n        style={{ ...button.style, background: !disabled ? \"transparent\" : \"#f1f1f1\" }}\n        className=\"tooltip-button\"\n      >\n        {children}\n      </button>\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\n    </div>\n  );\n}\n","import { useContext } from \"react\";\r\nimport { AuthContext } from \"../components/AuthContext\"\r\n\r\n\r\n\r\nexport default function useExecuteQueryFromClient() {\r\n    const { myAxios, user } = useContext(AuthContext);\r\n\r\n\r\n    async function executeQueryToClient(query: string) {\r\n        return await myAxios.post('/execute-query', { query }, {\r\n            headers: {\r\n                Authorization: `Bearer ${user?.accessToken}`\r\n            }\r\n        })\r\n    }\r\n\r\n    return {\r\n        executeQueryToClient\r\n    }\r\n}\r\n\r\n"],"names":["DataGridViewReact","forwardRef","_ref","ref","columns","_ref$height","rows","height","getSelectedItem","onKeyDown","_ref$disbaleTable","disbaleTable","_ref$isTableSelectabl","isTableSelectable","containerStyle","focusElementOnMaxTop","parentElementRef","useRef","tbodyRef","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","column","setColumn","_useState5","_useState6","selectedRow","setSelectedRow","_useState7","_useState8","selectedRowIndex","setSelectedRowIndex","totalRowWidth","reduce","a","b","width","useEffect","length","filter","itm","hide","useImperativeHandle","checkNoIsExist","checkNo","some","subArray","getData","_toConsumableArray","newData","getColumns","resetTable","getSelectedRow","value","_setSelectedRow","setDataFormated","map","col","key","getDataFormatted","Check_No","Check_Date","Check_Amnt","BankName","Branch","Check_Remarks","Deposit_Slip","DateDeposit","OR_No","BankCode","getElementBody","current","getParentElement","_jsx","style","_objectSpread","overflow","position","pointerEvents","border","boxShadow","background","children","_jsxs","concat","id","borderCollapse","top","zIndex","colItm","idx","borderRight","fontSize","padding","textAlign","type","label","rowItm","rowIdx","className","cursor","margin","display","alignItems","justifyContent","readOnly","checked","onClick","colIdx","tabIndex","onDoubleClick","e","prev","index","Math","max","td","document","querySelector","focus","min","setTimeout","code","preventDefault","userSelect","DataGridViewMultiSelectionReact","_ref2","_ref2$height","_ref2$disbaleTable","_ref2$isTableSelectab","onCheckAll","onUnCheckAll","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","getSelectedRowsData","item","undefined","currentTarget","includes","d","i","dataCache","searchInputValueCache","useUpwardTableModalSearch","_ref3","query","customWidth","onClose","_useState17","_useState18","show","setShow","searchInputRef","closeModal","arguments","UpwardTableModalSearch","_onKeyDown3","_ref4","tableRef","_useState19","_useState20","blick","setBlick","_useState21","_useState22","executeQueryToClient","useExecuteQueryFromClient","_tableRef$current","bottom","left","right","transform","boxSizing","flexDirection","fontWeight","borderRadius","color","CloseIcon","sx","TextInput","title","input","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","searchQuery","dd","_tableRef$current2","parentElement","wrap","_context","next","console","log","sent","preventScroll","wait","then","stop","apply","inputRef","icon","SearchIcon","onIconClick","_x2","_callee2","_searchInputRef$curre2","_context2","flex","_searchInputRef$curre3","_Fragment","openModal","body","div","createElement","getElementById","removeChild","insertBefore","innerHTML","ReactDOMServer","event","KeyboardEvent","bubbles","dispatchEvent","_searchInputRef$curre","TextFormatedInput","_ref$iconPosition","iconPosition","_ref$disableIcon","disableIcon","_ref$onIconClick","_ref$onChange","onChange","useId","formatNumber","parts","split","replace","join","unformatNumber","htmlFor","target","test","handleChange","onBlur","ensureTwoDecimals","handleBlur","_ref2$iconPosition","_ref2$disableIcon","_ref2$onIconClick","TextAreaInput","textarea","_inputRef","_ref3$iconPosition","_ref3$disableIcon","_ref3$onIconClick","SelectInput","select","selectRef","_ref4$datasource","datasource","_ref4$values","values","_ref4$display","ButtonField","_ref5","buttonRetRef","button","_ref5$tooltipText","tooltipText","_ref5$disabled","disabled","_executeQueryToClient","_useContext","useContext","AuthContext","myAxios","user","post","headers","Authorization","accessToken","abrupt"],"sourceRoot":""}