{"version":3,"file":"static/js/5334.de5486a8.chunk.js","mappings":"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","sources":["feautures/Admin/Task/Accounting/ChekPostponement.tsx","hooks/useMultipleComponent.tsx"],"sourcesContent":["import React, { useContext, useRef, useReducer, useState } from \"react\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  InputAdornment,\n  IconButton,\n  OutlinedInput,\n  TextField,\n  Box,\n  Autocomplete,\n} from \"@mui/material\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport Swal from \"sweetalert2\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport { useMutation, useQuery } from \"react-query\";\nimport useMultipleComponent from \"../../../../hooks/useMultipleComponent\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport { differenceInDays } from \"date-fns\";\nimport { setNewStateValue } from \"./PostDateChecks\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { addDays } from \"date-fns\";\nimport UpwardTable from \"../../../../components/UpwardTable\";\n\nconst requestInitialState = {\n  RPCD: \"\",\n  PNNo: \"\",\n  branch: \"\",\n  client: \"\",\n  check_no: \"\",\n  check_date: \"\",\n  bank: \"\",\n  amount: \"\",\n  new_check_date: new Date(),\n  check_reason: \"\",\n  requestMode: \"\",\n  rowMode: \"\",\n  rowId: \"\",\n  holdingFee: \"\",\n  penaltyCharge: \"\",\n  surplus: \"\",\n  deductedTo: \"\",\n  total: \"\",\n  paidVia: \"\",\n  paidInfo: \"\",\n  paidDate: new Date(),\n};\nconst approvedInitialState = {\n  RPCD: \"\",\n  PNNo: \"\",\n  branch: \"\",\n  client: \"\",\n  check_no: \"\",\n  check_date: \"\",\n  bank: \"\",\n  amount: \"\",\n  new_check_date: new Date(),\n  check_reason: \"\",\n  requestMode: \"\",\n  rowMode: \"\",\n  rowId: \"\",\n  holdingFee: \"\",\n  penaltyCharge: \"\",\n  surplus: \"\",\n  deductedTo: \"\",\n  total: \"\",\n  paidVia: \"\",\n  paidInfo: \"\",\n  paidDate: new Date(),\n  Requested_By: \"\",\n  Requested_Date: \"\",\n};\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport default function ChekPostponement() {\n  const { user } = useContext(AuthContext);\n\n  const { currentStepIndex, step, goTo } = useMultipleComponent([\n    <ChekPostponementRequest />,\n    <ChekPostponementApproved />,\n  ]);\n\n  const style: any = (idx: number) => ({\n    border: \"none\",\n    outline: \"none\",\n    backgroundColor: \"rgba(51, 51, 51, 0.05)\",\n    borderWidth: \"0\",\n    color: currentStepIndex === idx ? \"#7e22ce\" : \"#333333\",\n    cursor: \"pointer\",\n    display: \"inline-block\",\n    fontFamily: `\"Haas Grot Text R Web\", \"Helvetica Neue\", Helvetica, Arial, sans-serif`,\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    lineHeight: \"20px\",\n    listStyle: \"none\",\n    margin: \"0\",\n    padding: \"10px 12px\",\n    textAlign: \"center\",\n    transition: \"all 200ms\",\n    verticalAlign: \"baseline\",\n    whiteSpace: \"nowrap\",\n    userSelect: \"none\",\n    touchAction: \"manipulation\",\n    position: \"relative\",\n    overflow: \"hidden\",\n  });\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"auto\",\n        maxHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          position: \"fixed\",\n          top: \"41px\",\n          zIndex: \"100\",\n          background: \"white\",\n          width: \"100%\",\n          left: \"0\",\n          right: \"0\",\n          padding: \"10px 40px\",\n        }}\n      >\n        <button style={{ ...style(0) }} onClick={() => goTo(0)}>\n          <span\n            style={{\n              position: \"absolute\",\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0,\n              background: \"rgba(206, 214, 211, 0.18)\",\n              transition: \"all 200ms\",\n              transform: slideAnimation(currentStepIndex, 0),\n            }}\n          ></span>\n          Chek Postponement Request\n        </button>\n        <button style={{ ...style(1) }} onClick={() => goTo(1)}>\n          <span\n            style={{\n              position: \"absolute\",\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0,\n              background: \"rgba(206, 214, 211, 0.18)\",\n              transition: \"all 200ms\",\n              transform: slideAnimation(currentStepIndex, 1),\n            }}\n          ></span>\n          Chek Postponement Approved\n        </button>\n        {/* {user?.userAccess === \"ADMIN\" && (\n          <>\n            <button style={{ ...style(0) }} onClick={() => goTo(0)}>\n              <span\n                style={{\n                  position: \"absolute\",\n                  top: 0,\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  background: \"rgba(206, 214, 211, 0.18)\",\n                  transition: \"all 200ms\",\n                  transform: slideAnimation(currentStepIndex, 0),\n                }}\n              ></span>\n              Chek Postponement Request\n            </button>\n            <button style={{ ...style(1) }} onClick={() => goTo(1)}>\n              <span\n                style={{\n                  position: \"absolute\",\n                  top: 0,\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  background: \"rgba(206, 214, 211, 0.18)\",\n                  transition: \"all 200ms\",\n                  transform: slideAnimation(currentStepIndex, 1),\n                }}\n              ></span>\n              Chek Postponement Approved\n            </button>\n          </>\n        )} */}\n      </div>\n      <br />\n      {step}\n    </div>\n  );\n}\nconst checkSelectedColumns = [\n  { field: \"Check_No\", headerName: \"Check No\", width: 170 },\n  { field: \"Bank\", headerName: \"Bank\", width: 170 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 170, type: \"number\" },\n  { field: \"Check_Date\", headerName: \"Old Deposit Date\", width: 170 },\n  { field: \"New_Check_Date\", headerName: \"New Deposit Date\", width: 170 },\n  { field: \"DateDiff\", headerName: \"Date Difference\", width: 170 },\n  { field: \"Reason\", headerName: \"Reason\", width: 170 },\n  { field: \"temp_id\", headerName: \" \", hide: true },\n  { field: \"Status\", headerName: \"Status\", width: 170 },\n];\n\nfunction calculateDifference(startDate: any, endDate: any) {\n  const differenceInDaysValue = differenceInDays(\n    new Date(endDate),\n    new Date(startDate)\n  );\n  return Math.abs(differenceInDaysValue);\n}\n\nfunction ChekPostponementRequest() {\n  const { myAxios, user } = useContext(AuthContext);\n  const [stateRequest, dispatchRequest] = useReducer(\n    reducer,\n    requestInitialState\n  );\n  const [pnnoClients, setPNNoClients] = useState<Array<any>>([]);\n  const [checkList, setCheckList] = useState<Array<any>>([]);\n  const [checkSelected, setCheckSelected] = useState([]);\n  const [rcpnList, setRCPNList] = useState([]);\n  const table = useRef<any>(null);\n  const datePickerRef1 = useRef<HTMLElement>(null);\n  const datePickerRef2 = useRef<HTMLElement>(null);\n\n  const { isLoading: loadingSearchPNNoClients } = useQuery({\n    queryKey: \"pullout-request-search-pnno-client_name\",\n    queryFn: async () =>\n      await myAxios.get(\n        `/task/accounting/check-postponement/reqeust/search-pnno-client`,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    refetchOnWindowFocus: false,\n    onSuccess: (data) => {\n      const response = data as any;\n      setPNNoClients(response.data.pnnoClients);\n    },\n  });\n  const {\n    isLoading: loadingChekPostponementRequest,\n    refetch: refetchChekPostponementRequest,\n  } = useQuery({\n    queryKey: \"pullout-request-id\",\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/check-postponement/reqeust/get-id`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (data) => {\n      const response = data as any;\n      dispatchRequest({\n        type: \"UPDATE_FIELD\",\n        field: \"RPCD\",\n        value: response.data.id[0].pullout_request,\n      });\n    },\n  });\n\n  const { mutate: mutateGetChecksList, isLoading: isLoadingGetChecksList } =\n    useMutation({\n      mutationKey: \"get-check-list\",\n      mutationFn: async (variable: any) =>\n        await myAxios.post(\n          \"/task/accounting/check-postponement/selected-pn-no-checklist\",\n          variable,\n          {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        ),\n      onSuccess(res) {\n        setCheckList(res.data.selectedChecks);\n      },\n    });\n\n  const {\n    mutate: mutateGetRCPNSelectedDatails,\n    isLoading: isLoadingGetRCPNSelectedDatails,\n  } = useMutation({\n    mutationKey: \"get-rcpn-selected-datails\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/check-postponement/request/get-rcpn-selected-datails\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess(res) {\n      const data = res.data.rcpnDetails;\n      const itm = data[0];\n\n      setNewStateValue(dispatchRequest, itm);\n      const checkList = res.data.rcpnDetails.map((itm: any) => {\n        const DateDiff = calculateDifference(itm.Check_Date, itm.NewCheckDate);\n\n        return {\n          temp_id: itm.temp_id,\n          Bank: itm.Bank,\n          Check_Amnt: itm.Check_Amnt,\n          Check_Date: itm.Check_Date,\n          Check_No: itm.Check_No,\n          New_Check_Date: itm.NewCheckDate,\n          Reason: itm.reason,\n          DateDiff,\n          Status: itm.Status,\n        };\n      });\n\n      const newObj = {\n        RPCD: itm.RPCDNo,\n        PNNo: itm.PNNo,\n        branch: itm.ClientBranch,\n        client: itm.Name,\n        check_no: \"\",\n        check_date: \"\",\n        bank: \"\",\n        amount: \"\",\n        new_check_date: new Date(),\n        check_reason: \"\",\n        requestMode: \"edit\",\n        rowMode: \"\",\n        rowId: \"\",\n        holdingFee: itm.HoldingFees,\n        penaltyCharge: itm.PenaltyCharge,\n        surplus: itm.Surplus,\n        deductedTo: itm.Deducted_to,\n        total: (\n          parseFloat(itm.HoldingFees) +\n          parseFloat(itm.PenaltyCharge) +\n          parseFloat(itm.Surplus)\n        ).toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        }),\n        paidVia: itm.PaidVia,\n        paidInfo: itm.PaidInfo,\n        paidDate: new Date(itm.PaidDate),\n      };\n      setNewStateValue(dispatchRequest, newObj);\n      setCheckSelected(checkList);\n      mutateGetChecksList({\n        PNNo: itm.PNo,\n      });\n    },\n  });\n\n  const { mutate: mutateGetRCPNList, isLoading: isLoadingGetRCPNList } =\n    useMutation({\n      mutationKey: \"get-rcpn-list\",\n      mutationFn: async (variable: any) =>\n        await myAxios.post(\n          \"/task/accounting/check-postponement/request/get-rcpn-list\",\n          variable,\n          {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        ),\n      onSuccess(res) {\n        setRCPNList(res.data.rcpn);\n      },\n    });\n\n  function handleCheckAdd() {\n    if (stateRequest.check_no === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide check no!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.check_date === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide check date!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.bank === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide bank!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.amount === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide amount!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.check_reason === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide reason!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    const DateDiff = calculateDifference(\n      stateRequest.check_date,\n      stateRequest.new_check_date\n    );\n\n    if (DateDiff > 15 || DateDiff < 0) {\n      return Swal.fire({\n        timer: 2500,\n        title: \"Invalid Date\",\n        icon: \"warning\",\n        position: \"center\",\n      });\n    }\n\n    setCheckSelected((d: any) => {\n      let temp_id =\n        d.length > 0 ? incrementTempId(d[d.length - 1].temp_id) : \"000\";\n      if (stateRequest.rowMode === \"update\") {\n        d = d.filter((items: any) => items.temp_id !== stateRequest.rowId);\n        temp_id = stateRequest.rowId;\n      }\n      const data = {\n        Check_No: stateRequest.check_no,\n        Bank: stateRequest.bank,\n        Check_Amnt: stateRequest.amount,\n        Check_Date: stateRequest.check_date,\n        New_Check_Date: new Date(\n          stateRequest.new_check_date\n        ).toLocaleDateString(\"en-US\", {\n          month: \"2-digit\",\n          day: \"2-digit\",\n          year: \"numeric\",\n        }),\n        DateDiff,\n        Reason: stateRequest.check_reason,\n        temp_id,\n      };\n      d = [...d, data];\n      return d;\n    });\n    setNewStateValue(dispatchRequest, {\n      ...stateRequest,\n      ...{\n        check_no: \"\",\n        check_date: \"\",\n        bank: \"\",\n        amount: \"\",\n        new_check_date: new Date(),\n        check_reason: \"\",\n        rowMode: \"\",\n        rowId: \"\",\n      },\n    });\n\n    function incrementTempId(str: string) {\n      let num = parseInt(str, 10);\n      num++;\n      return num.toString().padStart(str.length, \"0\");\n    }\n  }\n\n  const { mutate: mutateSave, isLoading: isLoadingSave } = useMutation({\n    mutationKey: \"check-postponement-save\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\"/task/accounting/check-postponement/save\", variable, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    onSuccess(res) {\n      if (res.data.success) {\n        setNewStateValue(dispatchRequest, requestInitialState);\n        refetchChekPostponementRequest();\n        setCheckSelected([]);\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          timer: 1500,\n        });\n      }\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: res.data.message,\n        timer: 1500,\n      });\n    },\n  });\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchRequest({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n\n  function handleOnSave() {\n    if (stateRequest.PNNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide policy no!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.branch === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide branch!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (stateRequest.client === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide client name!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n\n    if (stateRequest.paidVia === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide how do be paid!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n\n    if (stateRequest.paidInfo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Please provide name of bank and branch!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (checkSelected.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: \"Check Table is Empty!\",\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (isNaN(parseFloat(stateRequest.holdingFee))) {\n      stateRequest.holdingFee = \"0.00\";\n    }\n    if (isNaN(parseFloat(stateRequest.penaltyCharge))) {\n      stateRequest.penaltyCharge = \"0.00\";\n    }\n    if (isNaN(parseFloat(stateRequest.surplus))) {\n      stateRequest.surplus = \"0.00\";\n    }\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You want to save it\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, save it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if (checkSelected.length <= 0) {\n          return Swal.fire({\n            position: \"center\",\n            icon: \"warning\",\n            title: \"Check list is empty\",\n            timer: 3000,\n          });\n        }\n        mutateSave({\n          ...stateRequest,\n          checkSelected: JSON.stringify(checkSelected),\n        });\n      }\n    });\n  }\n\n  function FeeAndChargersTotal(value: any, list: Array<string>) {\n    let total = 0;\n    list.forEach((item) => {\n      let itemState = stateRequest[item];\n      if (isNaN(parseFloat(itemState.replace(/,/g, \"\")))) {\n        itemState = \"0\";\n      }\n      total = total + parseFloat(itemState.replace(/,/g, \"\"));\n    });\n    if (isNaN(parseFloat(value.replace(/,/g, \"\")))) {\n      value = \"0\";\n    }\n    dispatchRequest({\n      type: \"UPDATE_FIELD\",\n      field: \"total\",\n      value: (total + parseFloat(value.replace(/,/g, \"\"))).toFixed(2),\n    });\n  }\n  function FooterTotal({ rows }: any) {\n    return (\n      <Box\n        sx={{\n          px: 2,\n          py: 1,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          borderTop: \"2px solid #e2e8f0\",\n        }}\n      >\n        <strong style={{ fontSize: \"11px\" }}>Records : {rows.length}</strong>\n        <strong style={{ fontSize: \"12px\" }}>\n          Total:{\" \"}\n          {checkSelected\n            .reduce(\n              (sum: any, obj: any) =>\n                sum + parseFloat(obj.Check_Amnt.replace(/,/g, \"\")),\n              0\n            )\n            .toLocaleString(\"en-US\", {\n              style: \"decimal\",\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n        </strong>\n      </Box>\n    );\n  }\n\n  const width = window.innerWidth - 100;\n  const height = window.innerHeight - 145;\n\n  return (\n    <>\n      <div\n        style={{\n          marginBottom: \"10px\",\n          position: \"fixed\",\n          top: \"100px\",\n          padding: \"0px 40px\",\n          left: \"0\",\n          right: \"0\",\n          width: \"100%\",\n          background: \"white\",\n          zIndex: \"100\",\n          display: \"flex\",\n          alignItems: \"end\",\n          columnGap: \"10px\",\n        }}\n      >\n        {stateRequest.requestMode === \"\" && (\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            variant=\"contained\"\n            size=\"small\"\n            color=\"primary\"\n            onClick={() => {\n              dispatchRequest({\n                type: \"UPDATE_FIELD\",\n                field: \"requestMode\",\n                value: \"add\",\n              });\n            }}\n          >\n            New\n          </Button>\n        )}\n        {stateRequest.requestMode === \"\" && (\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            variant=\"contained\"\n            size=\"small\"\n            color=\"secondary\"\n            onClick={() => {\n              mutateGetRCPNList({});\n              dispatchRequest({\n                type: \"UPDATE_FIELD\",\n                field: \"requestMode\",\n                value: \"edit\",\n              });\n              dispatchRequest({\n                type: \"UPDATE_FIELD\",\n                field: \"RPCD\",\n                value: \"\",\n              });\n            }}\n          >\n            Edit\n          </Button>\n        )}\n        {stateRequest.requestMode !== \"\" && (\n          <LoadingButton\n            disabled={stateRequest.requestMode === \"\"}\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            variant=\"contained\"\n            size=\"small\"\n            color=\"success\"\n            onClick={handleOnSave}\n            loading={isLoadingSave}\n          >\n            Save\n          </LoadingButton>\n        )}\n        {stateRequest.requestMode !== \"\" && (\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            variant=\"contained\"\n            size=\"small\"\n            color=\"error\"\n            onClick={() => {\n              Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, cancel it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  setNewStateValue(dispatchRequest, requestInitialState);\n                  refetchChekPostponementRequest();\n                  setCheckSelected([]);\n                }\n              });\n            }}\n          >\n            Cancel\n          </Button>\n        )}\n      </div>\n      <Box\n        sx={{\n          width: \"100%\",\n          height: \"100%\",\n          position: \"relative\",\n          marginTop: \"60px\",\n        }}\n      >\n        <div style={{ padding: \"0px 35px\", marginBottom: \"10px\" }}>\n          <fieldset\n            style={{\n              paddingLeft: \"10px\",\n              paddingRight: \"10px\",\n              paddingTop: \"10px\",\n              paddingBottom: \"20px\",\n              border: \"1px solid #cbd5e1\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <legend style={{ fontSize: \"14px\" }}>Account Information</legend>\n            <Box sx={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n              {stateRequest.requestMode !== \"edit\" && (\n                <React.Fragment>\n                  {loadingChekPostponementRequest ? (\n                    <LoadingButton loading={loadingChekPostponementRequest} />\n                  ) : (\n                    <FormControl\n                      variant=\"outlined\"\n                      size=\"small\"\n                      disabled={stateRequest.requestMode === \"\"}\n                      sx={{\n                        width: \"170px\",\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": {\n                          top: \"-5px\",\n                        },\n                      }}\n                    >\n                      <InputLabel htmlFor=\"pullout-req-id\">RCP NO.</InputLabel>\n                      <OutlinedInput\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                        disabled={stateRequest.requestMode === \"\"}\n                        fullWidth\n                        label=\"RPCD No.\"\n                        name=\"RPCD\"\n                        value={stateRequest.RPCD}\n                        onChange={handleInputChange}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            e.preventDefault();\n                            return handleOnSave();\n                          }\n                        }}\n                        readOnly={user?.department !== \"UCSMI\"}\n                        id=\"pullout-req-id\"\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              disabled={stateRequest.requestMode === \"\"}\n                              color=\"secondary\"\n                              edge=\"end\"\n                              onClick={() => {\n                                refetchChekPostponementRequest();\n                              }}\n                            >\n                              <RestartAltIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                      />\n                    </FormControl>\n                  )}\n                </React.Fragment>\n              )}\n\n              {stateRequest.requestMode === \"edit\" && (\n                <Autocomplete\n                  loading={isLoadingGetRCPNList}\n                  freeSolo\n                  options={rcpnList.map((itm: any) => itm.RPCDNo)}\n                  value={stateRequest.RPCD}\n                  onChange={(e, v: any) => {\n                    if (v) {\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"RPCD\",\n                        value: v,\n                      });\n                      mutateGetRCPNSelectedDatails({ RPCDNo: v });\n                    }\n                  }}\n                  onInput={(e: any) => {\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"RPCD\",\n                      value: e.target.value,\n                    });\n                  }}\n                  onBlur={(e) => {\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"RPCD\",\n                      value: stateRequest.RPCD,\n                    });\n                    mutateGetRCPNSelectedDatails({ RPCDNo: stateRequest.RPCD });\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      InputProps={{\n                        ...params.InputProps,\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      }}\n                      label=\"RPCD No.\"\n                    />\n                  )}\n                  sx={{\n                    flex: 1,\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                    },\n                    \".MuiInputBase-input\": {\n                      width: \"100% !important\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": {\n                      top: \"-5px\",\n                    },\n                    \".MuiAutocomplete-input \": {\n                      position: \"absolute\",\n                    },\n                  }}\n                  size=\"small\"\n                />\n              )}\n\n              <Autocomplete\n                loading={loadingSearchPNNoClients}\n                disabled={stateRequest.requestMode !== \"add\"}\n                freeSolo\n                options={pnnoClients.map((itm: any) => itm.PNo)}\n                value={stateRequest.PNNo}\n                onChange={(e, v: any) => {\n                  if (v) {\n                    const options = pnnoClients;\n                    const find = options.find((itm) => itm.PNo === v);\n                    if (find !== undefined) {\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"PNNo\",\n                        value: find.PNo,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"client\",\n                        value: find.Name,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"branch\",\n                        value: find.branch_name,\n                      });\n\n                      mutateGetChecksList({\n                        PNNo: find.PNo,\n                      });\n                      setNewStateValue(dispatchRequest, {\n                        check_date: \"\",\n                        new_check_date: new Date(),\n                        bank: \"\",\n                        amount: \"\",\n                        check_no: \"\",\n                      });\n                    }\n                  }\n                }}\n                onInput={(e: any) => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"PNNo\",\n                    value: e.target.value,\n                  });\n                }}\n                onBlur={(e) => {\n                  const options = pnnoClients;\n                  const find = options.find(\n                    (itm) => itm.PNo === stateRequest.PNNo\n                  );\n                  if (find !== undefined) {\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"PNNo\",\n                      value: find.PNo,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"client\",\n                      value: find.Name,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"branch\",\n                      value: find.branch_name,\n                    });\n                    mutateGetChecksList({\n                      PNNo: find.PNo,\n                    });\n                    setNewStateValue(dispatchRequest, {\n                      check_date: \"\",\n                      new_check_date: new Date(),\n                      bank: \"\",\n                      amount: \"\",\n                      check_no: \"\",\n                    });\n                  }\n                }}\n                renderOption={(props, option, attr) => {\n                  return (\n                    <li {...props} key={attr.index}>\n                      {option}\n                    </li>\n                  );\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    InputProps={{\n                      ...params.InputProps,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    label=\"PN No.\"\n                    disabled={stateRequest.requestMode !== \"add\"}\n                  />\n                )}\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                  },\n                  \".MuiInputBase-input\": {\n                    width: \"100% !important\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": {\n                    top: \"-5px\",\n                  },\n                  \".MuiAutocomplete-input \": {\n                    position: \"absolute\",\n                  },\n                }}\n                size=\"small\"\n              />\n              <TextField\n                disabled={stateRequest.requestMode !== \"add\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"branch\"\n                value={stateRequest.branch}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  width: \"250px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n              />\n              <Autocomplete\n                loading={loadingSearchPNNoClients}\n                disabled={stateRequest.requestMode !== \"add\"}\n                freeSolo\n                options={pnnoClients.map((itm: any) => itm.Name)}\n                value={stateRequest.client}\n                onChange={(e, v: any) => {\n                  if (v) {\n                    const options = pnnoClients;\n                    const find = options.find((itm) => itm.Name === v);\n                    if (find !== undefined) {\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"PNNo\",\n                        value: find.PNo,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"client\",\n                        value: find.Name,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"branch\",\n                        value: find.branch_name,\n                      });\n                      mutateGetChecksList({\n                        PNNo: find.PNo,\n                      });\n\n                      setNewStateValue(dispatchRequest, {\n                        check_date: \"\",\n                        new_check_date: new Date(),\n                        bank: \"\",\n                        amount: \"\",\n                        check_no: \"\",\n                      });\n                    }\n                  }\n                }}\n                onInput={(e: any) => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"client\",\n                    value: e.target.value,\n                  });\n                }}\n                onBlur={(e) => {\n                  const options = pnnoClients;\n                  const find = options.find(\n                    (itm) => itm.Name === stateRequest.client\n                  );\n                  if (find !== undefined) {\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"PNNo\",\n                      value: find.PNo,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"client\",\n                      value: find.Name,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"branch\",\n                      value: find.branch_name,\n                    });\n\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"check_no\",\n                      value: find.Check_No,\n                    });\n\n                    mutateGetChecksList({\n                      PNNo: find.PNo,\n                    });\n                    setNewStateValue(dispatchRequest, {\n                      check_date: \"\",\n                      new_check_date: new Date(),\n                      bank: \"\",\n                      amount: \"\",\n                      check_no: \"\",\n                    });\n                  }\n                }}\n                renderOption={(props, option, attr) => {\n                  return (\n                    <li {...props} key={attr.index}>\n                      {option}\n                    </li>\n                  );\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    InputProps={{\n                      ...params.InputProps,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    label=\"Account Name\"\n                    disabled={stateRequest.requestMode !== \"add\"}\n                  />\n                )}\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                  },\n                  \".MuiInputBase-input\": {\n                    width: \"100% !important\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": {\n                    top: \"-5px\",\n                  },\n                  \".MuiAutocomplete-input \": {\n                    position: \"absolute\",\n                  },\n                }}\n                size=\"small\"\n              />\n            </Box>\n          </fieldset>\n          <fieldset\n            style={{\n              paddingLeft: \"10px\",\n              paddingRight: \"10px\",\n              paddingTop: \"10px\",\n              paddingBottom: \"20px\",\n              border: \"1px solid #cbd5e1\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <legend style={{ fontSize: \"14px\" }}>Check Details</legend>\n            <Box sx={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n              <Autocomplete\n                loading={isLoadingGetChecksList}\n                freeSolo\n                options={checkList.map((itm: any) => itm.Check_No)}\n                value={stateRequest.check_no}\n                onChange={(e, v: any) => {\n                  if (v) {\n                    const options = checkList;\n                    const find = options.find((itm) => itm.Check_No === v);\n                    if (find !== undefined) {\n                      const newDate = addDays(new Date(find.Check_Date), 7);\n\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"check_no\",\n                        value: find.Check_No,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"check_date\",\n                        value: find.Check_Date,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"bank\",\n                        value: find.Bank,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"amount\",\n                        value: find.Check_Amnt,\n                      });\n                      dispatchRequest({\n                        type: \"UPDATE_FIELD\",\n                        field: \"new_check_date\",\n                        value: newDate,\n                      });\n                    }\n                  }\n                }}\n                onInput={(e: any) => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"check_no\",\n                    value: e.target.value,\n                  });\n                }}\n                onBlur={(e) => {\n                  const options = checkList;\n                  const find = options.find(\n                    (itm) => itm.Check_No === stateRequest.check_no\n                  );\n                  if (find !== undefined) {\n                    const newDate = addDays(new Date(find.Check_Date), 7);\n\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"check_no\",\n                      value: find.Check_No,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"check_date\",\n                      value: find.Check_Date,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"bank\",\n                      value: find.Bank,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"amount\",\n                      value: find.Check_Amnt,\n                    });\n                    dispatchRequest({\n                      type: \"UPDATE_FIELD\",\n                      field: \"new_check_date\",\n                      value: newDate,\n                    });\n                  }\n                }}\n                renderOption={(props, option, attr) => {\n                  return (\n                    <li {...props} key={attr.index}>\n                      {option}\n                    </li>\n                  );\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    InputProps={{\n                      ...params.InputProps,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    label=\"Check No.\"\n                  />\n                )}\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                  },\n                  \".MuiInputBase-input\": {\n                    width: \"100% !important\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": {\n                    top: \"-5px\",\n                  },\n                  \".MuiAutocomplete-input \": {\n                    position: \"absolute\",\n                  },\n                }}\n                size=\"small\"\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Date\"\n                name=\"check_date\"\n                disabled={stateRequest.requestMode === \"\"}\n                value={stateRequest.check_date}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  width: \"250px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleCheckAdd();\n                  }\n                }}\n              />\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Bank\"\n                name=\"bank\"\n                disabled={stateRequest.requestMode === \"\"}\n                value={stateRequest.bank}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  minWidth: \"300px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleCheckAdd();\n                  }\n                }}\n              />\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"amount\"\n                disabled={stateRequest.requestMode === \"\"}\n                value={stateRequest.amount}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleCheckAdd();\n                  }\n                }}\n                sx={{\n                  flex: 1,\n                  minWidth: \"300px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <CustomDatePicker\n                disabled={\n                  stateRequest.requestMode === \"\" && stateRequest.rowMode === \"\"\n                }\n                fullWidth={false}\n                label=\"New Date\"\n                onChange={(value: any) => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"new_check_date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateRequest.new_check_date)}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      datePickerRef1.current?.querySelector(\"button\")?.click();\n                      clearTimeout(timeout);\n                    }, 150);\n                  }\n                }}\n                datePickerRef={datePickerRef1}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <div\n                style={{\n                  display: \"flex\",\n                  columnGap: \"10px\",\n                  alignItems: \"center\",\n                }}\n              >\n                <TextField\n                  disabled={\n                    stateRequest.requestMode === \"\" &&\n                    stateRequest.rowMode === \"\"\n                  }\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Reason\"\n                  name=\"check_reason\"\n                  value={stateRequest.check_reason}\n                  onChange={handleInputChange}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  }}\n                  sx={{\n                    flex: 1,\n                    minWidth: \"300px\",\n                    height: \"25px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      e.preventDefault();\n                      return handleCheckAdd();\n                    }\n                  }}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  onClick={() => handleCheckAdd()}\n                  sx={{\n                    height: \"30px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={stateRequest.requestMode === \"\"}\n                >\n                  {stateRequest.rowMode === \"update\"\n                    ? \"Update Check\"\n                    : \"Add Check\"}\n                </Button>\n              </div>\n            </Box>\n          </fieldset>\n        </div>\n        <UpwardTable\n          ref={table}\n          rows={checkSelected}\n          column={checkSelectedColumns}\n          width={width}\n          height={height}\n          dataReadOnly={true}\n          onSelectionChange={(rowSelected) => {\n            if (rowSelected.length > 0) {\n              setNewStateValue(dispatchRequest, {\n                ...stateRequest,\n                ...{\n                  check_no: rowSelected[0].Check_No,\n                  check_date: rowSelected[0].Check_Date,\n                  bank: rowSelected[0].Bank,\n                  amount: rowSelected[0].Check_Amnt,\n                  new_check_date: rowSelected[0].New_Check_Date,\n                  check_reason: rowSelected[0].Reason,\n                  rowMode: \"update\",\n                  rowId: rowSelected[0].temp_id,\n                },\n              });\n            } else {\n              // setNewStateValue(dispatchRequest, {\n              //   ...stateRequest,\n              //   ...{\n              //     check_no: \"\",\n              //     check_date: \"\",\n              //     bank: \"\",\n              //     amount: \"\",\n              //     new_check_date: new Date(),\n              //     check_reason: \"\",\n              //     rowMode: \"\",\n              //     rowId: \"\",\n              //   },\n              // });\n            }\n          }}\n          onKeyDown={(row, key) => {\n            if (key === \"Delete\" || key === \"Backspace\") {\n              const rowSelected = row[0];\n              Swal.fire({\n                title: `Are you sure you want to delete?`,\n                text: \"You won't be able to revert this!\",\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  return setCheckSelected((d) => {\n                    return d.filter(\n                      (items: any) => items.temp_id !== rowSelected.temp_id\n                    );\n                  });\n                }\n              });\n              setNewStateValue(dispatchRequest, {\n                ...stateRequest,\n                ...{\n                  check_no: \"\",\n                  check_date: \"\",\n                  bank: \"\",\n                  amount: \"\",\n                  new_check_date: new Date(),\n                  check_reason: \"\",\n                  rowMode: \"\",\n                  rowId: \"\",\n                },\n              });\n            }\n          }}\n          inputsearchselector=\".manok\"\n          writeFooter={(rows) => <FooterTotal rows={rows} />}\n          isLoading={isLoadingGetRCPNSelectedDatails}\n        />\n\n        {/* <div\n        style={{\n          marginTop: \"10px\",\n          width: \"100%\",\n          position: \"relative\",\n          height: \"420px\",\n        }}\n      >\n        <Box\n          style={{\n            height: \"400px\",\n            width: \"100%\",\n            overflowX: \"scroll\",\n            position: \"absolute\",\n          }}\n        >\n          <Table\n            ref={table}\n            isLoading={isLoadingGetRCPNSelectedDatails}\n            columns={checkSelectedColumns}\n            rows={checkSelected}\n            table_id={\"temp_id\"}\n            isSingleSelection={true}\n            isRowFreeze={false}\n            dataSelection={(selection, data, code) => {\n              const rowSelected = data.filter(\n                (item: any) => item.temp_id === selection[0]\n              )[0];\n              if (rowSelected === undefined) {\n                setNewStateValue(dispatchRequest, {\n                  ...stateRequest,\n                  ...{\n                    check_no: \"\",\n                    check_date: \"\",\n                    bank: \"\",\n                    amount: \"\",\n                    new_check_date: new Date(),\n                    check_reason: \"\",\n                    rowMode: \"\",\n                    rowId: \"\",\n                  },\n                });\n                return;\n              }\n\n              if (code === \"Delete\" || code === \"Backspace\") {\n                return;\n              }\n            }}\n            getCellClassName={(params) => {\n              if (params.field === \"Status\" && params.value === \"APPROVED\") {\n                return \"approved\";\n              } else if (\n                params.field === \"Status\" &&\n                params.value === \"PENDING\"\n              ) {\n                return \"pending\";\n              } else if (\n                params.field === \"Status\" &&\n                params.value === \"DISAPPROVED\"\n              ) {\n                return \"disapproved\";\n              } else {\n                return \"\";\n              }\n            }}\n            footerChildren={() => <FooterTotal />}\n            footerPaginationPosition=\"left-right\"\n            showFooterSelectedCount={false}\n          />\n        </Box>\n      </div> */}\n        <div style={{ padding: \"0px 35px\", marginTop: \"10px\" }}>\n          <fieldset\n            style={{\n              paddingLeft: \"10px\",\n              paddingRight: \"10px\",\n              paddingTop: \"10px\",\n              paddingBottom: \"20px\",\n              border: \"1px solid #cbd5e1\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <legend style={{ fontSize: \"14px\" }}>Fees and Charges</legend>\n            <Box\n              sx={{\n                display: \"grid\",\n                gap: \"10px\",\n                gridTemplateColumns: \"repeat(4,1fr)\",\n              }}\n            >\n              <TextField\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Holding Fee\"\n                name=\"holdingFee\"\n                placeholder=\"0.00\"\n                value={stateRequest.holdingFee}\n                onChange={(e) => {\n                  handleInputChange(e);\n                  FeeAndChargersTotal(e.target.value, [\n                    \"penaltyCharge\",\n                    \"surplus\",\n                  ]);\n                }}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"holdingFee\",\n                    value: parseFloat(\n                      stateRequest.holdingFee.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Penalty Charge\"\n                name=\"penaltyCharge\"\n                value={stateRequest.penaltyCharge}\n                onChange={(e) => {\n                  handleInputChange(e);\n                  FeeAndChargersTotal(e.target.value, [\n                    \"holdingFee\",\n                    \"surplus\",\n                  ]);\n                }}\n                placeholder=\"0.00\"\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"penaltyCharge\",\n                    value: parseFloat(\n                      stateRequest.penaltyCharge.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Surplus\"\n                name=\"surplus\"\n                placeholder=\"0.00\"\n                value={stateRequest.surplus}\n                onChange={(e) => {\n                  handleInputChange(e);\n                  FeeAndChargersTotal(e.target.value, [\n                    \"holdingFee\",\n                    \"penaltyCharge\",\n                  ]);\n                }}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"surplus\",\n                    value: parseFloat(\n                      stateRequest.surplus.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Deducted to:\"\n                name=\"deductedTo\"\n                value={stateRequest.deductedTo}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <FormControl\n                disabled={stateRequest.requestMode === \"\"}\n                size=\"small\"\n                variant=\"outlined\"\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                    background: \"white\",\n                    zIndex: 99,\n                    padding: \"0 3px\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              >\n                <InputLabel id=\"label-selection-reason\">\n                  How to be paid\n                </InputLabel>\n                <Select\n                  labelId=\"label-selection-reason\"\n                  autoWidth\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"14px\",\n                  }}\n                  name=\"paidVia\"\n                  value={stateRequest.paidVia}\n                  onChange={handleInputChange}\n                  readOnly={stateRequest.requestMode === \"\"}\n                >\n                  <MenuItem value=\"\"></MenuItem>\n                  <MenuItem value=\"Over The Counter\">Over The Counter</MenuItem>\n                  <MenuItem value={\"direct deposit\"}>Direct Deposit</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Name of Bank & Branch\"\n                name=\"paidInfo\"\n                value={stateRequest.paidInfo}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: stateRequest.requestMode === \"edit\",\n                }}\n                sx={{\n                  flex: 1,\n                  gridColumn: \"2 / span 2\",\n\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <CustomDatePicker\n                disabled={stateRequest.requestMode === \"\"}\n                fullWidth={false}\n                label=\"Date & Time of Deposit\"\n                onChange={(value: any) => {\n                  dispatchRequest({\n                    type: \"UPDATE_FIELD\",\n                    field: \"paidDate\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateRequest.paidDate)}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      datePickerRef2.current?.querySelector(\"button\")?.click();\n                      clearTimeout(timeout);\n                    }, 150);\n                  }\n                }}\n                datePickerRef={datePickerRef2}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                disabled={stateRequest.requestMode === \"\"}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"total\"\n                name=\"total\"\n                value={stateRequest.total}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    e.preventDefault();\n                    return handleOnSave();\n                  }\n                }}\n              />\n            </Box>\n          </fieldset>\n        </div>\n      </Box>\n    </>\n  );\n}\nfunction ChekPostponementApproved() {\n  const { myAxios, user } = useContext(AuthContext);\n  const [stateApproved, dispatchApproved] = useReducer(\n    reducer,\n    approvedInitialState\n  );\n  const [rcpnList, setRCPNList] = useState([]);\n  const [checkSelected, setCheckSelected] = useState([]);\n  const datePickerRef = useRef<HTMLElement>(null);\n  const table = useRef<any>(null);\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchApproved({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n\n  const { isLoading: isLoadingGetRCPNList, refetch } = useQuery({\n    queryKey: \"get-rcpn-list\",\n    queryFn: async () =>\n      await myAxios.get(\n        \"/task/accounting/check-postponement/request/get-rcpn-list\",\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess(res) {\n      setRCPNList(res.data.rcpn);\n    },\n    refetchOnWindowFocus: false,\n  });\n\n  const {\n    mutate: mutateGetRCPNSelectedDatails,\n    isLoading: isLoadingGetRCPNSelectedDatails,\n  } = useMutation({\n    mutationKey: \"get-rcpn-selected-datails\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/check-postponement/request/get-rcpn-selected-datails\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess(res) {\n      const data = res.data.rcpnDetails;\n      const itm = data[0];\n\n      const checkList = res.data.rcpnDetails.map((itm: any) => {\n        const DateDiff = calculateDifference(itm.Check_Date, itm.NewCheckDate);\n\n        return {\n          temp_id: itm.temp_id,\n          Bank: itm.Bank,\n          Check_Amnt: itm.Check_Amnt,\n          Check_Date: itm.Check_Date,\n          Check_No: itm.Check_No,\n          New_Check_Date: itm.NewCheckDate,\n          Reason: itm.reason,\n          DateDiff,\n          Status: itm.Status,\n        };\n      });\n      const newObj = {\n        RPCD: itm.RPCDNo,\n        PNNo: itm.PNNo,\n        branch: itm.ClientBranch,\n        client: itm.Name,\n        check_no: \"\",\n        check_date: \"\",\n        bank: \"\",\n        amount: \"\",\n        new_check_date: new Date(),\n        check_reason: \"\",\n        requestMode: \"edit\",\n        rowMode: \"\",\n        rowId: \"\",\n        holdingFee: itm.HoldingFees,\n        penaltyCharge: itm.PenaltyCharge,\n        surplus: itm.Surplus,\n        deductedTo: itm.Deducted_to,\n        total: (\n          parseFloat(itm.HoldingFees) +\n          parseFloat(itm.PenaltyCharge) +\n          parseFloat(itm.Surplus)\n        ).toLocaleString(\"en-US\", {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        }),\n        paidVia: itm.PaidVia,\n        paidInfo: itm.PaidInfo,\n        paidDate: new Date(itm.PaidDate),\n        Requested_By: itm.Requested_By,\n        Requested_Date: itm.Requested_Date,\n      };\n      setNewStateValue(dispatchApproved, newObj);\n      setCheckSelected(checkList);\n    },\n  });\n\n  //=======================\n  const { mutate: mutateApprovedRequest, isLoading: isLoadingApprovedRequest } =\n    useMutation({\n      mutationKey: \"approved-request\",\n      mutationFn: async (variable: any) =>\n        await myAxios.post(\n          \"/task/accounting/check-postponement/approved-request\",\n          variable,\n          {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        ),\n      onSuccess(res) {\n        if (res.data.success) {\n          setNewStateValue(dispatchApproved, approvedInitialState);\n          setCheckSelected([]);\n          return Swal.fire({\n            position: \"center\",\n            icon: \"success\",\n            title: res.data.message,\n            timer: 1500,\n          });\n        }\n        return Swal.fire({\n          position: \"center\",\n          icon: \"warning\",\n          title: res.data.message,\n          timer: 1500,\n        });\n      },\n    });\n  const {\n    mutate: mutateDisApprovedRequest,\n    isLoading: isLoadingDisApprovedRequest,\n  } = useMutation({\n    mutationKey: \"approved-request\",\n    mutationFn: async (variable: any) =>\n      await myAxios.post(\n        \"/task/accounting/check-postponement/approved-request\",\n        variable,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess(res) {\n      if (res.data.success) {\n        setNewStateValue(dispatchApproved, approvedInitialState);\n        setCheckSelected([]);\n        refetch();\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          timer: 1500,\n        });\n      }\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: res.data.message,\n        timer: 1500,\n      });\n    },\n  });\n\n  function FooterTotal({ rows }: any) {\n    return (\n      <Box\n        sx={{\n          px: 2,\n          py: 1,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          borderTop: \"2px solid #e2e8f0\",\n        }}\n      >\n        <strong style={{ fontSize: \"11px\" }}>Records : {rows.length}</strong>\n        <strong style={{ fontSize: \"12px\" }}>\n          Total:{\" \"}\n          {checkSelected\n            .reduce(\n              (sum: any, obj: any) =>\n                sum + parseFloat(obj.Check_Amnt.replace(/,/g, \"\")),\n              0\n            )\n            .toLocaleString(\"en-US\", {\n              style: \"decimal\",\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n        </strong>\n      </Box>\n    );\n  }\n  const width = window.innerWidth - 100;\n  const height = window.innerHeight - 145;\n  return (\n    <>\n      <div\n        style={{\n          marginBottom: \"10px\",\n          position: \"fixed\",\n          top: \"100px\",\n          padding: \"0px 40px\",\n          left: \"0\",\n          right: \"0\",\n          width: \"100%\",\n          background: \"white\",\n          zIndex: \"100\",\n          display: \"flex\",\n          alignItems: \"end\",\n          columnGap: \"10px\",\n        }}\n      >\n        <LoadingButton\n          disabled={checkSelected.length <= 0}\n          loading={isLoadingApprovedRequest}\n          sx={{\n            height: \"30px\",\n            fontSize: \"11px\",\n          }}\n          variant=\"contained\"\n          size=\"small\"\n          color=\"success\"\n          onClick={() => {\n            Swal.fire({\n              title: `Are you sure you want to approved ${stateApproved.RPCD}?`,\n              html: `<p>You want to <span style=\"color:green\">Approved</span> <strong>${stateApproved.RPCD}</strong></p><p>Enter Code.</p>`,\n              input: \"text\",\n              inputAttributes: {\n                autocapitalize: \"off\",\n              },\n              showCancelButton: true,\n              confirmButtonText: \"Confirm\",\n              confirmButtonColor: \"green\",\n              showLoaderOnConfirm: true,\n              preConfirm: async (code) => {\n                try {\n                  const selected = JSON.stringify(\n                    table.current.getSelectedRows()\n                  );\n                  console.log(selected);\n                  mutateApprovedRequest({\n                    ...stateApproved,\n                    checkSelected: JSON.stringify(checkSelected),\n                    code,\n                    isApproved: true,\n                  });\n                } catch (error) {\n                  Swal.showValidationMessage(`\n                    Request failed: ${error}\n                  `);\n                }\n              },\n              allowOutsideClick: () => !Swal.isLoading(),\n            }).then((result) => {\n              if (result.isDismissed || result.dismiss || result.isDenied) {\n                setNewStateValue(dispatchApproved, approvedInitialState);\n                setCheckSelected([]);\n              }\n            });\n          }}\n        >\n          Approved Request\n        </LoadingButton>\n        <LoadingButton\n          disabled={checkSelected.length <= 0}\n          loading={isLoadingDisApprovedRequest}\n          sx={{\n            height: \"30px\",\n            fontSize: \"11px\",\n          }}\n          variant=\"contained\"\n          size=\"small\"\n          color=\"error\"\n          onClick={() => {\n            Swal.fire({\n              title: `Are you sure you want to disapproved ${stateApproved.RPCD}?`,\n              html: `<p>You want to <span style=\"color:red\">DisAprroved</span> <strong>${stateApproved.RPCD}</strong></p><p>Enter Code.</p>`,\n              input: \"text\",\n              inputAttributes: {\n                autocapitalize: \"off\",\n              },\n              showCancelButton: true,\n              confirmButtonText: \"Confirm\",\n              confirmButtonColor: \"green\",\n              showLoaderOnConfirm: true,\n              preConfirm: async (code) => {\n                try {\n                  mutateDisApprovedRequest({\n                    ...stateApproved,\n                    checkSelected: JSON.stringify(checkSelected),\n                    code,\n                    isApproved: false,\n                  });\n                } catch (error) {\n                  Swal.showValidationMessage(`\n                    Request failed: ${error}\n                  `);\n                }\n              },\n              allowOutsideClick: () => !Swal.isLoading(),\n            }).then((result) => {\n              if (result.isDismissed || result.dismiss || result.isDenied) {\n                setNewStateValue(dispatchApproved, approvedInitialState);\n                setCheckSelected([]);\n              }\n            });\n          }}\n        >\n          Disapproved Request\n        </LoadingButton>\n      </div>\n      <Box sx={{ width: \"100%\", height: \"100%\", marginTop: \"60px\" }}>\n        <div style={{ padding: \"0px  35px\", marginBottom: \"10px\" }}>\n          <fieldset\n            style={{\n              paddingLeft: \"10px\",\n              paddingRight: \"10px\",\n              paddingTop: \"10px\",\n              paddingBottom: \"20px\",\n              border: \"1px solid #cbd5e1\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <legend style={{ fontSize: \"14px\" }}>Account Information</legend>\n            <Box sx={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n              <Autocomplete\n                loading={isLoadingGetRCPNList}\n                freeSolo\n                options={rcpnList.map((itm: any) => itm.RPCDNo)}\n                value={stateApproved.RPCD}\n                onChange={(e, v: any) => {\n                  if (v) {\n                    dispatchApproved({\n                      type: \"UPDATE_FIELD\",\n                      field: \"RPCD\",\n                      value: v,\n                    });\n                    mutateGetRCPNSelectedDatails({ RPCDNo: v });\n                  }\n                }}\n                onInput={(e: any) => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"RPCD\",\n                    value: e.target.value,\n                  });\n                }}\n                onBlur={(e) => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"RPCD\",\n                    value: stateApproved.RPCD,\n                  });\n                  mutateGetRCPNSelectedDatails({ RPCDNo: stateApproved.RPCD });\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    InputProps={{\n                      ...params.InputProps,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    label=\"RPCD No.\"\n                  />\n                )}\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                  },\n                  \".MuiInputBase-input\": {\n                    width: \"100% !important\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": {\n                    top: \"-5px\",\n                  },\n                  \".MuiAutocomplete-input \": {\n                    position: \"absolute\",\n                  },\n                }}\n                size=\"small\"\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"PNNo\"\n                value={stateApproved.PNNo}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  width: \"250px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"branch\"\n                value={stateApproved.branch}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  width: \"250px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Account Name\"\n                name=\"client\"\n                value={stateApproved.client}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  minWidth: \"300px\",\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </Box>\n          </fieldset>\n        </div>\n        <UpwardTable\n          ref={table}\n          rows={checkSelected}\n          column={checkSelectedColumns}\n          width={width}\n          height={height}\n          dataReadOnly={true}\n          inputsearchselector=\".manok\"\n          writeFooter={(rows) => <FooterTotal rows={rows} />}\n          isLoading={isLoadingGetRCPNSelectedDatails}\n        />\n        {/* <div\n        style={{\n          marginTop: \"10px\",\n          width: \"100%\",\n          position: \"relative\",\n          height: \"420px\",\n        }}\n      >\n        <Box\n          style={{\n            height: \"400px\",\n            width: \"100%\",\n            overflowX: \"scroll\",\n            position: \"absolute\",\n          }}\n        >\n          <Table\n            ref={table}\n            isLoading={isLoadingGetRCPNSelectedDatails}\n            columns={checkSelectedColumns}\n            rows={checkSelected}\n            table_id={\"temp_id\"}\n            isSingleSelection={true}\n            isRowFreeze={false}\n            getCellClassName={(params) => {\n              if (params.field === \"Status\" && params.value === \"APPROVED\") {\n                return \"approved\";\n              } else if (\n                params.field === \"Status\" &&\n                params.value === \"PENDING\"\n              ) {\n                return \"pending\";\n              } else if (\n                params.field === \"Status\" &&\n                params.value === \"DISAPPROVED\"\n              ) {\n                return \"disapproved\";\n              } else {\n                return \"\";\n              }\n            }}\n            footerChildren={() => <FooterTotal />}\n            footerPaginationPosition=\"left-right\"\n            showFooterSelectedCount={false}\n          />\n        </Box>\n      </div> */}\n        <div style={{ padding: \"0px 35px\", marginTop: \"10px\" }}>\n          <fieldset\n            style={{\n              paddingLeft: \"10px\",\n              paddingRight: \"10px\",\n              paddingTop: \"10px\",\n              paddingBottom: \"20px\",\n              border: \"1px solid #cbd5e1\",\n              borderRadius: \"5px\",\n            }}\n          >\n            <legend style={{ fontSize: \"14px\" }}>Fees and Charges</legend>\n            <Box\n              sx={{\n                display: \"grid\",\n                gap: \"10px\",\n                gridTemplateColumns: \"repeat(4,1fr)\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Holding Fee\"\n                name=\"holdingFee\"\n                placeholder=\"0.00\"\n                value={stateApproved.holdingFee}\n                onChange={handleInputChange}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"holdingFee\",\n                    value: parseFloat(\n                      stateApproved.holdingFee.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Penalty Charge\"\n                name=\"penaltyCharge\"\n                value={stateApproved.penaltyCharge}\n                onChange={handleInputChange}\n                placeholder=\"0.00\"\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"penaltyCharge\",\n                    value: parseFloat(\n                      stateApproved.penaltyCharge.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Surplus\"\n                name=\"surplus\"\n                placeholder=\"0.00\"\n                value={stateApproved.surplus}\n                onChange={handleInputChange}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n                onBlur={() => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"surplus\",\n                    value: parseFloat(\n                      stateApproved.surplus.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Deducted to:\"\n                name=\"deductedTo\"\n                value={stateApproved.deductedTo}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <FormControl\n                size=\"small\"\n                variant=\"outlined\"\n                sx={{\n                  flex: 1,\n                  \".MuiFormLabel-root\": {\n                    fontSize: \"14px\",\n                    background: \"white\",\n                    zIndex: 99,\n                    padding: \"0 3px\",\n                  },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              >\n                <InputLabel id=\"label-selection-reason\">\n                  How to be paid\n                </InputLabel>\n                <Select\n                  labelId=\"label-selection-reason\"\n                  autoWidth\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"14px\",\n                  }}\n                  name=\"paidVia\"\n                  value={stateApproved.paidVia}\n                  onChange={handleInputChange}\n                  readOnly={true}\n                >\n                  <MenuItem value=\"\"></MenuItem>\n                  <MenuItem value=\"Over The Counter\">Over The Counter</MenuItem>\n                  <MenuItem value={\"direct deposit\"}>Direct Deposit</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Name of Bank & Branch\"\n                name=\"paidInfo\"\n                value={stateApproved.paidInfo}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  gridColumn: \"2 / span 2\",\n\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <CustomDatePicker\n                readOnly={true}\n                fullWidth={false}\n                label=\"Date & Time of Deposit\"\n                onChange={(value: any) => {\n                  dispatchApproved({\n                    type: \"UPDATE_FIELD\",\n                    field: \"paidDate\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateApproved.paidDate)}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      datePickerRef.current?.querySelector(\"button\")?.click();\n                      clearTimeout(timeout);\n                    }, 150);\n                  }\n                }}\n                datePickerRef={datePickerRef}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"total\"\n                name=\"total\"\n                value={stateApproved.total}\n                onChange={handleInputChange}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  readOnly: true,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </Box>\n          </fieldset>\n        </div>\n      </Box>\n    </>\n  );\n}\nfunction slideAnimation(activeButton: number, idx: number) {\n  if (activeButton === idx) {\n    return \"translateX(100%)\";\n  } else {\n    return \"translateX(0%)\";\n  }\n}\n","import { useState, ReactElement } from \"react\";\n\nexport default function useMultipleComponent(steps: ReactElement[]) {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n\n  function next() {\n    setCurrentStepIndex((i) => {\n      if (i >= steps.length - 1) {\n        return i;\n      }\n      return i + 1;\n    });\n  }\n  function back() {\n    setCurrentStepIndex((i) => {\n      if (i <= 0) {\n        return i;\n      }\n      return i + 1;\n    });\n  }\n  function goTo(index: number) {\n    setCurrentStepIndex(index);\n  }\n  return {\n    step: steps[currentStepIndex],\n    goTo,\n    back,\n    next,\n    isFirstStep: currentStepIndex !== 0,\n    isLastStep: currentStepIndex === steps.length - 1,\n    currentStepIndex,\n  };\n}\n"],"names":["requestInitialState","RPCD","PNNo","branch","client","check_no","check_date","bank","amount","new_check_date","Date","check_reason","requestMode","rowMode","rowId","holdingFee","penaltyCharge","surplus","deductedTo","total","paidVia","paidInfo","paidDate","approvedInitialState","Requested_By","Requested_Date","reducer","state","action","type","_objectSpread","_defineProperty","field","value","ChekPostponement","useContext","AuthContext","user","_useMultipleComponent","useMultipleComponent","_jsx","ChekPostponementRequest","ChekPostponementApproved","currentStepIndex","step","goTo","style","idx","border","outline","backgroundColor","borderWidth","color","cursor","display","fontFamily","fontSize","fontWeight","lineHeight","listStyle","margin","padding","textAlign","transition","verticalAlign","whiteSpace","userSelect","touchAction","position","overflow","_jsxs","width","height","maxHeight","flexDirection","children","top","zIndex","background","left","right","onClick","bottom","transform","slideAnimation","checkSelectedColumns","headerName","hide","calculateDifference","startDate","endDate","differenceInDaysValue","differenceInDays","Math","abs","_queryFn","_queryFn2","_mutationFn","_mutationFn2","_mutationFn3","_mutationFn4","_useContext2","myAxios","_useReducer","useReducer","_useReducer2","_slicedToArray","stateRequest","dispatchRequest","_useState","useState","_useState2","pnnoClients","setPNNoClients","_useState3","_useState4","checkList","setCheckList","_useState5","_useState6","checkSelected","setCheckSelected","_useState7","_useState8","rcpnList","setRCPNList","table","useRef","datePickerRef1","datePickerRef2","_useQuery","useQuery","queryKey","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","refetchOnWindowFocus","onSuccess","data","loadingSearchPNNoClients","isLoading","_useQuery2","_callee2","_context2","id","pullout_request","loadingChekPostponementRequest","refetchChekPostponementRequest","refetch","_useMutation","useMutation","mutationKey","mutationFn","_x","_callee3","variable","_context3","post","res","selectedChecks","mutateGetChecksList","mutate","isLoadingGetChecksList","_useMutation2","_x2","_callee4","_context4","itm","rcpnDetails","setNewStateValue","map","DateDiff","Check_Date","NewCheckDate","temp_id","Bank","Check_Amnt","Check_No","New_Check_Date","Reason","reason","Status","newObj","RPCDNo","ClientBranch","Name","HoldingFees","PenaltyCharge","Surplus","Deducted_to","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","PaidVia","PaidInfo","PaidDate","PNo","mutateGetRCPNSelectedDatails","isLoadingGetRCPNSelectedDatails","_useMutation3","_x3","_callee5","_context5","rcpn","mutateGetRCPNList","isLoadingGetRCPNList","handleCheckAdd","Swal","icon","title","showConfirmButton","timer","d","length","str","num","parseInt","toString","padStart","incrementTempId","filter","items","toLocaleDateString","month","day","year","_toConsumableArray","_useMutation4","_x4","_callee6","_context6","success","message","mutateSave","isLoadingSave","handleInputChange","e","_e$target","target","name","handleOnSave","isNaN","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","JSON","stringify","FeeAndChargersTotal","list","forEach","item","itemState","replace","toFixed","FooterTotal","_ref","rows","Box","sx","px","py","justifyContent","borderTop","reduce","sum","obj","window","innerWidth","innerHeight","_Fragment","marginBottom","alignItems","columnGap","Button","variant","size","LoadingButton","disabled","loading","marginTop","paddingLeft","paddingRight","paddingTop","paddingBottom","borderRadius","gap","flexWrap","React","FormControl","InputLabel","htmlFor","OutlinedInput","fullWidth","label","onChange","onKeyDown","code","preventDefault","readOnly","department","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","Autocomplete","freeSolo","options","v","onInput","onBlur","renderInput","params","TextField","InputProps","flex","find","undefined","branch_name","renderOption","props","option","attr","_createElement","key","index","newDate","addDays","minWidth","CustomDatePicker","timeout","setTimeout","_datePickerRef1$curre","_datePickerRef1$curre2","current","querySelector","click","clearTimeout","datePickerRef","textField","InputLabelProps","UpwardTable","ref","column","dataReadOnly","onSelectionChange","rowSelected","row","inputsearchselector","writeFooter","gridTemplateColumns","placeholder","inputComponent","NumericFormatCustom","Select","labelId","autoWidth","MenuItem","gridColumn","_datePickerRef2$curre","_datePickerRef2$curre2","_queryFn3","_mutationFn5","_mutationFn6","_mutationFn7","_useContext3","_useReducer3","_useReducer4","stateApproved","dispatchApproved","_useState9","_useState10","_useState11","_useState12","_e$target2","_useQuery3","_callee7","_context7","_useMutation5","_x5","_callee8","_context8","_useMutation6","_x6","_callee9","_context9","mutateApprovedRequest","isLoadingApprovedRequest","_useMutation7","_x7","_callee10","_context10","mutateDisApprovedRequest","isLoadingDisApprovedRequest","_ref2","_preConfirm","html","input","inputAttributes","autocapitalize","showLoaderOnConfirm","preConfirm","_x8","_callee11","selected","_context11","getSelectedRows","console","log","isApproved","error","allowOutsideClick","isDismissed","dismiss","isDenied","_preConfirm2","_x9","_callee12","_context12","_datePickerRef$curren","_datePickerRef$curren2","activeButton","steps","setCurrentStepIndex","back","i","isFirstStep","isLastStep"],"sourceRoot":""}