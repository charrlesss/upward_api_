{"version":3,"file":"static/js/1690.49be1e13.chunk.js","mappings":"+XAkBaA,GAAoBC,EAAAA,EAAAA,aAC/B,SAAAC,EAcEC,GACI,IAbFC,EAAOF,EAAPE,QACSC,GADFH,EACPI,KAASJ,EACTK,QAAAA,OAAM,IAAAF,EAAG,QAAOA,EAChBG,EAAeN,EAAfM,gBACAC,EAASP,EAATO,UAASC,EAAAR,EACTS,aAAAA,OAAY,IAAAD,GAAQA,EAAAE,EAAAV,EACpBW,kBAAmBC,OAAkB,IAAAF,GAAOA,EAC5CG,EAAcb,EAAda,eACAC,EAAoBd,EAApBc,qBAAoBC,EAAAf,EACpBgB,gBAAAA,OAAe,IAAAD,EAAG,kBAAME,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,GAAK,EAAAH,EAAAI,EAAAnB,EAC7BoB,aAAAA,OAAY,IAAAD,GAAQA,EAIhBE,GAAmBC,EAAAA,EAAAA,QAAY,MAC/BC,GAAiBD,EAAAA,EAAAA,QAAY,MAC7BE,GAAcF,EAAAA,EAAAA,QAAO,IACrBG,GAAWH,EAAAA,EAAAA,QAAgC,MACjDI,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAsCT,EAAAA,EAAAA,UAAc,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAgDb,EAAAA,EAAAA,UAAc,MAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA5DE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GACtCG,EAAgBV,EAAOW,QAAO,SAACC,EAAQC,GAAM,OAAKD,EAAIC,EAAEC,KAAK,GAAE,GACrEC,GACEtB,EAAAA,EAAAA,UAASf,GAAmBsC,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GADvBtC,EAAiBuC,EAAA,GAAEC,EAAoBD,EAAA,IAG9CE,EAAAA,EAAAA,YAAU,WACJlD,EAAQmD,OAAS,GACnBlB,EAAUjC,EAAQoD,QAAO,SAACC,GAAQ,OAAMA,EAAIC,IAAI,IAEpD,GAAG,CAACtD,KAEJuD,EAAAA,EAAAA,qBAAoBxD,GAAK,iBAAO,CAC9ByD,eAAgB,SAACC,GACf,OAAO7B,EAAK8B,MAAK,SAACC,GAAa,OAAKA,EAAS,KAAOF,CAAO,GAC7D,EACArB,YAAa,kBAAMA,CAAW,EAC9BwB,QAAS,WAEP,OADaC,EAAAA,EAAAA,GAAOjC,EAEtB,EACAC,QAAS,SAACiC,GACRjC,EAAQiC,EACV,EACAC,WAAY,WACV,OAAO/D,CACT,EACAgE,WAAY,WACVnC,EAAQ,IACRQ,EAAe,GACfI,EAAoB,KACtB,EACAwB,eAAgB,WACd,OAAOzB,CACT,EACAH,eAAgB,SAAC6B,GACf,OAAOzB,EAAoByB,EAC7B,EACAC,cAAe,WACb,OAAOC,GACT,EACAC,gBAAiB,SAACH,GAChB,OAAO7B,EAAe6B,EACxB,EACAjB,qBAAsB,SAACqB,GACrBrB,EAAqBqB,EACvB,EACAC,gBAAiB,SAACT,GAChBjC,EACEiC,EAAQU,KAAI,SAACnB,GACX,OAAOrD,EAAQwE,KAAI,SAACC,GAAQ,OAAKpB,EAAIoB,EAAIC,IAAI,GAC/C,IAEJ,EACAC,iBAAkB,WAkBhB,OAjBad,EAAAA,EAAAA,GAAOjC,GACa4C,KAAI,SAACnB,GAapC,MAZa,CACXuB,SAAUvB,EAAI,GACdwB,WAAYxB,EAAI,GAChByB,WAAYzB,EAAI,GAChB0B,SAAU1B,EAAI,GACd2B,OAAQ3B,EAAI,GACZ4B,cAAe5B,EAAI,GACnB6B,aAAc7B,EAAI,GAClB8B,YAAa9B,EAAI,GACjB+B,MAAO/B,EAAI,GACXgC,SAAUhC,EAAI,GAGlB,GAGF,EACAiC,eAAgB,kBAAM/D,EAASgE,OAAO,EACtCC,iBAAkB,kBAAMrE,EAAiBoE,OAAO,EACjD,IAED,IAAMnB,EAAsB,WAC1B9C,EAAYiE,QAAQE,SAAQ,SAACC,EAA4BC,GACnDD,IAAUA,EAASE,SAAU,EACnC,GACF,EACMC,EAA6B,SAACC,GAClCxE,EAAYiE,QAAQE,SAAQ,SAACC,EAA4BC,GACnDG,IAASH,GAGPD,IAAUA,EAASE,SAAU,EAErC,GACF,EAEMG,EAAmB,SAACC,EAAYL,GACpCK,EAAMC,iBACFN,IAAQnD,GACVnB,EAAekE,QAAQW,WAE3B,EAEA,OACEC,EAAAA,EAAAA,MAAAnF,EAAAA,SAAA,CAAAoF,SAAA,EACErF,EAAAA,EAAAA,KAACsF,EAAW,CACVtG,IAAKsB,EACLiF,WACEvF,EAAAA,EAAAA,KAACD,EAAe,CACd0B,iBAAkBA,EAClB+D,WAAY,kBAAMlF,EAAekE,QAAQiB,YAAY,EACrDC,OAAQ7E,EAAKY,QAInBzB,EAAAA,EAAAA,KAAA,OACEhB,IAAKoB,EACLuF,OAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACH7D,MAAO,OACP3C,OAAAA,EACAyG,SAAU,OACVC,SAAU,WACVC,cAAevG,EAAe,OAAS,OACvCwG,OAAQxG,EAAe,oBAAsB,oBAC7CyG,UAAU,gFAEPrG,GAAc,IACjBsG,WAAY,YACZb,UAEFD,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLG,SAAU,WACV/D,MAAM,GAADoE,OAAKxE,EAAa,MACvBvC,OAAQ,QACRiG,SAAA,EAEFD,EAAAA,EAAAA,MAAA,SACEgB,GAAG,qBACHT,MAAO,CACLU,eAAgB,WAChBtE,MAAO,OACP+D,SAAU,WACVI,WAAY,WACZb,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAAqF,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACErF,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACL5D,MAAO,OACPiE,OAAQ,OACRF,SAAU,SACVQ,IAAK,EACLC,OAAQ,EACRL,WAAY,aAGf/F,IACCH,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACL5D,MAAO,OACPyE,YAAa,oBACbV,SAAU,SACVQ,IAAK,EACLC,OAAQ,EACRL,WAAY,UACZO,SAAU,OACVC,QAAS,UACTC,UAAW,UACXtB,SACH,QAIFpE,EAAOwC,KAAI,SAACmD,EAAahC,GACxB,OACE5E,EAAAA,EAAAA,KAAA,MAEE2F,MAAO,CACL5D,MAAO6E,EAAO7E,MACdyE,YAAa,oBACbV,SAAU,SACVQ,IAAK,EACLC,OAAQ,EACRL,WAAY,UACZO,SAAU,OACVC,QAAS,UACTC,UACkB,WAAhBC,EAAOC,KAAoB,SAAW,QACxCxB,SAEDuB,EAAOE,OAdHlC,EAiBX,UAGJ5E,EAAAA,EAAAA,KAAA,SAAOhB,IAAKwB,EAAS6E,SACd,OAAJxE,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,KAAI,SAACiC,EAAaqB,GACvB,OACE/G,EAAAA,EAAAA,KAACgH,EAAY,CAEXD,OAAQA,EACRrB,OAAQA,EACRjE,iBAAkBA,EAClBJ,YAAaA,EACb3B,kBAAmBA,EACnBgC,oBAAqBA,EACrBrC,gBAAiBA,EACjBiC,eAAgBA,EAChBL,OAAQA,EACR3B,UAAWA,EACXO,qBAAsBA,EACtBgB,KAAMA,EACNT,iBAAkBA,EAClBG,YAAaA,EACb8C,oBAAqBA,EACrByB,2BAA4BA,EAC5BE,iBAAkBA,EAClB7E,aAAcA,GAlBT4G,EAqBX,UAGJ/G,EAAAA,EAAAA,KAAA,SAAAqF,SAAA,w1BA8BV,IAGI2B,GAAelI,EAAAA,EAAAA,aACnB,SAAAmI,EAqBEjI,GACI,IApBF+H,EAAME,EAANF,OACArB,EAAMuB,EAANvB,OACAjE,EAAgBwF,EAAhBxF,iBACAJ,EAAW4F,EAAX5F,YACA3B,EAAiBuH,EAAjBvH,kBACAgC,EAAmBuF,EAAnBvF,oBACArC,EAAe4H,EAAf5H,gBACAiC,EAAc2F,EAAd3F,eACAL,EAAMgG,EAANhG,OACA3B,EAAS2H,EAAT3H,UACAO,EAAoBoH,EAApBpH,qBACAgB,EAAIoG,EAAJpG,KACAT,EAAgB6G,EAAhB7G,iBACAG,EAAW0G,EAAX1G,YACA8C,EAAmB4D,EAAnB5D,oBACAyB,EAA0BmC,EAA1BnC,2BACAE,EAAgBiC,EAAhBjC,iBACA7E,EAAY8G,EAAZ9G,aAIF,OACEiF,EAAAA,EAAAA,MAAA,MACE,aAAY2B,EAEZG,UAAS,OAAAf,OACP9E,IAAgB0F,GAAUtF,IAAqBsF,EAC3C,WACA,IACH1B,SAAA,EAEHrF,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACLG,SAAU,WACVE,OAAQ,OACRmB,OAAQ,UACRjB,WAAY7E,IAAgB0F,EAAS,SAAW,GAChDL,QAAS,EACTU,OAAQ,GACR/B,UAEFrF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACL5D,MAAO,OACP3C,OAAQ,OACR0G,SAAU,WACVuB,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChBlC,UAEFrF,EAAAA,EAAAA,KAACwH,EAAiB,CAEhBjH,YAAaA,EACbb,kBAAmBA,EACnBgC,oBAAqBA,EACrBqF,OAAQA,EACRrB,OAAQA,EACRrG,gBAAiBA,EACjBiC,eAAgBA,EAChBwD,2BAA4BA,GARvBiC,OAaV5G,IACCH,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACLG,SAAU,WACVE,OAAQ,OACRmB,OAAQ,UACRjB,WAAY7E,IAAgB0F,EAAS,SAAW,GAChDL,QAAS,EACTU,OAAQ,GACR/B,UAEFrF,EAAAA,EAAAA,KAAA,SACEyH,UAAU,EACVC,aAAY,GAAAvB,OAAMwB,OAAOZ,EAAS,GAAGa,SAAS,EAAG,MACjDjC,MAAO,CACL5D,MAAO,OACPgE,cAAe,OACfC,OAAQ,OACRE,WAAY,cACZ2B,WAAY,OACZzI,OAAQ,OACRuH,UAAW,cAMlB1F,EAAOwC,KAAI,SAACmD,EAAakB,GACxB,OACE9H,EAAAA,EAAAA,KAAA,MACEkH,UAAS,UAAAf,OAAYY,EAAM,SAAAZ,OAAQ2B,EAAM,KACzCC,SAAU,EACVC,cAAe,WACRtI,IAGL2D,IACI5B,IAAqBsF,GACvBrF,EAAoB,MAEpBnB,EAAYiE,QAAQuC,GAAQlC,SAAU,EAElCxF,GACFA,EAAgB,KAAM,KAAM0H,EAAQ,QAGtCxG,EAAYiE,QAAQuC,GAAQlC,SAAU,EAEtCnD,EAAoBqF,GAChB1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,OAG1CzF,EAAe,MACjB,EACA2G,QAAS,WACP3G,EAAeyF,EACjB,EACAzH,UAAW,SAAC4I,GA0CV,GAzCI5I,GACFA,EAAUoG,EAAQqB,EAAQmB,GAEd,YAAVA,EAAEvE,IACJrC,GAAe,SAAC6G,GACd,IAAMC,EAAQC,KAAKC,IAAIH,EAAO,GAAI,GAC5BI,EAAKC,SAASC,cAAc,WAADtC,OACpBiC,IAGb,KAAIA,EAAQ,GASZ,OAHIG,GACFA,EAAGG,QAEEN,EARDvI,GACFA,GAQN,IACmB,cAAVqI,EAAEvE,KACXrC,GAAe,SAAC6G,GACd,IAAMC,EAAQC,KAAKM,IAAIR,EAAO,EAAGtH,EAAKuB,OAAS,GACzCmG,EAAKC,SAASC,cAAc,WAADtC,OACpBiC,IAGb,OAAIG,IACFA,EAAGG,QACCN,GAAS,KACXhI,EAAiBoE,QAAQmB,MAAME,SAAW,SAC1C+C,YAAW,WACTxI,EAAiBoE,QAAQmB,MAAME,SAAW,MAC5C,GAAG,KACIuC,GAGJA,CACT,IAEa,UAAXF,EAAEW,MAA+B,gBAAXX,EAAEW,KAAwB,CAGlD,GAFAX,EAAEhD,kBAEGxF,EACH,OAGFgC,EAAoBqF,GAEhB1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,MAExCzF,EAAe,KACjB,CACF,EAEAqE,MAAO,CACLK,OAAQ,OACRS,SAAU,OACVC,QAAS,UACTS,OAAQ,UACR/H,OAAQ,OACRyI,WAAY,QAEdiB,cAAe,SAACZ,GAAC,OAAKlD,EAAiBkD,EAAGnB,EAAO,EAAC1B,UAGhDrF,EAAAA,EAAAA,KAAA,SACEyH,UAAU,EACVtE,MAAOuC,EAAOoC,GACdnC,MAAO,CACL5D,MAAO6E,EAAO7E,MACdgE,cAAe,OACfC,OAAQ,OACRE,WAAY,cACZ2B,WAAY,OACZzI,OAAQ,OACRuH,UAA2B,WAAhBC,EAAOC,KAAoB,QAAU,WAtBjDiB,EA4BX,MAxLKf,EA2LX,IAEIS,GAAoB1I,EAAAA,EAAAA,aACxB,SAAAiK,EAWE/J,GACI,IAVFU,EAAiBqJ,EAAjBrJ,kBACAgC,EAAmBqH,EAAnBrH,oBACAqF,EAAMgC,EAANhC,OACArB,EAAMqD,EAANrD,OACArG,EAAe0J,EAAf1J,gBACAiC,EAAcyH,EAAdzH,eACAf,EAAWwI,EAAXxI,YACAuE,EAA0BiE,EAA1BjE,2BAIF,OACE9E,EAAAA,EAAAA,KAAA,SACEhB,IAAK,SAACgK,GAAE,OAAMzI,EAAYiE,QAAQuC,GAAUiC,CAAE,EAC9CrD,MAAO,CACLwB,OAAQ,UACRC,OAAQ,iBACRtB,SAAU,YAEZ2B,UAAU,EACVZ,KAAK,WACLoB,QAAS,SAACC,GACR,GAAKxI,EAIL,OADAoF,EAA2BiC,GACvBmB,EAAEe,cAAcpE,SAClBnD,EAAoBqF,GAChB1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,WAExCzF,EAAe,QAGfI,EAAoB,MAChBrC,GACFA,EAAgB,KAAM,KAAM0H,EAAQ,WAEtCzF,EAAe,MAGnB,GAGN,IAGIgE,GAAcxG,EAAAA,EAAAA,aAClB,SAAAoK,EAAkElK,GAAnDkK,EAAZC,aAAwE,IAA1DC,EAAaF,EAAbE,cAA+B7D,GAAF2D,EAAdG,eAAyBH,EAAT3D,WAC9C+D,GAAkC5I,EAAAA,EAAAA,WAAS,GAAM6I,GAAA3I,EAAAA,EAAAA,GAAA0I,EAAA,GAA1CnE,EAASoE,EAAA,GAAEC,EAAYD,EAAA,GAC9BE,GAAgD/I,EAAAA,EAAAA,WAAS,GAAMgJ,GAAA9I,EAAAA,EAAAA,GAAA6I,EAAA,GAAxDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,GAA0BnJ,EAAAA,EAAAA,WAAS,GAAMoJ,GAAAlJ,EAAAA,EAAAA,GAAAiJ,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBrE,EAAa,WACjBmE,GAAoB,GACpBhB,YAAW,WACTY,GAAa,GACbI,GAAoB,GAChBR,GAAeA,GACrB,GAAG,IACL,EACMa,GAAgB5J,EAAAA,EAAAA,QAAYoF,GAqBlC,OAnBAjD,EAAAA,EAAAA,qBAAoBxD,GAAK,iBAAO,CAC9BmG,UAAW,WACTqE,GAAa,EACf,EACAU,WAAY,WACVV,GAAa,EACf,EACAO,MAAAA,EACAtE,WAAAA,EACD,KAEDtD,EAAAA,EAAAA,YAAU,WACRgI,OAAOC,iBAAiB,WAAW,SAAClC,GACpB,WAAVA,EAAEvE,KACJsG,EAAczF,SAElB,GACF,GAAG,IAEIW,GACLC,EAAAA,EAAAA,MAAAnF,EAAAA,SAAA,CAAAoF,SAAA,EACErF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLG,SAAU,QACVQ,IAAK,EACL+D,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPrE,WAAY,cACZK,OAAQ,MAEV0B,QAAS,WACP+B,GAAS,GACTpB,YAAW,WACToB,GAAS,EACX,GAAG,IACL,KAEF5E,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLvG,OAAQ,OACR2C,MAAO,OACPiE,OAAQ,oBACRF,SAAU,WACVwE,KAAM,MACNhE,IAAK,MACLkE,UAAW,wBACXnD,QAAS,OACToD,cAAe,SACflE,OAAQoD,GAAoB,IAAM,IAClCe,QAASf,EAAmB,EAAI,EAChCgB,WAAY,YACZ1E,UAAW,sCACXZ,SAAA,EAEFD,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLvG,OAAQ,OACR8G,WAAY,QACZmB,QAAS,OACTE,eAAgB,gBAChBb,QAAS,MACTZ,SAAU,WACVwB,WAAY,UACZjC,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,QAAM2F,MAAO,CAAEc,SAAU,OAAQmE,WAAY,QAASvF,SAAC,YACvDrF,EAAAA,EAAAA,KAAA,UACEkH,UAAU,uBACVvB,MAAO,CACLe,QAAS,QACTmE,aAAc,MACd3E,WAAY,QACZ4E,MAAO,QACP1L,OAAQ,OACR0G,SAAU,WACVQ,IAAK,EACLiE,MAAO,GAETtC,QAAS,WACPxC,GACF,EAAEJ,UAEFrF,EAAAA,EAAAA,KAAC+K,EAAAA,EAAS,CAACC,GAAI,CAAEvE,SAAU,eAG9BlB,GACDvF,EAAAA,EAAAA,KAAA,SAAAqF,SAAA,2KAUF,IACN,IAGW4F,GAAkCnM,EAAAA,EAAAA,aAC7C,SAAAoM,EAeElM,GACI,IAdFC,EAAOiM,EAAPjM,QACSkM,GADFD,EACP/L,KAAS+L,EACT9L,QAAAA,OAAM,IAAA+L,EAAG,QAAOA,EAChB9L,EAAe6L,EAAf7L,gBACAC,EAAS4L,EAAT5L,UAAS8L,EAAAF,EACT1L,aAAAA,OAAY,IAAA4L,GAAQA,EAAAC,EAAAH,EACpBxL,kBAAmBC,OAAkB,IAAA0L,GAAOA,EAC5CzL,EAAcsL,EAAdtL,eACAC,EAAoBqL,EAApBrL,qBACAyL,EAAUJ,EAAVI,WACAC,EAAYL,EAAZK,aACAC,EAAeN,EAAfM,gBAIIpL,GAAmBC,EAAAA,EAAAA,QAAY,MAC/BG,GAAWH,EAAAA,EAAAA,QAAgC,MACjDoL,GAAwB/K,EAAAA,EAAAA,UAAS,IAAGgL,GAAA9K,EAAAA,EAAAA,GAAA6K,EAAA,GAA7B5K,EAAI6K,EAAA,GAAE5K,EAAO4K,EAAA,GACpBC,GAA4BjL,EAAAA,EAAAA,UAAS,IAAGkL,GAAAhL,EAAAA,EAAAA,GAAA+K,EAAA,GAAjC1K,EAAM2K,EAAA,GAAE1K,EAAS0K,EAAA,GACxBC,GAAsCnL,EAAAA,EAAAA,UAAc,GAAEoL,GAAAlL,EAAAA,EAAAA,GAAAiL,EAAA,GAA/CxK,EAAWyK,EAAA,GAAExK,EAAcwK,EAAA,GAClCC,GAAgDrL,EAAAA,EAAAA,UAAqB,IAAGsL,GAAApL,EAAAA,EAAAA,GAAAmL,EAAA,GAAjEtK,EAAgBuK,EAAA,GAAEtK,EAAmBsK,EAAA,GACtCrK,EAAgBV,EAAOW,QAAO,SAACC,EAAQC,GAAM,OAAKD,EAAIC,EAAEC,KAAK,GAAE,GACrEkK,GACEvL,EAAAA,EAAAA,UAASf,GAAmBuM,GAAAtL,EAAAA,EAAAA,GAAAqL,EAAA,GADvBvM,EAAiBwM,EAAA,GAAEhK,EAAoBgK,EAAA,GA+E9C,OA5EA/J,EAAAA,EAAAA,YAAU,WACJlD,EAAQmD,OAAS,GACnBlB,EAAUjC,EAAQoD,QAAO,SAACC,GAAQ,OAAMA,EAAIC,IAAI,IAEpD,GAAG,CAACtD,KAEJuD,EAAAA,EAAAA,qBAAoBxD,GAAK,iBAAO,CAC9ByD,eAAgB,SAACC,GACf,OAAO7B,EAAK8B,MAAK,SAACC,GAAa,OAAKA,EAAS,KAAOF,CAAO,GAC7D,EACArB,YAAa,kBAAMA,CAAW,EAC9BwB,QAAS,WAEP,OADaC,EAAAA,EAAAA,GAAOjC,EAEtB,EACAsL,oBAAqB,WACnB,IAAMpJ,GAAOD,EAAAA,EAAAA,GAAOjC,GACpB,OAAOY,EACJgC,KAAI,SAAC2E,GAAK,OAAKrF,EAAQqF,EAAM,IAC7B/F,QAAO,SAAC+J,GAAI,YAAcC,IAATD,CAAkB,GACxC,EACAtL,QAAS,SAACiC,GACRjC,EAAQiC,EACV,EACAC,WAAY,WACV,OAAO/D,CACT,EACAgE,WAAY,WACVnC,EAAQ,IACRQ,EAAe,GACfI,EAAoB,GACtB,EACAwB,eAAgB,WACd,OAAOzB,CACT,EACAH,eAAgB,SAAC6B,GACf,OAAOzB,EAAoByB,EAC7B,EACAG,gBAAiB,SAACH,GAChB,OAAO7B,EAAe6B,EACxB,EACAK,gBAAiB,SAACT,GAChBjC,EACEiC,EAAQU,KAAI,SAACnB,GACX,OAAOrD,EAAQwE,KAAI,SAACC,GAAQ,OAAKpB,EAAIoB,EAAIC,IAAI,GAC/C,IAEJ,EACAzB,qBAAsB,SAACqB,GACrBrB,EAAqBqB,EACvB,EACAK,iBAAkB,WAkBhB,OAjBad,EAAAA,EAAAA,GAAOjC,GACa4C,KAAI,SAACnB,GAapC,MAZa,CACXuB,SAAUvB,EAAI,GACdwB,WAAYxB,EAAI,GAChByB,WAAYzB,EAAI,GAChB0B,SAAU1B,EAAI,GACd2B,OAAQ3B,EAAI,GACZ4B,cAAe5B,EAAI,GACnB6B,aAAc7B,EAAI,GAClB8B,YAAa9B,EAAI,GACjB+B,MAAO/B,EAAI,GACXgC,SAAUhC,EAAI,GAGlB,GAGF,EACAiC,eAAgB,kBAAM/D,EAASgE,OAAO,EACtCC,iBAAkB,kBAAMrE,EAAiBoE,OAAO,EAChD9E,kBAAAA,EACD,KAGCM,EAAAA,EAAAA,KAAA,OACEhB,IAAKoB,EACLuF,OAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACH7D,MAAO,OACP3C,OAAAA,EACAyG,SAAU,OACVC,SAAU,WACVC,cAAevG,EAAe,OAAS,OACvCwG,OAAQxG,EAAe,oBAAsB,oBAC7CyG,UAAU,gFAEPrG,GAAc,IACjBsG,WAAY,YACZb,UAEFD,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLG,SAAU,WACV/D,MAAM,GAADoE,OAAKxE,EAAa,MACvBvC,OAAQ,QACRiG,SAAA,EAEFD,EAAAA,EAAAA,MAAA,SACEgB,GAAG,2BACHT,MAAO,CACLU,eAAgB,WAChBtE,MAAO,OACP+D,SAAU,WACVI,WAAY,WACZb,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAAqF,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACG3F,IACCM,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACL5D,MAAO,OACPiE,OAAQ,OACRF,SAAU,SACVQ,IAAK,EACLC,OAAQ,EACRL,WAAY,WACZb,UAEFrF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACL5D,MAAO,OACP3C,OAAQ,OACR0G,SAAU,WACVuB,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChBlC,UAEFrF,EAAAA,EAAAA,KAAA,SACE2F,MAAO,CACLwB,OAAQ,UACRC,OAAQ,iBACRtB,SAAU,YAEZ2B,UAAU,EACVZ,KAAK,WACLoB,QAAS,SAACC,GACJA,EAAEe,cAAcpE,QACdyG,GACFA,IAGEC,GACFA,GAGN,QAKPtK,EAAOwC,KAAI,SAACmD,EAAahC,GACxB,OACE5E,EAAAA,EAAAA,KAAA,MAEE2F,MAAO,CACL5D,MAAO6E,EAAO7E,MACdyE,YAAa,oBACbV,SAAU,SACVQ,IAAK,EACLC,OAAQ,EACRL,WAAY,UACZO,SAAU,OACVC,QAAS,UACTC,UAA2B,WAAhBC,EAAOC,KAAoB,SAAW,QACjDxB,SAEDuB,EAAOE,OAbHlC,EAgBX,UAGJ5E,EAAAA,EAAAA,KAAA,SAAOhB,IAAKwB,EAAS6E,SACd,OAAJxE,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,KAAI,SAACiC,EAAaqB,GACvB,OACE3B,EAAAA,EAAAA,MAAA,MACE,aAAY2B,EAEZG,UAAS,OAAAf,OACP9E,IAAgB0F,GAChBtF,EAAiB6K,SAASvF,GACtB,0BACA1F,IAAgB0F,EAChB,qBACAtF,EAAiB6K,SAASvF,GAC1B,sBACA,IACH1B,SAAA,CAEF3F,IACCM,EAAAA,EAAAA,KAAA,MACE2F,MAAO,CACLG,SAAU,WACVE,OAAQ,OACRmB,OAAQ,UACRjB,WAAY7E,IAAgB0F,EAAS,SAAW,GAChDL,QAAS,EACTU,OAAQ,GACR/B,UAEFrF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACL5D,MAAO,OACP3C,OAAQ,OACR0G,SAAU,WACVuB,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChBlC,UAEFrF,EAAAA,EAAAA,KAAA,SACE2F,MAAO,CACLwB,OAAQ,UACRC,OAAQ,iBACRtB,SAAU,YAEZ2B,UAAU,EACV5C,QAASpD,EAAiB6K,SAASvF,GACnCF,KAAK,WACLoB,QAAS,WACHuD,GAAmBA,EAAgB9F,IAGlChG,IAID+B,EAAiB6K,SAASvF,GAC5BrF,GAAoB,SAAC6K,GAAM,OACzBA,EAAElK,QAAO,SAACmK,GAAM,OAAKA,IAAMzF,CAAM,GAAC,IAGpCrF,GAAoB,SAAC6K,GAAM,SAAApG,QAAArD,EAAAA,EAAAA,GAASyJ,GAAC,CAAExF,GAAS,IAG9C1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,MAE1C,QAMP9F,EAAOwC,KAAI,SAACmD,EAAakB,GACxB,OACE9H,EAAAA,EAAAA,KAAA,MACEkH,UAAS,UAAAf,OAAYY,EAAM,SAAAZ,OAAQ2B,EAAM,KACzCC,SAAU,EACVC,cAAe,WACb,KAAIwD,IAAmBA,EAAgB9F,KAGlChG,EAIL,OAAI+B,EAAiB6K,SAASvF,IAC5BrF,GAAoB,SAAC6K,GAAM,OACzBA,EAAElK,QAAO,SAACmK,GAAM,OAAKA,IAAMzF,CAAM,GAAC,SAGhC1H,GACFA,EAAgB,KAAM,KAAM0H,EAAQ,SAKtCrF,GAAoB,SAAC6K,GAAM,SAAApG,QAAArD,EAAAA,EAAAA,GAASyJ,GAAC,CAAExF,GAAS,SAE5C1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,OAG5C,EACAkB,QAAS,WACP3G,EAAeyF,EACjB,EACAzH,UAAW,SAAC4I,GA6CV,GA5CI5I,GACFA,EAAUoG,EAAQqB,EAAQmB,GAEd,YAAVA,EAAEvE,IACJrC,GAAe,SAAC6G,GACd,IAAMC,EAAQC,KAAKC,IAAIH,EAAO,GAAI,GAC5BI,EAAKC,SAASC,cAAc,WAADtC,OACpBiC,IAEb,KAAIA,EAAQ,GASZ,OAHIG,GACFA,EAAGG,QAEEN,EARDvI,GACFA,GAQN,IACmB,cAAVqI,EAAEvE,KACXrC,GAAe,SAAC6G,GACd,IAAMC,EAAQC,KAAKM,IACjBR,EAAO,EACPtH,EAAKuB,OAAS,GAEVmG,EAAKC,SAASC,cAAc,WAADtC,OACpBiC,IAEb,OAAIG,IACFA,EAAGG,QACCN,GAAS,KACXhI,EAAiBoE,QAAQmB,MAAME,SAC7B,SACF+C,YAAW,WACTxI,EAAiBoE,QAAQmB,MAAME,SAC7B,MACJ,GAAG,KACIuC,GAGJA,CACT,IAGW,UAAXF,EAAEW,MACS,gBAAXX,EAAEW,KACF,CAGA,GAFAX,EAAEhD,kBAEGxF,EACH,OAGE+B,EAAiB6K,SAASvF,GAC5BrF,GAAoB,SAAC6K,GAAM,OACzBA,EAAElK,QAAO,SAACmK,GAAM,OAAKA,IAAMzF,CAAM,GAAC,IAGpCrF,GAAoB,SAAC6K,GAAM,SAAApG,QAAArD,EAAAA,EAAAA,GAASyJ,GAAC,CAAExF,GAAS,IAE9C1H,GACFA,EAAgBqG,EAAQ,KAAMqB,EAAQ,KAE1C,CACF,EAEApB,MAAO,CACLK,OAAQ,OACRS,SAAU,OACVC,QAAS,UACTS,OAAQ,UACR/H,OAAQ,OACRyI,WAAY,QACZxC,UAGArF,EAAAA,EAAAA,KAAA,SACEyH,UAAU,EACVtE,MAAOuC,EAAOoC,GACdnC,MAAO,CACL5D,MAAO6E,EAAO7E,MACdgE,cAAe,OACfC,OAAQ,OACRE,WAAY,cACZ2B,WAAY,OACZzI,OAAQ,OACRuH,UACkB,WAAhBC,EAAOC,KAAoB,QAAU,WAtBxCiB,EA4BX,MApMKf,EAuMX,UAGJ/G,EAAAA,EAAAA,KAAA,SAAAqF,SAAA,0oDA6CR,IAGEoH,EAAiB,GACjBC,EAAwB,GACfC,EAA4B,SAAHC,GAO1B,IANV3L,EAAM2L,EAAN3L,OACA4L,EAAKD,EAALC,MACAxN,EAAeuN,EAAfvN,gBACAC,EAASsN,EAATtN,UACAwN,EAAWF,EAAXE,YACAC,EAAOH,EAAPG,QAEAC,GAAwBtM,EAAAA,EAAAA,WAAS,GAAMuM,GAAArM,EAAAA,EAAAA,GAAAoM,EAAA,GAAhCE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACdG,GAAiB/M,EAAAA,EAAAA,QAAyB,MA8BhD,SAASmF,IACHuH,MADyBM,UAAAjL,OAAA,QAAAiK,IAAAgB,UAAA,KAAAA,UAAA,KAE3BN,IAEFI,GAAQ,GACRV,EAAY,EACd,CACA,IAAMa,EAAyB,WAAO,IAADC,EAAAC,EAC7BC,GAAWpN,EAAAA,EAAAA,QAAY,MAC7BqN,GAA0BhN,EAAAA,EAAAA,WAAS,GAAMiN,GAAA/M,EAAAA,EAAAA,GAAA8M,EAAA,GAAlC3D,EAAK4D,EAAA,GAAE3D,EAAQ2D,EAAA,GACtBC,GAAwBlN,EAAAA,EAAAA,UAAS,IAAGmN,GAAAjN,EAAAA,EAAAA,GAAAgN,EAAA,GAA7B/M,EAAIgN,EAAA,GAAE/M,EAAO+M,EAAA,GACZC,GAAyBC,EAAAA,EAAAA,KAAzBD,qBAkBR,OAhBA3L,EAAAA,EAAAA,YAAU,WACJsK,EAAUrK,OAAS,IACjBgL,EAAe5I,UACjB4I,EAAe5I,QAAQrB,MAAQuJ,GAEjC5L,EAAQ2L,GAEZ,GAAG,CAAC3L,KAEJqB,EAAAA,EAAAA,YAAU,WACc,IAAD6L,EAAjBnN,EAAKuB,OAAS,IAChBqK,EAAY5L,EACI,QAAhBmN,EAAAP,EAASjJ,eAAO,IAAAwJ,GAAhBA,EAAkBxK,gBAAgB3C,GAEtC,GAAG,CAACA,IAEGqM,GACL9H,EAAAA,EAAAA,MAAA,OAAKgB,GAAG,eAAcf,SAAA,EACpBrF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLG,SAAU,QACVQ,IAAK,EACL+D,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPrE,WAAY,cACZK,OAAQ,MAEV0B,QAAS,WACP+B,GAAS,GACTpB,YAAW,WACToB,GAAS,EACX,GAAG,IACL,KAGF5E,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLO,WAAY,UACZnE,MAAO+K,EACHA,EAAY/C,EAAO9I,GACnB8I,EACA,QACA,QACJ3K,OAAQ2K,EAAQ,QAAU,QAC1BjE,SAAU,WACVS,OAAQ,OACRD,IAAK,MACLgE,KAAM,MACNE,UAAW,uBACXvE,UAAW,qCACXgI,UAAW,aACX5G,QAAS,OACToD,cAAe,UACfpF,SAAA,EAEFD,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLvG,OAAQ,OACR8G,WAAY,QACZmB,QAAS,OACTE,eAAgB,gBAChBb,QAAS,MACTZ,SAAU,WACVwB,WAAY,UACZjC,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,QAAM2F,MAAO,CAAEc,SAAU,OAAQmE,WAAY,QAASvF,SAAC,YACvDrF,EAAAA,EAAAA,KAAA,UACEkH,UAAU,uBACVvB,MAAO,CACLe,QAAS,QACTmE,aAAc,MACd3E,WAAY,QACZ4E,MAAO,QACP1L,OAAQ,OACR0G,SAAU,WACVQ,IAAK,EACLiE,MAAO,GAETtC,QAAS,WACPzC,GACF,EAAEH,UAEFrF,EAAAA,EAAAA,KAAC+K,EAAAA,EAAS,CAACC,GAAI,CAAEvE,SAAU,gBAG/BzG,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLe,QAAS,OACTrB,UAEFrF,EAAAA,EAAAA,KAACkO,EAAAA,GAAS,CACRtO,eAAgB,CACdmC,MAAO,QAET+E,MAAO,CACLqH,MAAO,YACPxI,MAAO,CACLc,SAAU,OACVmE,WAAY,OACZ7I,MAAO,OACPsF,QAAS,SAGb+G,MAAO,CACLvH,KAAM,OACNlB,MAAO,CAAE5D,MAAO,QAChBzC,UAAU,SAAD+O,GAAA,OAAAd,EAAAA,IAAAe,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAOvG,GAAC,IAAAwG,EAAAC,EAAAC,EAAArG,EAAAsG,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAA5G,KAAA4G,EAAAC,MAAA,UACF,gBAAX9G,EAAEW,MAAqC,UAAXX,EAAEW,KAAgB,CAAAkG,EAAAC,KAAA,QAGvB,OAFzBtC,EAAwBxE,EAAEe,cAAc9F,MAClCuL,EAAc7B,EAAM3E,EAAEe,cAAc9F,OAC1C8L,QAAQC,IAAIR,GAAaK,EAAAC,KAAA,EACRlB,EAAqBY,GAAa,KAAD,EAA5CC,EAAEI,EAAAI,KACRrO,EAAQ6N,EAAG9N,KAAKA,MAAM,OAGT,cAAXqH,EAAEW,QACEN,EAAKC,SAASC,cAAc,gBAI1BoG,EAAgBpB,EAASjJ,QAAQC,mBAEvC8D,EAAGG,MAAM,CACP0G,eAAe,IAEjBP,EAAclJ,MAAME,SAAW,UAC/BwJ,EAAAA,EAAAA,GAAK,KAAKC,MAAK,WACbT,EAAclJ,MAAME,SAAW,MACjC,KAEc,QAAhB+I,EAAAnB,EAASjJ,eAAO,IAAAoK,GAAhBA,EAAkBtL,gBAAgB,IACnC,wBAAAyL,EAAAQ,OAAA,GAAAd,EAAA,MACFe,MAAA,KAAAnC,UAAA,GAEHoC,SAAUrC,EACVsC,MAAM1P,EAAAA,EAAAA,KAAC2P,EAAAA,EAAU,CAAC3E,GAAI,CAAEvE,SAAU,UAClCmJ,YAAW,SAAAC,GAAA,OAAArC,EAAAA,IAAAc,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAsB,EAAO5H,GAAC,IAAA6H,EAAArB,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAO,MAAA,SAAAkB,GAAA,cAAAA,EAAA7H,KAAA6H,EAAAhB,MAAA,OAIqC,OAHxD9G,EAAEhD,iBACEkI,EAAe5I,UACjBkI,EAAwBU,EAAe5I,QAAQrB,OAC3CuL,EAAc7B,EAA4B,QAAvBkD,EAAC3C,EAAe5I,eAAO,IAAAuL,OAAA,EAAtBA,EAAwB5M,OAAM6M,EAAAhB,KAAA,EACvClB,EAAqBY,GAAa,KAAD,EAA5CC,EAAEqB,EAAAb,KACRrO,EAAQ6N,EAAG9N,KAAKA,MAAM,wBAAAmP,EAAAT,OAAA,GAAAO,EAAA,MACvBN,MAAA,KAAAnC,UAAA,OAGLrN,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLsK,KAAM,GACN5K,UAEFrF,EAAAA,EAAAA,KAACnB,EAAiB,CAChBI,QAASgC,EACT7B,OAAQ,OACRJ,IAAKyO,EACLpO,gBAAiBA,EACjBC,UAAWA,EACXO,qBAAsB,WAAO,IAADqQ,EACJ,QAAtBA,EAAA9C,EAAe5I,eAAO,IAAA0L,GAAtBA,EAAwBxH,OAC1B,OAGJ1I,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CAAEe,QAAS,UAAWrB,UAChCD,EAAAA,EAAAA,MAAA,QAAMO,MAAO,CAAEc,SAAU,OAAQmE,WAAY,QAASvF,SAAA,CAAC,gBACvCxE,EAAKuB,aAGvBpC,EAAAA,EAAAA,KAAA,SAAAqF,SAAA,4RAWJrF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,GAEJ,EAEA,MAAO,CACLkQ,UAlOF,WACE,IAAMC,EAAO5H,SAAS4H,KAChBC,EAAM7H,SAAS8H,cAAc,OACnCD,EAAIjK,GAAK,eAELoC,SAAS+H,eAAe,iBAC1BH,EAAKI,YAAYhI,SAAS+H,eAAe,iBAE3CH,EAAKK,aAAaJ,EAAK7H,SAAS+H,eAAe,UAC/ClB,EAAAA,EAAAA,GAAK,KAAKC,MAAK,WACbe,EAAIK,UAAYC,EAAAA,gBAA8B3Q,EAAAA,EAAAA,KAACsN,EAAsB,IACvE,IAEAH,GAAQ,GACRvE,YAAW,WACT,GAAIwE,EAAe5I,QAAS,CAC1B,IAAMS,EAAQ,IAAI2L,cAAc,UAAW,CACzC/H,KAAM,QACNgI,SAAS,IAEXzD,EAAe5I,QAAQkE,QACvB0E,EAAe5I,QAAQsM,cAAc7L,GACrC2D,YAAW,WAAO,IAADmI,EACO,QAAtBA,EAAA3D,EAAe5I,eAAO,IAAAuM,GAAtBA,EAAwBrI,OAC1B,GAAG,IACL,CACF,GAAG,IACL,EAwMElD,WAAAA,EACA8H,uBAAAA,EAEJ,EAEI0D,EAAkB,GAClBC,EAAyB,GAChBC,EAAoC,SAAHC,GAQlC,IAPVlQ,EAAMkQ,EAANlQ,OACAmQ,EAAID,EAAJC,KACA/R,EAAe8R,EAAf9R,gBACAC,EAAS6R,EAAT7R,UAEAyN,GADWoE,EAAXrE,YACOqE,EAAPpE,SAAOsE,EAAAF,EACPG,KAAAA,OAAI,IAAAD,EAAG,QAAOA,EAEdE,GAAwB7Q,EAAAA,EAAAA,WAAS,GAAM8Q,GAAA5Q,EAAAA,EAAAA,GAAA2Q,EAAA,GAAhCrE,EAAIsE,EAAA,GAAErE,EAAOqE,EAAA,GACdpE,GAAiB/M,EAAAA,EAAAA,QAAyB,MA2BhD,SAASmF,IACHuH,MADyBM,UAAAjL,OAAA,QAAAiK,IAAAgB,UAAA,KAAAA,UAAA,KAE3BN,IAEFI,GAAQ,GACR6D,EAAa,EACf,CAmOA,MAAO,CACLb,UAnQF,WAAyC,IAAtBsB,EAAcpE,UAAAjL,OAAA,QAAAiK,IAAAgB,UAAA,GAAAA,UAAA,GAAG,GAC5B+C,EAAO5H,SAAS4H,KAChBC,EAAM7H,SAAS8H,cAAc,OACnCD,EAAIjK,GAAK,eAELoC,SAAS+H,eAAe,iBAC1BH,EAAKI,YAAYhI,SAAS+H,eAAe,iBAC3CH,EAAKK,aAAaJ,EAAKD,EAAKsB,YAE5BvE,GAAQ,IACRkC,EAAAA,EAAAA,GAAK,KAAKC,MAAK,WACb,GAAIlC,EAAe5I,QAAS,CAC1B4I,EAAe5I,QAAQrB,MAAQsO,EAC/B,IAAMxM,EAAQ,IAAI2L,cAAc,UAAW,CACzC/H,KAAM,QACNgI,SAAS,IAEXzD,EAAe5I,QAAQkE,QACvB0E,EAAe5I,QAAQsM,cAAc7L,IACrCoK,EAAAA,EAAAA,GAAK,KAAKC,MAAK,WAAO,IAADqC,EACG,QAAtBA,EAAAvE,EAAe5I,eAAO,IAAAmN,GAAtBA,EAAwBjJ,OAC1B,GACF,CACF,GACF,EA4OElD,WAAAA,EACA8H,uBArO6B,WAAO,IAADsE,EAAAC,EACnCC,GAA0BC,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,EAAIH,EAAJG,KAAMC,EAAOJ,EAAPI,QACRzE,GAAWpN,EAAAA,EAAAA,QAAY,MAC7B8R,GAA0BzR,EAAAA,EAAAA,WAAS,GAAM0R,GAAAxR,EAAAA,EAAAA,GAAAuR,EAAA,GAAlCpI,EAAKqI,EAAA,GAAEpI,EAAQoI,EAAA,GACtBC,GAAkC3R,EAAAA,EAAAA,WAAS,GAAM4R,GAAA1R,EAAAA,EAAAA,GAAAyR,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAwB/R,EAAAA,EAAAA,UAAS,IAAGgS,GAAA9R,EAAAA,EAAAA,GAAA6R,EAAA,GAA7B5R,EAAI6R,EAAA,GAAE5R,EAAO4R,EAAA,GAEpB,SAASC,EAAOC,GACdJ,GAAa,GACbN,EACGW,KAAKzB,EAAMwB,EAAU,CACpBE,QAAS,CACPC,cAAc,UAAD5M,OAAgB,OAAJ8L,QAAI,IAAJA,OAAI,EAAJA,EAAMe,gBAGlC1D,MAAK,SAAC2D,GAAc,IAADC,EAClBpS,EAAqB,QAAdoS,EAACD,EAASpS,YAAI,IAAAqS,OAAA,EAAbA,EAAerS,MACvB2R,GAAa,EACf,IACCW,OAAM,SAACC,GACNZ,GAAa,GACbvD,QAAQC,IAAIkE,EACd,IACCC,SAAQ,WACPb,GAAa,EACf,GACJ,CA4BA,OA1BArQ,EAAAA,EAAAA,YAAU,WACJ6O,EAAW5O,OAAS,IAClBgL,EAAe5I,UACjB4I,EAAe5I,QAAQrB,MAAQ8N,GAEjCnQ,EAAQkQ,GAEZ,GAAG,CAAClQ,KAEJqB,EAAAA,EAAAA,YAAU,WAAO,IAADmR,EACVzS,EAAKuB,OAAS,IAChB4O,EAAanQ,GAEC,QAAhByS,EAAA7F,EAASjJ,eAAO,IAAA8O,GAAhBA,EAAkB9P,gBAAgB3C,EACpC,GAAG,CAACA,IAYGqM,EACLqG,EAAAA,cACEnO,EAAAA,EAAAA,MAAA,OAAKgB,GAAG,eAAcf,SAAA,EACpBrF,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLG,SAAU,QACVQ,IAAK,EACL+D,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPrE,WAAY,cACZK,OAAQ,MAEV0B,QAAS,WACP+B,GAAS,GACTpB,YAAW,WACToB,GAAS,EACX,GAAG,IACL,KAGF5E,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLO,WAAY,UACZnE,MAlCV,SAAqBgI,GACnB,MAAa,UAATuH,EACKvH,EAAQ,QAAU,QACP,WAATuH,EACFvH,EAAQ,QAAU,QAElBA,EAAQ,QAAU,OAE7B,CA0BiB+C,CAAY/C,GACnB3K,OAAQ2K,EAAQ,QAAU,QAC1BjE,SAAU,WACVS,OAAQ,OACRD,IAAK,MACLgE,KAAM,MACNE,UAAW,uBACXvE,UAAW,qCACXgI,UAAW,aACX5G,QAAS,OACToD,cAAe,UACfpF,SAAA,CAEDkN,IAAavS,EAAAA,EAAAA,KAACwT,EAAAA,EAAO,KACtBpO,EAAAA,EAAAA,MAAA,OACEO,MAAO,CACLvG,OAAQ,OACR8G,WAAY,QACZmB,QAAS,OACTE,eAAgB,gBAChBb,QAAS,MACTZ,SAAU,WACVwB,WAAY,UACZjC,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,QAAM2F,MAAO,CAAEc,SAAU,OAAQmE,WAAY,QAASvF,SAAC,YAGvDrF,EAAAA,EAAAA,KAAA,UACEkH,UAAU,uBACVvB,MAAO,CACLe,QAAS,QACTmE,aAAc,MACd3E,WAAY,QACZ4E,MAAO,QACP1L,OAAQ,OACR0G,SAAU,WACVQ,IAAK,EACLiE,MAAO,GAETtC,QAAS,WACPzC,GACF,EAAEH,UAEFrF,EAAAA,EAAAA,KAAC+K,EAAAA,EAAS,CAACC,GAAI,CAAEvE,SAAU,gBAG/BzG,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLe,QAAS,OACTrB,UAEFrF,EAAAA,EAAAA,KAACkO,EAAAA,GAAS,CACRtO,eAAgB,CACdmC,MAAO,QAET+E,MAAO,CACLqH,MAAO,YACPxI,MAAO,CACLc,SAAU,OACVmE,WAAY,OACZ7I,MAAO,OACPsF,QAAS,SAGb+G,MAAO,CACLvH,KAAM,OACNlB,MAAO,CAAE5D,MAAO,QAChBzC,UAAU,SAADmU,GAAA,OAAA7B,EAAAA,IAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAkF,EAAOxL,GAAC,IAAAyL,EAAApL,EAAAsG,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAA8E,GAAA,cAAAA,EAAAzL,KAAAyL,EAAA5E,MAAA,OACF,gBAAX9G,EAAEW,MAAqC,UAAXX,EAAEW,OAChCoI,EAAyB/I,EAAEe,cAAc9F,MACzCwP,EAAO,CAAElB,OAAQvJ,EAAEe,cAAc9F,SAGpB,cAAX+E,EAAEW,QACEN,EAAKC,SAASC,cAAc,gBAI1BoG,EACJpB,EAASjJ,QAAQC,mBAEnB8D,EAAGG,MAAM,CACP0G,eAAe,IAEjBP,EAAclJ,MAAME,SAAW,UAC/BwJ,EAAAA,EAAAA,GAAK,KAAKC,MAAK,WACbT,EAAclJ,MAAME,SAAW,MACjC,KAEc,QAAhB8N,EAAAlG,EAASjJ,eAAO,IAAAmP,GAAhBA,EAAkBrQ,gBAAgB,IACnC,wBAAAsQ,EAAArE,OAAA,GAAAmE,EAAA,MACFlE,MAAA,KAAAnC,UAAA,EACDwG,QAAS,SAAC3L,GACsB,KAA1BA,EAAEe,cAAc9F,OAClBwP,EAAO,CAAElB,OAAQ,IAErB,GAEFhC,SAAUrC,EACVsC,MAAM1P,EAAAA,EAAAA,KAAC2P,EAAAA,EAAU,CAAC3E,GAAI,CAAEvE,SAAU,UAClCmJ,YAAW,SAAAkE,GAAA,OAAAjC,EAAAA,IAAAvD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAuF,EAAO7L,GAAC,IAAA8L,EAAA,OAAAzF,EAAAA,EAAAA,KAAAO,MAAA,SAAAmF,GAAA,cAAAA,EAAA9L,KAAA8L,EAAAjF,MAAA,OACnB9G,EAAEhD,iBACEkI,EAAe5I,UACjByM,EAAyB7D,EAAe5I,QAAQrB,OAElDwP,EAAO,CAAElB,OAA8B,QAAxBuC,EAAE5G,EAAe5I,eAAO,IAAAwP,OAAA,EAAtBA,EAAwB7Q,QAAS,wBAAA8Q,EAAA1E,OAAA,GAAAwE,EAAA,MACnDvE,MAAA,KAAAnC,UAAA,OAGLrN,EAAAA,EAAAA,KAAA,OACE2F,MAAO,CACLsK,KAAM,GACN5K,UAEFrF,EAAAA,EAAAA,KAACnB,EAAiB,CAChBI,QAASgC,EACT7B,OAAQ,OACRJ,IAAKyO,EACLpO,gBAAiBA,EACjBC,UAAWA,EACXO,qBAAsB,WAAO,IAADqU,EACJ,QAAtBA,EAAA9G,EAAe5I,eAAO,IAAA0P,GAAtBA,EAAwBxL,OAC1B,OAGJ1I,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CAAEe,QAAS,UAAWrB,UAChCD,EAAAA,EAAAA,MAAA,QAAMO,MAAO,CAAEc,SAAU,OAAQmE,WAAY,QAASvF,SAAA,CAAC,gBACvCxE,EAAKuB,aAGvBpC,EAAAA,EAAAA,KAAA,SAAAqF,SAAA,2RAUJmD,SAAS+H,eAAe,kBAG1BvQ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,GAEJ,EAMEmN,eAAAA,EAEJ,C,kFC5nDaoG,EAAU,WAEnB,OACIpO,EAAAA,EAAAA,MAAAnF,EAAAA,SAAA,CAAAoF,SAAA,EACIrF,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CACRG,SAAU,QACVQ,IAAK,EACL+D,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPrE,WAAY,MACZK,OAAQ,KACR4N,gBAAiB,yBAGrB/O,EAAAA,EAAAA,MAAA,OAAKO,MAAO,CACRG,SAAU,WACVS,OAAQ,MACRL,WAAY,QACZnE,MAAO,OACP3C,OAAQ,OACRkH,IAAK,MACLgE,KAAM,MACNE,UAAW,uBACXvE,UAAW,qCACXoB,QAAS,OACT+M,UAAW,OACX9M,WAAY,SACZC,eAAgB,SAChBb,QAAS,aACXrB,SAAA,EACErF,EAAAA,EAAAA,KAACqU,EAAAA,EAAgB,CAACvJ,MAAM,aACxB9K,EAAAA,EAAAA,KAAA,QAAAqF,SAAM,oBAItB,C,wMCPO,SAASiP,EAAiBvV,GAWL,IAV1BqP,EAAKrP,EAALqP,MACAtH,EAAK/H,EAAL+H,MACA2I,EAAQ1Q,EAAR0Q,SACAC,EAAI3Q,EAAJ2Q,KAAI6E,EAAAxV,EACJyV,aAAAA,OAAY,IAAAD,EAAG,MAAKA,EAAAE,EAAA1V,EACpB2V,YAAAA,OAAW,IAAAD,GAAQA,EAAAE,EAAA5V,EACnB6Q,YAAAA,OAAW,IAAA+E,EAAG,SAACzM,GAAQ,EAACyM,EAAAC,EAAA7V,EACxB8V,SAAAA,OAAQ,IAAAD,EAAG,SAAC1M,GAAQ,EAAC0M,EAAAE,EAAA/V,EACrBgW,OAAAA,OAAM,IAAAD,EAAG,SAAC5M,GAAM,EAAC4M,EACjBlV,EAAcb,EAAda,eAGMwG,GAAK4O,EAAAA,EAAAA,SAILC,EAAe,SAAC9R,GACpB,IAAKA,EAAO,OAAOA,EAGnB,IAAM+R,EAAQ/R,EAAMgS,MAAM,KAM1B,OAHAD,EAAM,GAAKA,EAAM,GAAGE,QAAQ,wBAAyB,KAG9CF,EAAMG,KAAK,IACpB,EAGMC,EAAiB,SAACnS,GACtB,OAAOA,EAAMiS,QAAQ,KAAM,GAC7B,EAgEA,OACEhQ,EAAAA,EAAAA,MAAA,OACEO,OAAKC,EAAAA,EAAAA,GAAA,CACHyB,QAAS,OACTC,WAAY,SACZxB,SAAU,YACPlG,GACHyF,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWkB,GAAK,IAAEyO,QAASnP,EAAGf,SAC3ByB,EAAMqH,SAERuB,GAAyB,UAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CAAEG,SAAU,WAAYwE,KAAM,MAAO/D,OAAQ,GAAIlB,SAC1DqK,KAGL1P,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE5G,IAAKyQ,EACLrJ,GAAIA,GACAgI,GAAK,IACTvH,KAAK,OACLlB,OAAKC,EAAAA,EAAAA,GAAA,CACHxG,OAAQ,OACRuH,UAAW,SACRyH,EAAMzI,OAEXkP,SAAU,SAAC3M,IAnEI,SAACA,GACpB,IAAI/E,EAAQ+E,EAAEsN,OAAOrS,MAYrB,GATAA,EAAQmS,EAAenS,GAST,MAHdA,EAAQmS,EAAenS,KAHT,2BAMYsS,KAAKtS,GAG7B+E,EAAEsN,OAAOrS,MAAQ8R,EAAa9R,OAEzB,CACL,IAAMuS,EAAUvS,EAAMwS,MAAM,QAC5B,GAAID,EAAS,CACX,IAAME,EAAOF,EAAQL,KAAK,IAC1BnN,EAAEsN,OAAOrS,MAAQ8R,EAAaW,EAChC,MACE1N,EAAEsN,OAAOrS,MAAQ,GAErB,CACF,CAyCQ0S,CAAa3N,GACb2M,EAAS3M,EACX,EACA6M,OAAQ,SAAC7M,IA1CI,SAACA,GAClB,IAAI/E,EAAQmS,EAAepN,EAAEsN,OAAOrS,OAGpCA,EAtDwB,SAACA,GAEzB,OAAKA,EAAMmJ,SAAS,KAWI,IADVnJ,EAAMgS,MAAM,KAChB,GAAG/S,OACJe,EAAQ,IAIVA,EAfS,KAAVA,EACK,OAGAA,EAAQ,KAYrB,CAmCU2S,CAAkB3S,GAI1B+E,EAAEsN,OAAOrS,MAAQ8R,EAAa9R,EAChC,CAkCQ4S,CAAW7N,GACX6M,EAAO7M,EACT,KAGDwH,GAAyB,QAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAKiI,QAAS2H,EACZjK,MAAO,CACLG,SAAU,WACVyE,MAAO,MACPjE,IAAK,MACLkE,UAAW,mBACXjE,OAAQ,EACRY,OAAQuN,EAAc,OAAS,UAC/BrN,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBrB,WAAY,QACZH,cAAe2O,EAAc,OAAS,QACtCrP,SACDqK,MAOX,CAGO,SAASxB,EAASjH,GASL,IARlBmH,EAAKnH,EAALmH,MACAtH,EAAKG,EAALH,MACA2I,EAAQxI,EAARwI,SACAC,EAAIzI,EAAJyI,KAAIsG,EAAA/O,EACJuN,aAAAA,OAAY,IAAAwB,EAAG,MAAKA,EAAAC,EAAAhP,EACpByN,YAAAA,OAAW,IAAAuB,GAAQA,EACnBrW,EAAcqH,EAAdrH,eAAcsW,EAAAjP,EACd2I,YAAAA,OAAW,IAAAsG,EAAG,SAAChO,GAAQ,EAACgO,EAElB9P,GAAK4O,EAAAA,EAAAA,SAGX,OACE5P,EAAAA,EAAAA,MAAA,OACEO,OAAKC,EAAAA,EAAAA,GAAA,CACHyB,QAAS,OACTC,WAAY,SACZxB,SAAU,YACPlG,GACHyF,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWkB,GAAK,IAAEyO,QAASnP,EAAGf,SAC3ByB,EAAMqH,SAERuB,GAAyB,UAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CAAEG,SAAU,WAAYwE,KAAM,MAAO/D,OAAQ,GAAIlB,SAC1DqK,KAGL1P,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE5G,IAAKyQ,EACLrJ,GAAIA,GACAgI,GAAK,IACTzI,OAAKC,EAAAA,EAAAA,GAAA,CACHxG,OAAQ,QACLgP,EAAMzI,UAGZ+J,GAAyB,QAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAKiI,QAAS2H,EACZjK,MAAO,CACLG,SAAU,WACVyE,MAAO,MACPjE,IAAK,MACLkE,UAAW,mBACXjE,OAAQ,EACRY,OAAQuN,EAAc,OAAS,UAC/BrN,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBrB,WAAY,QACZH,cAAe2O,EAAc,OAAS,QACtCrP,SACDqK,MAOX,CAIO,SAASyG,EAAapN,GASX,IARhBqN,EAAQrN,EAARqN,SACAtP,EAAKiC,EAALjC,MACAuP,EAAStN,EAATsN,UACA3G,EAAI3G,EAAJ2G,KAAI4G,EAAAvN,EACJyL,aAAAA,OAAY,IAAA8B,EAAG,MAAKA,EAAAC,EAAAxN,EACpB2L,YAAAA,OAAW,IAAA6B,GAAQA,EAAAC,EAAAzN,EACnB6G,YAAAA,OAAW,IAAA4G,EAAG,SAACtO,GAAQ,EAACsO,EACxB5W,EAAcmJ,EAAdnJ,eAEMwG,GAAK4O,EAAAA,EAAAA,SAEX,OACE5P,EAAAA,EAAAA,MAAA,OACEO,OAAKC,EAAAA,EAAAA,GAAA,CACHyB,QAAS,OACTC,WAAY,SACZxB,SAAU,YACPlG,GACHyF,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWkB,GAAK,IAAEyO,QAASnP,EAAGf,SAC3ByB,EAAMqH,SAERuB,GAAyB,UAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAK2F,MAAO,CAAEG,SAAU,WAAYwE,KAAM,MAAO/D,OAAQ,GAAIlB,SAC1DqK,KAGL1P,EAAAA,EAAAA,KAAA,YAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE5G,IAAKqX,EACLjQ,GAAIA,GACAgQ,GAAQ,IACZzQ,OAAKC,EAAAA,EAAAA,GAAA,CACHxG,OAAQ,QACLgX,EAASzQ,UAIf+J,GAAyB,QAAjB8E,IACPxU,EAAAA,EAAAA,KAAA,OAAKiI,QAAS2H,EACZjK,MAAO,CACLG,SAAU,WACVyE,MAAO,MACPjE,IAAK,MACLkE,UAAW,mBACXjE,OAAQ,EACRY,OAAQuN,EAAc,OAAS,UAC/BrN,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBrB,WAAY,QACZH,cAAe2O,EAAc,OAAS,QACtCrP,SACDqK,MAOX,CAEO,IAAM+G,GAAc3X,EAAAA,EAAAA,aAAW,SAAAoK,EAiBnClK,GAAc,IAhBf0X,EAAMxN,EAANwN,OACA5P,EAAKoC,EAALpC,MACA6P,EAASzN,EAATyN,UAASC,EAAA1N,EACT2N,WAAAA,OAAU,IAAAD,EAAG,GAAEA,EAAAE,EAAA5N,EACf6N,OAAAA,OAAM,IAAAD,EAAG,GAAEA,EAAAE,EAAA9N,EACX7B,QAAAA,OAAO,IAAA2P,EAAG,GAAEA,EACZpX,EAAcsJ,EAAdtJ,eAaAa,GAAsCC,EAAAA,EAAAA,UAASmW,GAAWlW,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnDwW,EAAWtW,EAAA,GAAEuW,EAAcvW,EAAA,GAC5ByF,GAAK4O,EAAAA,EAAAA,SAWX,OATAxS,EAAAA,EAAAA,qBAAoBxD,GAAK,iBAAO,CAC9BmY,cAAe,SAACC,GACdF,EAAeE,EACjB,EACAC,cAAe,WACb,OAAOJ,CACT,EACD,KAGC7R,EAAAA,EAAAA,MAAA,OACEO,OAAKC,EAAAA,EAAAA,GAAA,CACHyB,QAAS,OACTjI,OAAQ,OACRkI,WAAY,UACT1H,GACHyF,SAAA,EAEFrF,EAAAA,EAAAA,KAAA,SAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWkB,GAAK,IAAEyO,QAASnP,EAAGf,SAC3ByB,EAAMqH,UAETnO,EAAAA,EAAAA,KAAA,UAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM8Q,GAAM,IACV1X,IAAK2X,EACLzP,UAAS,UAAAf,OAAYuQ,EAAOxP,WAC5BvB,OAAKC,EAAAA,EAAAA,GAAA,CACHxG,OAAQ,QACLsX,EAAO/Q,OACVN,SAED4R,EAAYxT,KAAI,SAACnB,EAAKsC,GACrB,OACE5E,EAAAA,EAAAA,KAAA,UAAkBmD,MAAOb,EAAIyU,GAAQ1R,SAClC/C,EAAI+E,IADMzC,EAIjB,SAIR,IAEO,SAAS0S,EAAWpM,GAYvB,IAXFqM,EAAYrM,EAAZqM,aACAC,EAAMtM,EAANsM,OAAMC,EAAAvM,EACNwM,YAAAA,OAAW,IAAAD,EAAG,GAAEA,EAChBpS,EAAQ6F,EAAR7F,SAAQsS,EAAAzM,EACR0M,SAAAA,OAAQ,IAAAD,GAAQA,EAQhB,OACEvS,EAAAA,EAAAA,MAAA,OAAK8B,UAAU,UAAS7B,SAAA,EACtBrF,EAAAA,EAAAA,KAAA,UAAA4F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEgS,SAAUA,GACNJ,GAAM,IACVxY,IAAKuY,EACL5R,OAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO4R,EAAO7R,OAAK,IAAEO,WAAa0R,EAA2B,UAAhB,gBAClD1Q,UAAU,iBAAgB7B,SAEzBA,MAEDuS,IAAY5X,EAAAA,EAAAA,KAAA,QAAMkH,UAAU,eAAc7B,SAAEqS,MAGpD,C,qGCrZe,SAAS3J,IAA6B,IAAD8J,EAChD/F,GAA0BC,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BE,EAAOJ,EAAPI,QAASD,EAAIH,EAAJG,KAWjB,MAAO,CACHnE,qBAZ8C,SAGfO,GAAA,OAAAwJ,EAAAA,IAAAvJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAnC,SAAAC,EAAoC5B,GAAa,OAAA0B,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAA5G,KAAA4G,EAAAC,MAAA,cAAAD,EAAAC,KAAA,EAChCkD,EAAQW,KAAK,iBAAkB,CAAEhG,MAAAA,GAAS,CACnDiG,QAAS,CACLC,cAAc,UAAD5M,OAAgB,OAAJ8L,QAAI,IAAJA,OAAI,EAAJA,EAAMe,gBAErC,cAAAjE,EAAA+I,OAAA,SAAA/I,EAAAI,MAAA,wBAAAJ,EAAAQ,OAAA,GAAAd,EAAA,MACLe,MAAA,KAAAnC,UAAA,EAKL,C","sources":["components/DataGridViewReact.tsx","components/Loading.tsx","components/UpwardFields.tsx","lib/executeQueryFromClient.ts"],"sourcesContent":["import {\r\n  useState,\r\n  useRef,\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useContext,\r\n} from \"react\";\r\nimport useExecuteQueryFromClient from \"../lib/executeQueryFromClient\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { TextInput } from \"./UpwardFields\";\r\nimport { wait } from \"../lib/wait\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport { AuthContext } from \"./AuthContext\";\r\nimport { Loading } from \"./Loading\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport const DataGridViewReact = forwardRef(\r\n  (\r\n    {\r\n      columns,\r\n      rows = [],\r\n      height = \"400px\",\r\n      getSelectedItem,\r\n      onKeyDown,\r\n      disbaleTable = false,\r\n      isTableSelectable: _isTableSelectable = true,\r\n      containerStyle,\r\n      focusElementOnMaxTop,\r\n      ActionComponent = () => <></>,\r\n      showSequence = false,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    const parentElementRef = useRef<any>(null);\r\n    const actionModalRef = useRef<any>(null);\r\n    const checkboxRef = useRef([]);\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null);\r\n    const [data, setData] = useState([]);\r\n    const [column, setColumn] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState<any>(0);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<any>(null);\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0);\r\n    const [isTableSelectable, setIsTableSelectable] =\r\n      useState(_isTableSelectable);\r\n\r\n    useEffect(() => {\r\n      if (columns.length > 0) {\r\n        setColumn(columns.filter((itm: any) => !itm.hide));\r\n      }\r\n    }, [columns]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      checkNoIsExist: (checkNo: string) => {\r\n        return data.some((subArray: any) => subArray[2] === checkNo);\r\n      },\r\n      selectedRow: () => selectedRow,\r\n      getData: () => {\r\n        const newData = [...data];\r\n        return newData;\r\n      },\r\n      setData: (newData: any) => {\r\n        setData(newData);\r\n      },\r\n      getColumns: () => {\r\n        return columns;\r\n      },\r\n      resetTable: () => {\r\n        setData([]);\r\n        setSelectedRow(0);\r\n        setSelectedRowIndex(null);\r\n      },\r\n      getSelectedRow: () => {\r\n        return selectedRowIndex;\r\n      },\r\n      setSelectedRow: (value: any) => {\r\n        return setSelectedRowIndex(value);\r\n      },\r\n      resetCheckBox: () => {\r\n        return handleResetCheckBox();\r\n      },\r\n      _setSelectedRow: (value: any) => {\r\n        return setSelectedRow(value);\r\n      },\r\n      setIsTableSelectable: (param: boolean) => {\r\n        setIsTableSelectable(param);\r\n      },\r\n      setDataFormated: (newData: any) => {\r\n        setData(\r\n          newData.map((itm: any) => {\r\n            return columns.map((col: any) => itm[col.key]);\r\n          })\r\n        );\r\n      },\r\n      getDataFormatted: () => {\r\n        const newData = [...data];\r\n        const newDataFormatted = newData.map((itm: any) => {\r\n          let newItm = {\r\n            Check_No: itm[0],\r\n            Check_Date: itm[1],\r\n            Check_Amnt: itm[2],\r\n            BankName: itm[3],\r\n            Branch: itm[4],\r\n            Check_Remarks: itm[5],\r\n            Deposit_Slip: itm[6],\r\n            DateDeposit: itm[7],\r\n            OR_No: itm[8],\r\n            BankCode: itm[9],\r\n          };\r\n          return newItm;\r\n        });\r\n\r\n        return newDataFormatted;\r\n      },\r\n      getElementBody: () => tbodyRef.current,\r\n      getParentElement: () => parentElementRef.current,\r\n    }));\r\n\r\n    const handleResetCheckBox = () => {\r\n      checkboxRef.current.forEach((checkbox: HTMLInputElement, idx: any) => {\r\n        if (checkbox) checkbox.checked = false;\r\n      });\r\n    };\r\n    const handleResetCheckBoxByIndex = (_idx: any) => {\r\n      checkboxRef.current.forEach((checkbox: HTMLInputElement, idx: any) => {\r\n        if (_idx === idx) {\r\n          return;\r\n        } else {\r\n          if (checkbox) checkbox.checked = false;\r\n        }\r\n      });\r\n    };\r\n\r\n    const handleRightClick = (event: any, idx: number) => {\r\n      event.preventDefault(); // Prevent the default context menu from appearing\r\n      if (idx === selectedRowIndex) {\r\n        actionModalRef.current.showModal();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <ActionModal\r\n          ref={actionModalRef}\r\n          Component={\r\n            <ActionComponent\r\n              selectedRowIndex={selectedRowIndex}\r\n              closeModal={() => actionModalRef.current.closeDelay()}\r\n              rowItm={data[selectedRowIndex]}\r\n            />\r\n          }\r\n        />\r\n        <div\r\n          ref={parentElementRef}\r\n          style={{\r\n            width: \"100%\",\r\n            height,\r\n            overflow: \"auto\",\r\n            position: \"relative\",\r\n            pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n            border: disbaleTable ? \"2px solid #8c8f8e\" : \"2px solid #c0c0c0\",\r\n            boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n            ...containerStyle,\r\n            background: \"#dcdcdc\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              width: `${totalRowWidth}px`,\r\n              height: \"auto\",\r\n            }}\r\n          >\r\n            <table\r\n              id=\"upward-cutom-table\"\r\n              style={{\r\n                borderCollapse: \"collapse\",\r\n                width: \"100%\",\r\n                position: \"relative\",\r\n                background: \"#dcdcdc\",\r\n              }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th\r\n                    style={{\r\n                      width: \"30px\",\r\n                      border: \"none\",\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      zIndex: 1,\r\n                      background: \"#f0f0f0\",\r\n                    }}\r\n                  ></th>\r\n                  {showSequence && (\r\n                    <th\r\n                      style={{\r\n                        width: \"50px\",\r\n                        borderRight: \"1px solid #e2e8f0\",\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                        background: \"#f0f0f0\",\r\n                        fontSize: \"12px\",\r\n                        padding: \"0px 5px\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      SEQ\r\n                    </th>\r\n                  )}\r\n                  {column.map((colItm: any, idx: number) => {\r\n                    return (\r\n                      <th\r\n                        key={idx}\r\n                        style={{\r\n                          width: colItm.width,\r\n                          borderRight: \"1px solid #e2e8f0\",\r\n                          position: \"sticky\",\r\n                          top: 0,\r\n                          zIndex: 1,\r\n                          background: \"#f0f0f0\",\r\n                          fontSize: \"12px\",\r\n                          padding: \"0px 5px\",\r\n                          textAlign:\r\n                            colItm.type === \"number\" ? \"center\" : \"left\",\r\n                        }}\r\n                      >\r\n                        {colItm.label}\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              <tbody ref={tbodyRef}>\r\n                {data?.map((rowItm: any, rowIdx: number) => {\r\n                  return (\r\n                    <RowComponent\r\n                      key={rowIdx}\r\n                      rowIdx={rowIdx}\r\n                      rowItm={rowItm}\r\n                      selectedRowIndex={selectedRowIndex}\r\n                      selectedRow={selectedRow}\r\n                      isTableSelectable={isTableSelectable}\r\n                      setSelectedRowIndex={setSelectedRowIndex}\r\n                      getSelectedItem={getSelectedItem}\r\n                      setSelectedRow={setSelectedRow}\r\n                      column={column}\r\n                      onKeyDown={onKeyDown}\r\n                      focusElementOnMaxTop={focusElementOnMaxTop}\r\n                      data={data}\r\n                      parentElementRef={parentElementRef}\r\n                      checkboxRef={checkboxRef}\r\n                      handleResetCheckBox={handleResetCheckBox}\r\n                      handleResetCheckBoxByIndex={handleResetCheckBoxByIndex}\r\n                      handleRightClick={handleRightClick}\r\n                      showSequence={showSequence}\r\n                    />\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n            <style>\r\n              {`\r\n             #upward-cutom-table tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n              #upward-cutom-table tr.selected td {\r\n                  background-color: #0076d7 !important;\r\n                  color: #ffffff !important;\r\n                  border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n\r\n              }\r\n              \r\n               #upward-cutom-table tr.selected td input {\r\n                  color: #ffffff !important;\r\n              }\r\n  \r\n              `}\r\n            </style>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nconst RowComponent = forwardRef(\r\n  (\r\n    {\r\n      rowIdx,\r\n      rowItm,\r\n      selectedRowIndex,\r\n      selectedRow,\r\n      isTableSelectable,\r\n      setSelectedRowIndex,\r\n      getSelectedItem,\r\n      setSelectedRow,\r\n      column,\r\n      onKeyDown,\r\n      focusElementOnMaxTop,\r\n      data,\r\n      parentElementRef,\r\n      checkboxRef,\r\n      handleResetCheckBox,\r\n      handleResetCheckBoxByIndex,\r\n      handleRightClick,\r\n      showSequence,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    return (\r\n      <tr\r\n        data-index={rowIdx}\r\n        key={rowIdx}\r\n        className={`row ${\r\n          selectedRow === rowIdx || selectedRowIndex === rowIdx\r\n            ? \"selected\"\r\n            : \"\"\r\n        }`}\r\n      >\r\n        <td\r\n          style={{\r\n            position: \"relative\",\r\n            border: \"none\",\r\n            cursor: \"pointer\",\r\n            background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n            padding: 0,\r\n            margin: 0,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              width: \"18px\",\r\n              height: \"18px\",\r\n              position: \"relative\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <CheckBoxSelection\r\n              key={rowIdx}\r\n              checkboxRef={checkboxRef}\r\n              isTableSelectable={isTableSelectable}\r\n              setSelectedRowIndex={setSelectedRowIndex}\r\n              rowIdx={rowIdx}\r\n              rowItm={rowItm}\r\n              getSelectedItem={getSelectedItem}\r\n              setSelectedRow={setSelectedRow}\r\n              handleResetCheckBoxByIndex={handleResetCheckBoxByIndex}\r\n            />\r\n          </div>\r\n        </td>\r\n\r\n        {showSequence && (\r\n          <td\r\n            style={{\r\n              position: \"relative\",\r\n              border: \"none\",\r\n              cursor: \"pointer\",\r\n              background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n              padding: 0,\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <input\r\n              readOnly={true}\r\n              defaultValue={`${ String(rowIdx + 1).padStart(2, \"0\")}`}\r\n              style={{\r\n                width: \"50px\",\r\n                pointerEvents: \"none\",\r\n                border: \"none\",\r\n                background: \"transparent\",\r\n                userSelect: \"none\",\r\n                height: \"100%\",\r\n                textAlign: \"center\",\r\n              }}\r\n            />\r\n          </td>\r\n        )}\r\n\r\n        {column.map((colItm: any, colIdx: number) => {\r\n          return (\r\n            <td\r\n              className={`td row-${rowIdx} col-${colIdx} `}\r\n              tabIndex={0}\r\n              onDoubleClick={() => {\r\n                if (!isTableSelectable) {\r\n                  return;\r\n                }\r\n                handleResetCheckBox();\r\n                if (selectedRowIndex === rowIdx) {\r\n                  setSelectedRowIndex(null);\r\n\r\n                  checkboxRef.current[rowIdx].checked = false;\r\n\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(null, null, rowIdx, null);\r\n                  }\r\n                } else {\r\n                  checkboxRef.current[rowIdx].checked = true;\r\n\r\n                  setSelectedRowIndex(rowIdx);\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(rowItm, null, rowIdx, null);\r\n                  }\r\n                }\r\n                setSelectedRow(null);\r\n              }}\r\n              onClick={() => {\r\n                setSelectedRow(rowIdx);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (onKeyDown) {\r\n                  onKeyDown(rowItm, rowIdx, e);\r\n                }\r\n                if (e.key === \"ArrowUp\") {\r\n                  setSelectedRow((prev: any) => {\r\n                    const index = Math.max(prev - 1, -1);\r\n                    const td = document.querySelector(\r\n                      `.td.row-${index}`\r\n                    ) as HTMLTableDataCellElement;\r\n\r\n                    if (index < 0) {\r\n                      if (focusElementOnMaxTop) {\r\n                        focusElementOnMaxTop();\r\n                      }\r\n                      return;\r\n                    }\r\n                    if (td) {\r\n                      td.focus();\r\n                    }\r\n                    return index;\r\n                  });\r\n                } else if (e.key === \"ArrowDown\") {\r\n                  setSelectedRow((prev: any) => {\r\n                    const index = Math.min(prev + 1, data.length - 1);\r\n                    const td = document.querySelector(\r\n                      `.td.row-${index}`\r\n                    ) as HTMLTableDataCellElement;\r\n\r\n                    if (td) {\r\n                      td.focus();\r\n                      if (index <= 15) {\r\n                        parentElementRef.current.style.overflow = \"hidden\";\r\n                        setTimeout(() => {\r\n                          parentElementRef.current.style.overflow = \"auto\";\r\n                        }, 100);\r\n                        return index;\r\n                      }\r\n                    }\r\n                    return index;\r\n                  });\r\n                }\r\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\r\n                  e.preventDefault();\r\n\r\n                  if (!isTableSelectable) {\r\n                    return;\r\n                  }\r\n\r\n                  setSelectedRowIndex(rowIdx);\r\n\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(rowItm, null, rowIdx, null);\r\n                  }\r\n                  setSelectedRow(null);\r\n                }\r\n              }}\r\n              key={colIdx}\r\n              style={{\r\n                border: \"none\",\r\n                fontSize: \"12px\",\r\n                padding: \"0px 5px\",\r\n                cursor: \"pointer\",\r\n                height: \"20px\",\r\n                userSelect: \"none\",\r\n              }}\r\n              onContextMenu={(e) => handleRightClick(e, rowIdx)}\r\n            >\r\n              {\r\n                <input\r\n                  readOnly={true}\r\n                  value={rowItm[colIdx]}\r\n                  style={{\r\n                    width: colItm.width,\r\n                    pointerEvents: \"none\",\r\n                    border: \"none\",\r\n                    background: \"transparent\",\r\n                    userSelect: \"none\",\r\n                    height: \"100%\",\r\n                    textAlign: colItm.type === \"number\" ? \"right\" : \"left\",\r\n                  }}\r\n                />\r\n              }\r\n            </td>\r\n          );\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n);\r\nconst CheckBoxSelection = forwardRef(\r\n  (\r\n    {\r\n      isTableSelectable,\r\n      setSelectedRowIndex,\r\n      rowIdx,\r\n      rowItm,\r\n      getSelectedItem,\r\n      setSelectedRow,\r\n      checkboxRef,\r\n      handleResetCheckBoxByIndex,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    return (\r\n      <input\r\n        ref={(el) => (checkboxRef.current[rowIdx] = el)}\r\n        style={{\r\n          cursor: \"pointer\",\r\n          margin: \"0px !important\",\r\n          position: \"absolute\",\r\n        }}\r\n        readOnly={true}\r\n        type=\"checkbox\"\r\n        onClick={(e) => {\r\n          if (!isTableSelectable) {\r\n            return;\r\n          }\r\n          handleResetCheckBoxByIndex(rowIdx);\r\n          if (e.currentTarget.checked) {\r\n            setSelectedRowIndex(rowIdx);\r\n            if (getSelectedItem) {\r\n              getSelectedItem(rowItm, null, rowIdx, null);\r\n            }\r\n            setSelectedRow(null);\r\n            return;\r\n          } else {\r\n            setSelectedRowIndex(null);\r\n            if (getSelectedItem) {\r\n              getSelectedItem(null, null, rowIdx, null);\r\n            }\r\n            setSelectedRow(null);\r\n            return;\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nconst ActionModal = forwardRef(\r\n  ({ handleOnSave, handleOnClose, hasSelectedRow, Component }: any, ref) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [handleDelayClose, setHandleDelayClose] = useState(false);\r\n    const [blick, setBlick] = useState(false);\r\n\r\n    const closeDelay = () => {\r\n      setHandleDelayClose(true);\r\n      setTimeout(() => {\r\n        setShowModal(false);\r\n        setHandleDelayClose(false);\r\n        if (handleOnClose) handleOnClose();\r\n      }, 100);\r\n    };\r\n    const closeDelayRef = useRef<any>(closeDelay);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      showModal: () => {\r\n        setShowModal(true);\r\n      },\r\n      clsoeModal: () => {\r\n        setShowModal(false);\r\n      },\r\n      blick,\r\n      closeDelay,\r\n    }));\r\n\r\n    useEffect(() => {\r\n      window.addEventListener(\"keydown\", (e: any) => {\r\n        if (e.key === \"Escape\") {\r\n          closeDelayRef.current();\r\n        }\r\n      });\r\n    }, []);\r\n\r\n    return showModal ? (\r\n      <>\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            background: \"transparent\",\r\n            zIndex: \"88\",\r\n          }}\r\n          onClick={() => {\r\n            setBlick(true);\r\n            setTimeout(() => {\r\n              setBlick(false);\r\n            }, 250);\r\n          }}\r\n        ></div>\r\n        <div\r\n          style={{\r\n            height: \"auto\",\r\n            width: \"auto\",\r\n            border: \"1px solid #64748b\",\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            transform: \"translate(-50%, -75%)\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            zIndex: handleDelayClose ? -100 : 100,\r\n            opacity: handleDelayClose ? 0 : 1,\r\n            transition: \"all 150ms\",\r\n            boxShadow: \"3px 6px 32px -7px rgba(0,0,0,0.75)\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              height: \"22px\",\r\n              background: \"white\",\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              padding: \"5px\",\r\n              position: \"relative\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>Action</span>\r\n            <button\r\n              className=\"btn-check-exit-modal\"\r\n              style={{\r\n                padding: \"0 5px\",\r\n                borderRadius: \"0px\",\r\n                background: \"white\",\r\n                color: \"black\",\r\n                height: \"22px\",\r\n                position: \"absolute\",\r\n                top: 0,\r\n                right: 0,\r\n              }}\r\n              onClick={() => {\r\n                closeDelay();\r\n              }}\r\n            >\r\n              <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n            </button>\r\n          </div>\r\n          {Component}\r\n          <style>\r\n            {`\r\n              .btn-check-exit-modal:hover{\r\n                background:red !important;\r\n                color:white !important;\r\n              }\r\n            `}\r\n          </style>\r\n        </div>\r\n      </>\r\n    ) : null;\r\n  }\r\n);\r\n\r\nexport const DataGridViewMultiSelectionReact = forwardRef(\r\n  (\r\n    {\r\n      columns,\r\n      rows = [],\r\n      height = \"400px\",\r\n      getSelectedItem,\r\n      onKeyDown,\r\n      disbaleTable = false,\r\n      isTableSelectable: _isTableSelectable = true,\r\n      containerStyle,\r\n      focusElementOnMaxTop,\r\n      onCheckAll,\r\n      onUnCheckAll,\r\n      rowIsSelectable,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    const parentElementRef = useRef<any>(null);\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null);\r\n    const [data, setData] = useState([]);\r\n    const [column, setColumn] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState<any>(0);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<Array<any>>([]);\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0);\r\n    const [isTableSelectable, setIsTableSelectable] =\r\n      useState(_isTableSelectable);\r\n\r\n    useEffect(() => {\r\n      if (columns.length > 0) {\r\n        setColumn(columns.filter((itm: any) => !itm.hide));\r\n      }\r\n    }, [columns]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      checkNoIsExist: (checkNo: string) => {\r\n        return data.some((subArray: any) => subArray[2] === checkNo);\r\n      },\r\n      selectedRow: () => selectedRow,\r\n      getData: () => {\r\n        const newData = [...data];\r\n        return newData;\r\n      },\r\n      getSelectedRowsData: () => {\r\n        const newData = [...data];\r\n        return selectedRowIndex\r\n          .map((index) => newData[index])\r\n          .filter((item) => item !== undefined);\r\n      },\r\n      setData: (newData: any) => {\r\n        setData(newData);\r\n      },\r\n      getColumns: () => {\r\n        return columns;\r\n      },\r\n      resetTable: () => {\r\n        setData([]);\r\n        setSelectedRow(0);\r\n        setSelectedRowIndex([]);\r\n      },\r\n      getSelectedRow: () => {\r\n        return selectedRowIndex;\r\n      },\r\n      setSelectedRow: (value: any) => {\r\n        return setSelectedRowIndex(value);\r\n      },\r\n      _setSelectedRow: (value: any) => {\r\n        return setSelectedRow(value);\r\n      },\r\n      setDataFormated: (newData: any) => {\r\n        setData(\r\n          newData.map((itm: any) => {\r\n            return columns.map((col: any) => itm[col.key]);\r\n          })\r\n        );\r\n      },\r\n      setIsTableSelectable: (param: boolean) => {\r\n        setIsTableSelectable(param);\r\n      },\r\n      getDataFormatted: () => {\r\n        const newData = [...data];\r\n        const newDataFormatted = newData.map((itm: any) => {\r\n          let newItm = {\r\n            Check_No: itm[0],\r\n            Check_Date: itm[1],\r\n            Check_Amnt: itm[2],\r\n            BankName: itm[3],\r\n            Branch: itm[4],\r\n            Check_Remarks: itm[5],\r\n            Deposit_Slip: itm[6],\r\n            DateDeposit: itm[7],\r\n            OR_No: itm[8],\r\n            BankCode: itm[9],\r\n          };\r\n          return newItm;\r\n        });\r\n\r\n        return newDataFormatted;\r\n      },\r\n      getElementBody: () => tbodyRef.current,\r\n      getParentElement: () => parentElementRef.current,\r\n      isTableSelectable,\r\n    }));\r\n\r\n    return (\r\n      <div\r\n        ref={parentElementRef}\r\n        style={{\r\n          width: \"100%\",\r\n          height,\r\n          overflow: \"auto\",\r\n          position: \"relative\",\r\n          pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n          border: disbaleTable ? \"2px solid #8c8f8e\" : \"2px solid #c0c0c0\",\r\n          boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n          ...containerStyle,\r\n          background: \"#dcdcdc\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            width: `${totalRowWidth}px`,\r\n            height: \"auto\",\r\n          }}\r\n        >\r\n          <table\r\n            id=\"upward-cutom-table-multi\"\r\n            style={{\r\n              borderCollapse: \"collapse\",\r\n              width: \"100%\",\r\n              position: \"relative\",\r\n              background: \"#dcdcdc\",\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                {isTableSelectable && (\r\n                  <th\r\n                    style={{\r\n                      width: \"30px\",\r\n                      border: \"none\",\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      zIndex: 1,\r\n                      background: \"#f0f0f0\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        width: \"18px\",\r\n                        height: \"18px\",\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      <input\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                          margin: \"0px !important\",\r\n                          position: \"absolute\",\r\n                        }}\r\n                        readOnly={true}\r\n                        type=\"checkbox\"\r\n                        onClick={(e) => {\r\n                          if (e.currentTarget.checked) {\r\n                            if (onCheckAll) {\r\n                              onCheckAll();\r\n                            }\r\n                          } else {\r\n                            if (onUnCheckAll) {\r\n                              onUnCheckAll();\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </th>\r\n                )}\r\n                {column.map((colItm: any, idx: number) => {\r\n                  return (\r\n                    <th\r\n                      key={idx}\r\n                      style={{\r\n                        width: colItm.width,\r\n                        borderRight: \"1px solid #e2e8f0\",\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                        background: \"#f0f0f0\",\r\n                        fontSize: \"12px\",\r\n                        padding: \"0px 5px\",\r\n                        textAlign: colItm.type === \"number\" ? \"center\" : \"left\",\r\n                      }}\r\n                    >\r\n                      {colItm.label}\r\n                    </th>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody ref={tbodyRef}>\r\n              {data?.map((rowItm: any, rowIdx: number) => {\r\n                return (\r\n                  <tr\r\n                    data-index={rowIdx}\r\n                    key={rowIdx}\r\n                    className={`row ${\r\n                      selectedRow === rowIdx &&\r\n                      selectedRowIndex.includes(rowIdx)\r\n                        ? \"multi-selected-row-item\"\r\n                        : selectedRow === rowIdx\r\n                        ? \"multi-selected-row\"\r\n                        : selectedRowIndex.includes(rowIdx)\r\n                        ? \"multi-selected-item\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    {isTableSelectable && (\r\n                      <td\r\n                        style={{\r\n                          position: \"relative\",\r\n                          border: \"none\",\r\n                          cursor: \"pointer\",\r\n                          background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n                          padding: 0,\r\n                          margin: 0,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            width: \"18px\",\r\n                            height: \"18px\",\r\n                            position: \"relative\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <input\r\n                            style={{\r\n                              cursor: \"pointer\",\r\n                              margin: \"0px !important\",\r\n                              position: \"absolute\",\r\n                            }}\r\n                            readOnly={true}\r\n                            checked={selectedRowIndex.includes(rowIdx)}\r\n                            type=\"checkbox\"\r\n                            onClick={() => {\r\n                              if (rowIsSelectable && rowIsSelectable(rowItm)) {\r\n                                return;\r\n                              }\r\n                              if (!isTableSelectable) {\r\n                                return;\r\n                              }\r\n\r\n                              if (selectedRowIndex.includes(rowIdx)) {\r\n                                setSelectedRowIndex((d: any) =>\r\n                                  d.filter((i: any) => i !== rowIdx)\r\n                                );\r\n                              } else {\r\n                                setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n                              }\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </td>\r\n                    )}\r\n\r\n                    {column.map((colItm: any, colIdx: number) => {\r\n                      return (\r\n                        <td\r\n                          className={`td row-${rowIdx} col-${colIdx} `}\r\n                          tabIndex={0}\r\n                          onDoubleClick={() => {\r\n                            if (rowIsSelectable && rowIsSelectable(rowItm)) {\r\n                              return;\r\n                            }\r\n                            if (!isTableSelectable) {\r\n                              return;\r\n                            }\r\n\r\n                            if (selectedRowIndex.includes(rowIdx)) {\r\n                              setSelectedRowIndex((d: any) =>\r\n                                d.filter((i: any) => i !== rowIdx)\r\n                              );\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(null, null, rowIdx, null);\r\n                              }\r\n\r\n                              return;\r\n                            } else {\r\n                              setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }\r\n                          }}\r\n                          onClick={() => {\r\n                            setSelectedRow(rowIdx);\r\n                          }}\r\n                          onKeyDown={(e) => {\r\n                            if (onKeyDown) {\r\n                              onKeyDown(rowItm, rowIdx, e);\r\n                            }\r\n                            if (e.key === \"ArrowUp\") {\r\n                              setSelectedRow((prev: any) => {\r\n                                const index = Math.max(prev - 1, -1);\r\n                                const td = document.querySelector(\r\n                                  `.td.row-${index}`\r\n                                ) as HTMLTableDataCellElement;\r\n                                if (index < 0) {\r\n                                  if (focusElementOnMaxTop) {\r\n                                    focusElementOnMaxTop();\r\n                                  }\r\n                                  return;\r\n                                }\r\n                                if (td) {\r\n                                  td.focus();\r\n                                }\r\n                                return index;\r\n                              });\r\n                            } else if (e.key === \"ArrowDown\") {\r\n                              setSelectedRow((prev: any) => {\r\n                                const index = Math.min(\r\n                                  prev + 1,\r\n                                  data.length - 1\r\n                                );\r\n                                const td = document.querySelector(\r\n                                  `.td.row-${index}`\r\n                                ) as HTMLTableDataCellElement;\r\n                                if (td) {\r\n                                  td.focus();\r\n                                  if (index <= 15) {\r\n                                    parentElementRef.current.style.overflow =\r\n                                      \"hidden\";\r\n                                    setTimeout(() => {\r\n                                      parentElementRef.current.style.overflow =\r\n                                        \"auto\";\r\n                                    }, 100);\r\n                                    return index;\r\n                                  }\r\n                                }\r\n                                return index;\r\n                              });\r\n                            }\r\n                            if (\r\n                              e.code === \"Enter\" ||\r\n                              e.code === \"NumpadEnter\"\r\n                            ) {\r\n                              e.preventDefault();\r\n\r\n                              if (!isTableSelectable) {\r\n                                return;\r\n                              }\r\n\r\n                              if (selectedRowIndex.includes(rowIdx)) {\r\n                                setSelectedRowIndex((d: any) =>\r\n                                  d.filter((i: any) => i !== rowIdx)\r\n                                );\r\n                              } else {\r\n                                setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n                              }\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={colIdx}\r\n                          style={{\r\n                            border: \"none\",\r\n                            fontSize: \"12px\",\r\n                            padding: \"0px 5px\",\r\n                            cursor: \"pointer\",\r\n                            height: \"20px\",\r\n                            userSelect: \"none\",\r\n                          }}\r\n                        >\r\n                          {\r\n                            <input\r\n                              readOnly={true}\r\n                              value={rowItm[colIdx]}\r\n                              style={{\r\n                                width: colItm.width,\r\n                                pointerEvents: \"none\",\r\n                                border: \"none\",\r\n                                background: \"transparent\",\r\n                                userSelect: \"none\",\r\n                                height: \"100%\",\r\n                                textAlign:\r\n                                  colItm.type === \"number\" ? \"right\" : \"left\",\r\n                              }}\r\n                            />\r\n                          }\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <style>\r\n            {`\r\n             #upward-cutom-table-multi tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table-multi tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table-multi tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n\r\n             #upward-cutom-table-multi tr.multi-selected-row-item td {\r\n                background-color: rgba(84, 84, 82, 0.73) !important;\r\n                border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-row-item td input {\r\n                  color: #ffffff !important;\r\n              }\r\n\r\n            #upward-cutom-table-multi tr.multi-selected-item td {\r\n                background-color: rgba(232, 232, 226, 0.99) !important;\r\n                border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-item td input {\r\n                  color: black !important;\r\n              }\r\n\r\n              #upward-cutom-table-multi tr.multi-selected-row td {\r\n                  background-color: #0076d7 !important;\r\n                  border-right:1px solid white !important;\r\n                  border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-row td input {\r\n                  color: #ffffff !important;\r\n              }\r\n  \r\n              `}\r\n          </style>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nlet dataCache: any = [];\r\nlet searchInputValueCache = \"\";\r\nexport const useUpwardTableModalSearch = ({\r\n  column,\r\n  query,\r\n  getSelectedItem,\r\n  onKeyDown,\r\n  customWidth,\r\n  onClose,\r\n}: any) => {\r\n  const [show, setShow] = useState(false);\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  function openModal() {\r\n    const body = document.body;\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"modal-portal\";\r\n\r\n    if (document.getElementById(\"modal-portal\"))\r\n      body.removeChild(document.getElementById(\"modal-portal\") as HTMLElement);\r\n\r\n    body.insertBefore(div, document.getElementById(\"root\"));\r\n    wait(100).then(() => {\r\n      div.innerHTML = ReactDOMServer.renderToString(<UpwardTableModalSearch />);\r\n    });\r\n\r\n    setShow(true);\r\n    setTimeout(() => {\r\n      if (searchInputRef.current) {\r\n        const event = new KeyboardEvent(\"keydown\", {\r\n          code: \"Enter\",\r\n          bubbles: true,\r\n        });\r\n        searchInputRef.current.focus(); // Ensure the element has focus\r\n        searchInputRef.current.dispatchEvent(event); // Dispatch the native event\r\n        setTimeout(() => {\r\n          searchInputRef.current?.focus();\r\n        }, 100);\r\n      }\r\n    }, 100);\r\n  }\r\n  function closeModal(muteOnClose = true) {\r\n    if (onClose && muteOnClose) {\r\n      onClose();\r\n    }\r\n    setShow(false);\r\n    dataCache = [];\r\n  }\r\n  const UpwardTableModalSearch = () => {\r\n    const tableRef = useRef<any>(null);\r\n    const [blick, setBlick] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const { executeQueryToClient } = useExecuteQueryFromClient();\r\n\r\n    useEffect(() => {\r\n      if (dataCache.length > 0) {\r\n        if (searchInputRef.current) {\r\n          searchInputRef.current.value = searchInputValueCache;\r\n        }\r\n        setData(dataCache);\r\n      }\r\n    }, [setData]);\r\n\r\n    useEffect(() => {\r\n      if (data.length > 0) {\r\n        dataCache = data;\r\n        tableRef.current?.setDataFormated(data);\r\n      }\r\n    }, [data]);\r\n\r\n    return show ? (\r\n      <div id=\"modal-inject\">\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            background: \"transparent\",\r\n            zIndex: \"88\",\r\n          }}\r\n          onClick={() => {\r\n            setBlick(true);\r\n            setTimeout(() => {\r\n              setBlick(false);\r\n            }, 250);\r\n          }}\r\n        ></div>\r\n\r\n        <div\r\n          style={{\r\n            background: \"#F1F1F1\",\r\n            width: customWidth\r\n              ? customWidth(blick, column)\r\n              : blick\r\n              ? \"451px\"\r\n              : \"450px\",\r\n            height: blick ? \"501px\" : \"500px\",\r\n            position: \"absolute\",\r\n            zIndex: 111111,\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%,-50%)\",\r\n            boxShadow: \"3px 6px 32px -7px rgba(0,0,0,0.75)\",\r\n            boxSizing: \"border-box\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              height: \"22px\",\r\n              background: \"white\",\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              padding: \"5px\",\r\n              position: \"relative\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>Search</span>\r\n            <button\r\n              className=\"btn-check-exit-modal\"\r\n              style={{\r\n                padding: \"0 5px\",\r\n                borderRadius: \"0px\",\r\n                background: \"white\",\r\n                color: \"black\",\r\n                height: \"22px\",\r\n                position: \"absolute\",\r\n                top: 0,\r\n                right: 0,\r\n              }}\r\n              onClick={() => {\r\n                closeModal();\r\n              }}\r\n            >\r\n              <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n            </button>\r\n          </div>\r\n          <div\r\n            style={{\r\n              padding: \"5px\",\r\n            }}\r\n          >\r\n            <TextInput\r\n              containerStyle={{\r\n                width: \"100%\",\r\n              }}\r\n              label={{\r\n                title: \"Search : \",\r\n                style: {\r\n                  fontSize: \"12px\",\r\n                  fontWeight: \"bold\",\r\n                  width: \"70px\",\r\n                  display: \"none\",\r\n                },\r\n              }}\r\n              input={{\r\n                type: \"text\",\r\n                style: { width: \"100%\" },\r\n                onKeyDown: async (e) => {\r\n                  if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\r\n                    searchInputValueCache = e.currentTarget.value;\r\n                    const searchQuery = query(e.currentTarget.value);\r\n                    console.log(searchQuery);\r\n                    const dd = await executeQueryToClient(searchQuery);\r\n                    setData(dd.data.data);\r\n                  }\r\n\r\n                  if (e.code === \"ArrowDown\") {\r\n                    const td = document.querySelector(\r\n                      `.td.row-0`\r\n                    ) as HTMLTableDataCellElement;\r\n                    if (td) {\r\n                      const parentElement = tableRef.current.getParentElement();\r\n\r\n                      td.focus({\r\n                        preventScroll: true,\r\n                      });\r\n                      parentElement.style.overflow = \"hidden\";\r\n                      wait(100).then(() => {\r\n                        parentElement.style.overflow = \"auto\";\r\n                      });\r\n                    }\r\n                    tableRef.current?._setSelectedRow(0);\r\n                  }\r\n                },\r\n              }}\r\n              inputRef={searchInputRef}\r\n              icon={<SearchIcon sx={{ fontSize: \"18px\" }} />}\r\n              onIconClick={async (e) => {\r\n                e.preventDefault();\r\n                if (searchInputRef.current)\r\n                  searchInputValueCache = searchInputRef.current.value;\r\n                const searchQuery = query(searchInputRef.current?.value);\r\n                const dd = await executeQueryToClient(searchQuery);\r\n                setData(dd.data.data);\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              flex: 1,\r\n            }}\r\n          >\r\n            <DataGridViewReact\r\n              columns={column}\r\n              height={\"100%\"}\r\n              ref={tableRef}\r\n              getSelectedItem={getSelectedItem}\r\n              onKeyDown={onKeyDown}\r\n              focusElementOnMaxTop={() => {\r\n                searchInputRef.current?.focus();\r\n              }}\r\n            />\r\n          </div>\r\n          <div style={{ padding: \"0 10px\" }}>\r\n            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>\r\n              Records: Top {data.length}\r\n            </span>\r\n          </div>\r\n          <style>\r\n            {`\r\n                                    .btn-check-exit-modal:hover{\r\n                                        background:red !important;\r\n                                        color:white !important;\r\n                                    }\r\n                                `}\r\n          </style>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <></>\r\n    );\r\n  };\r\n\r\n  return {\r\n    openModal,\r\n    closeModal,\r\n    UpwardTableModalSearch,\r\n  };\r\n};\r\n\r\nlet _dataCache: any = [];\r\nlet _searchInputValueCache = \"\";\r\nexport const useUpwardTableModalSearchSafeMode = ({\r\n  column,\r\n  link,\r\n  getSelectedItem,\r\n  onKeyDown,\r\n  customWidth,\r\n  onClose,\r\n  size = \"small\",\r\n}: any) => {\r\n  const [show, setShow] = useState(false);\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  function openModal(search: string = \"\") {\r\n    const body = document.body;\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"modal-portal\";\r\n\r\n    if (document.getElementById(\"modal-portal\"))\r\n      body.removeChild(document.getElementById(\"modal-portal\") as HTMLElement);\r\n    body.insertBefore(div, body.firstChild);\r\n\r\n    setShow(true);\r\n    wait(100).then(() => {\r\n      if (searchInputRef.current) {\r\n        searchInputRef.current.value = search;\r\n        const event = new KeyboardEvent(\"keydown\", {\r\n          code: \"Enter\",\r\n          bubbles: true,\r\n        });\r\n        searchInputRef.current.focus(); // Ensure the element has focus\r\n        searchInputRef.current.dispatchEvent(event); // Dispatch the native event\r\n        wait(100).then(() => {\r\n          searchInputRef.current?.focus();\r\n        });\r\n      }\r\n    });\r\n  }\r\n  function closeModal(muteOnClose = true) {\r\n    if (onClose && muteOnClose) {\r\n      onClose();\r\n    }\r\n    setShow(false);\r\n    _dataCache = [];\r\n  }\r\n  const UpwardTableModalSearch = () => {\r\n    const { user, myAxios } = useContext(AuthContext);\r\n    const tableRef = useRef<any>(null);\r\n    const [blick, setBlick] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState([]);\r\n\r\n    function mutate(variable: any) {\r\n      setIsLoading(true);\r\n      myAxios\r\n        .post(link, variable, {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          setData(response.data?.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoading(false);\r\n          console.log(err);\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (_dataCache.length > 0) {\r\n        if (searchInputRef.current) {\r\n          searchInputRef.current.value = _searchInputValueCache;\r\n        }\r\n        setData(_dataCache);\r\n      }\r\n    }, [setData]);\r\n\r\n    useEffect(() => {\r\n      if (data.length > 0) {\r\n        _dataCache = data;\r\n      }\r\n      tableRef.current?.setDataFormated(data);\r\n    }, [data]);\r\n\r\n    function customWidth(blick: boolean) {\r\n      if (size === \"large\") {\r\n        return blick ? \"851px\" : \"850px\";\r\n      } else if (size === \"medium\") {\r\n        return blick ? \"651px\" : \"650px\";\r\n      } else {\r\n        return blick ? \"451px\" : \"450px\";\r\n      }\r\n    }\r\n\r\n    return show ? (\r\n      ReactDOM.createPortal(\r\n        <div id=\"modal-inject\">\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: 0,\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              background: \"transparent\",\r\n              zIndex: \"88\",\r\n            }}\r\n            onClick={() => {\r\n              setBlick(true);\r\n              setTimeout(() => {\r\n                setBlick(false);\r\n              }, 250);\r\n            }}\r\n          ></div>\r\n\r\n          <div\r\n            style={{\r\n              background: \"#F1F1F1\",\r\n              width: customWidth(blick),\r\n              height: blick ? \"501px\" : \"500px\",\r\n              position: \"absolute\",\r\n              zIndex: 111111,\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%,-50%)\",\r\n              boxShadow: \"3px 6px 32px -7px rgba(0,0,0,0.75)\",\r\n              boxSizing: \"border-box\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            {isLoading && <Loading />}\r\n            <div\r\n              style={{\r\n                height: \"22px\",\r\n                background: \"white\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                padding: \"5px\",\r\n                position: \"relative\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>\r\n                Search\r\n              </span>\r\n              <button\r\n                className=\"btn-check-exit-modal\"\r\n                style={{\r\n                  padding: \"0 5px\",\r\n                  borderRadius: \"0px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  height: \"22px\",\r\n                  position: \"absolute\",\r\n                  top: 0,\r\n                  right: 0,\r\n                }}\r\n                onClick={() => {\r\n                  closeModal();\r\n                }}\r\n              >\r\n                <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n              </button>\r\n            </div>\r\n            <div\r\n              style={{\r\n                padding: \"5px\",\r\n              }}\r\n            >\r\n              <TextInput\r\n                containerStyle={{\r\n                  width: \"100%\",\r\n                }}\r\n                label={{\r\n                  title: \"Search : \",\r\n                  style: {\r\n                    fontSize: \"12px\",\r\n                    fontWeight: \"bold\",\r\n                    width: \"70px\",\r\n                    display: \"none\",\r\n                  },\r\n                }}\r\n                input={{\r\n                  type: \"text\",\r\n                  style: { width: \"100%\" },\r\n                  onKeyDown: async (e) => {\r\n                    if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\r\n                      _searchInputValueCache = e.currentTarget.value;\r\n                      mutate({ search: e.currentTarget.value });\r\n                    }\r\n\r\n                    if (e.code === \"ArrowDown\") {\r\n                      const td = document.querySelector(\r\n                        `.td.row-0`\r\n                      ) as HTMLTableDataCellElement;\r\n                      if (td) {\r\n                        const parentElement =\r\n                          tableRef.current.getParentElement();\r\n\r\n                        td.focus({\r\n                          preventScroll: true,\r\n                        });\r\n                        parentElement.style.overflow = \"hidden\";\r\n                        wait(100).then(() => {\r\n                          parentElement.style.overflow = \"auto\";\r\n                        });\r\n                      }\r\n                      tableRef.current?._setSelectedRow(0);\r\n                    }\r\n                  },\r\n                  onInput: (e) => {\r\n                    if (e.currentTarget.value === \"\") {\r\n                      mutate({ search: \"\" });\r\n                    }\r\n                  },\r\n                }}\r\n                inputRef={searchInputRef}\r\n                icon={<SearchIcon sx={{ fontSize: \"18px\" }} />}\r\n                onIconClick={async (e) => {\r\n                  e.preventDefault();\r\n                  if (searchInputRef.current)\r\n                    _searchInputValueCache = searchInputRef.current.value;\r\n\r\n                  mutate({ search: searchInputRef.current?.value });\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n              }}\r\n            >\r\n              <DataGridViewReact\r\n                columns={column}\r\n                height={\"100%\"}\r\n                ref={tableRef}\r\n                getSelectedItem={getSelectedItem}\r\n                onKeyDown={onKeyDown}\r\n                focusElementOnMaxTop={() => {\r\n                  searchInputRef.current?.focus();\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"0 10px\" }}>\r\n              <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>\r\n                Records: Top {data.length}\r\n              </span>\r\n            </div>\r\n            <style>\r\n              {`\r\n                                    .btn-check-exit-modal:hover{\r\n                                        background:red !important;\r\n                                        color:white !important;\r\n                                    }\r\n                                `}\r\n            </style>\r\n          </div>\r\n        </div>,\r\n        document.getElementById(\"modal-portal\") as HTMLElement\r\n      )\r\n    ) : (\r\n      <></>\r\n    );\r\n  };\r\n\r\n  return {\r\n    openModal,\r\n    closeModal,\r\n    UpwardTableModalSearch,\r\n    searchInputRef,\r\n  };\r\n};\r\n","import { CircularProgress } from \"@mui/material\"\r\n\r\nexport const Loading = () => {\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0,\r\n                background: \"red\",\r\n                zIndex: \"88\",\r\n                backgroundColor: 'rgba(0, 0, 0, 0.4)'\r\n            }}\r\n            ></div>\r\n            <div style={{\r\n                position: \"absolute\",\r\n                zIndex: \"100\",\r\n                background: \"white\",\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%,-50%)\",\r\n                boxShadow: '3px 6px 32px -7px rgba(0,0,0,0.75)',\r\n                display: \"flex\",\r\n                columnGap: \"20px\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                padding: \"10px 15px\",\r\n            }}>\r\n                <CircularProgress color=\"primary\" />\r\n                <span>Loading...</span>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { HtmlHTMLAttributes, InputHTMLAttributes, useId, ReactNode, useState, LegacyRef, HTMLInputTypeAttribute, TextareaHTMLAttributes, CSSProperties, forwardRef, useImperativeHandle } from \"react\";\nimport \"../style/design.css\";\nimport { AnyMxRecord } from \"dns\";\n\n\ninterface TextInputProps {\n  input: InputHTMLAttributes<HTMLInputElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: 'start' | 'end'; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n  disableIcon?: boolean\n  containerStyle?: CSSProperties\n}\n\ninterface TextAreaPrps {\n  textarea: TextareaHTMLAttributes<HTMLTextAreaElement>\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  _inputRef: LegacyRef<HTMLTextAreaElement>\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: 'start' | 'end'; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n  disableIcon?: boolean\n  containerStyle?:CSSProperties\n}\n\ninterface TextFormatedInputProps extends TextInputProps {\n  onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined\n  onBlur?: React.ChangeEventHandler<HTMLInputElement> | undefined\n}\nexport function TextFormatedInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => { },\n  onChange = (e) => { },\n  onBlur = (e) =>{},\n  containerStyle\n}: TextFormatedInputProps) {\n  // const [inputValue, setInputValue] = useState('');\n  const id = useId();\n\n\n  // Helper function to format numbers with commas\n  const formatNumber = (value: string) => {\n    if (!value) return value;\n\n    // Split the value into integer and decimal parts\n    const parts = value.split('.');\n\n    // Add commas to the integer part only\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n    // Join the integer and decimal parts if decimal exists\n    return parts.join('.');\n  };\n\n  // Helper function to remove commas\n  const unformatNumber = (value: string) => {\n    return value.replace(/,/g, '');\n  };\n\n  // Function to ensure two decimal places\n  const ensureTwoDecimals = (value: string) => {\n    // If the value has no decimal part, append '.00'\n    if (!value.includes('.')) {\n      if (value === '') {\n        return '0.00';\n      } else {\n\n        return value + '.00';\n      }\n    }\n\n    // If the value has one decimal place, append '0'\n    const parts = value.split('.');\n    if (parts[1].length === 1) {\n      return value + '0';\n    }\n\n    // If it already has two decimal places, return as is\n    return value;\n  };\n\n  const handleChange = (e: any) => {\n    let value = e.target.value;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Allow only numbers, commas, and one decimal point\n    const regex = /^-?\\d+(,\\d{3})*(\\.\\d*)?$/;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Check if the value is valid\n    if (value === '' || regex.test(value)) {\n      // Set the formatted value back in the input field\n      //setInputValue(formatNumber(value));\n      e.target.value = formatNumber(value)\n\n    } else {\n      const numbers = value.match(/\\d+/g);\n      if (numbers) {\n        const newV = numbers.join('')\n        e.target.value = formatNumber(newV)\n      } else {\n        e.target.value = \"0\"\n      }\n    }\n  };\n\n  const handleBlur = (e: any) => {\n    let value = unformatNumber(e.target.value);\n\n    // Ensure the value has two decimal places\n    value = ensureTwoDecimals(value);\n\n    // Set the value with commas and .00 (if needed)\n    // setInputValue(formatNumber(value));\n    e.target.value = formatNumber(value)\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative',\n        ...containerStyle // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        type=\"text\"\n        style={{\n          height: '100%',\n          textAlign: \"right\",\n          ...input.style,\n        }}\n        onChange={(e) => {\n          handleChange(e)\n          onChange(e)\n        }}\n        onBlur={(e) => {\n          handleBlur(e)\n          onBlur(e)\n        }}  // Add .00 on blur\n\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\"\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\nexport function TextInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  containerStyle,\n  onIconClick = (e) => { }\n}: TextInputProps) {\n  const id = useId();\n\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative',\n        ...containerStyle\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        style={{\n          height: '100%',\n          ...input.style,\n        }}\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\",\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\n\n\nexport function TextAreaInput({\n  textarea,\n  label,\n  _inputRef,\n  icon,\n  iconPosition = 'end', // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => { },\n  containerStyle\n}: TextAreaPrps) {\n  const id = useId();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        position: 'relative', \n        ...containerStyle// Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === 'start' && (\n        <div style={{ position: 'absolute', left: '8px', zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <textarea\n        ref={_inputRef}\n        id={id}\n        {...textarea}\n        style={{\n          height: '100%',\n          ...textarea.style,\n        }}\n\n      />\n      {icon && iconPosition === 'end' && (\n        <div onClick={onIconClick}\n          style={{\n            position: 'absolute',\n            right: '2px',\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\"\n          }}>\n          {icon}\n        </div>\n\n      )\n      }\n    </div >\n  );\n}\n\nexport const SelectInput = forwardRef(({\n  select,\n  label,\n  selectRef,\n  datasource = [],\n  values = \"\",\n  display = \"\",\n  containerStyle\n}: {\n  selectRef?: React.RefObject<HTMLSelectElement>;\n  labelRef?: React.RefObject<HTMLLabelElement>;\n  select: InputHTMLAttributes<HTMLSelectElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  datasource: Array<any>;\n  values: string;\n  display: string;\n  containerStyle?: React.CSSProperties | undefined\n}, ref: any) => {\n\n\n  const [_datasource, _setDataSource] = useState(datasource)\n  const id = useId();\n\n  useImperativeHandle(ref, () => ({\n    setDataSource: (_dataSource: any) => {\n      _setDataSource(_dataSource)\n    },\n    getDataSource: () => {\n      return _datasource\n    }\n  }))\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"18px\",\n        alignItems: \"center\",\n        ...containerStyle\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      <select\n        {...select}\n        ref={selectRef}\n        className={`select ${select.className}`}\n        style={{\n          height: \"18px\",\n          ...select.style,\n        }}\n      >\n        {_datasource.map((itm, idx) => {\n          return (\n            <option key={idx} value={itm[values]}>\n              {itm[display]}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n})\n\nexport function ButtonField({\n  buttonRetRef,\n  button,\n  tooltipText = \"\",\n  children,\n  disabled = false,\n}: {\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\n  tooltipText: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}) {\n  return (\n    <div className=\"tooltip\">\n      <button\n        disabled={disabled}\n        {...button}\n        ref={buttonRetRef}\n        style={{ ...button.style, background: !disabled ? \"transparent\" : \"#f1f1f1\" }}\n        className=\"tooltip-button\"\n      >\n        {children}\n      </button>\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\n    </div>\n  );\n}\n","import { useContext } from \"react\";\r\nimport { AuthContext } from \"../components/AuthContext\"\r\n\r\n\r\n\r\nexport default function useExecuteQueryFromClient() {\r\n    const { myAxios, user } = useContext(AuthContext);\r\n\r\n\r\n    async function executeQueryToClient(query: string) {\r\n        return await myAxios.post('/execute-query', { query }, {\r\n            headers: {\r\n                Authorization: `Bearer ${user?.accessToken}`\r\n            }\r\n        })\r\n    }\r\n\r\n    return {\r\n        executeQueryToClient\r\n    }\r\n}\r\n\r\n"],"names":["DataGridViewReact","forwardRef","_ref","ref","columns","_ref$height","rows","height","getSelectedItem","onKeyDown","_ref$disbaleTable","disbaleTable","_ref$isTableSelectabl","isTableSelectable","_isTableSelectable","containerStyle","focusElementOnMaxTop","_ref$ActionComponent","ActionComponent","_jsx","_Fragment","_ref$showSequence","showSequence","parentElementRef","useRef","actionModalRef","checkboxRef","tbodyRef","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","column","setColumn","_useState5","_useState6","selectedRow","setSelectedRow","_useState7","_useState8","selectedRowIndex","setSelectedRowIndex","totalRowWidth","reduce","a","b","width","_useState9","_useState10","setIsTableSelectable","useEffect","length","filter","itm","hide","useImperativeHandle","checkNoIsExist","checkNo","some","subArray","getData","_toConsumableArray","newData","getColumns","resetTable","getSelectedRow","value","resetCheckBox","handleResetCheckBox","_setSelectedRow","param","setDataFormated","map","col","key","getDataFormatted","Check_No","Check_Date","Check_Amnt","BankName","Branch","Check_Remarks","Deposit_Slip","DateDeposit","OR_No","BankCode","getElementBody","current","getParentElement","forEach","checkbox","idx","checked","handleResetCheckBoxByIndex","_idx","handleRightClick","event","preventDefault","showModal","_jsxs","children","ActionModal","Component","closeModal","closeDelay","rowItm","style","_objectSpread","overflow","position","pointerEvents","border","boxShadow","background","concat","id","borderCollapse","top","zIndex","borderRight","fontSize","padding","textAlign","colItm","type","label","rowIdx","RowComponent","_ref2","className","cursor","margin","display","alignItems","justifyContent","CheckBoxSelection","readOnly","defaultValue","String","padStart","userSelect","colIdx","tabIndex","onDoubleClick","onClick","e","prev","index","Math","max","td","document","querySelector","focus","min","setTimeout","code","onContextMenu","_ref3","el","currentTarget","_ref4","handleOnSave","handleOnClose","hasSelectedRow","_useState11","_useState12","setShowModal","_useState13","_useState14","handleDelayClose","setHandleDelayClose","_useState15","_useState16","blick","setBlick","closeDelayRef","clsoeModal","window","addEventListener","bottom","left","right","transform","flexDirection","opacity","transition","fontWeight","borderRadius","color","CloseIcon","sx","DataGridViewMultiSelectionReact","_ref5","_ref5$height","_ref5$disbaleTable","_ref5$isTableSelectab","onCheckAll","onUnCheckAll","rowIsSelectable","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","getSelectedRowsData","item","undefined","includes","d","i","dataCache","searchInputValueCache","useUpwardTableModalSearch","_ref6","query","customWidth","onClose","_useState27","_useState28","show","setShow","searchInputRef","arguments","UpwardTableModalSearch","_onKeyDown3","_ref7","tableRef","_useState29","_useState30","_useState31","_useState32","executeQueryToClient","useExecuteQueryFromClient","_tableRef$current","boxSizing","TextInput","title","input","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","searchQuery","dd","_tableRef$current2","parentElement","wrap","_context","next","console","log","sent","preventScroll","wait","then","stop","apply","inputRef","icon","SearchIcon","onIconClick","_x2","_callee2","_searchInputRef$curre2","_context2","flex","_searchInputRef$curre3","openModal","body","div","createElement","getElementById","removeChild","insertBefore","innerHTML","ReactDOMServer","KeyboardEvent","bubbles","dispatchEvent","_searchInputRef$curre","_dataCache","_searchInputValueCache","useUpwardTableModalSearchSafeMode","_ref8","link","_ref8$size","size","_useState33","_useState34","search","firstChild","_searchInputRef$curre4","_onKeyDown4","_ref9","_useContext","useContext","AuthContext","user","myAxios","_useState35","_useState36","_useState37","_useState38","isLoading","setIsLoading","_useState39","_useState40","mutate","variable","post","headers","Authorization","accessToken","response","_response$data","catch","err","finally","_tableRef$current3","ReactDOM","Loading","_x3","_callee3","_tableRef$current4","_context3","onInput","_x4","_callee4","_searchInputRef$curre5","_context4","_searchInputRef$curre6","backgroundColor","columnGap","CircularProgress","TextFormatedInput","_ref$iconPosition","iconPosition","_ref$disableIcon","disableIcon","_ref$onIconClick","_ref$onChange","onChange","_ref$onBlur","onBlur","useId","formatNumber","parts","split","replace","join","unformatNumber","htmlFor","target","test","numbers","match","newV","handleChange","ensureTwoDecimals","handleBlur","_ref2$iconPosition","_ref2$disableIcon","_ref2$onIconClick","TextAreaInput","textarea","_inputRef","_ref3$iconPosition","_ref3$disableIcon","_ref3$onIconClick","SelectInput","select","selectRef","_ref4$datasource","datasource","_ref4$values","values","_ref4$display","_datasource","_setDataSource","setDataSource","_dataSource","getDataSource","ButtonField","buttonRetRef","button","_ref5$tooltipText","tooltipText","_ref5$disabled","disabled","_executeQueryToClient","abrupt"],"sourceRoot":""}