{"version":3,"file":"static/js/4701.93c56ec3.chunk.js","mappings":"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","sources":["hooks/useMutationModalTable.tsx","feautures/Admin/Task/Accounting/Collections.tsx"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { AuthContext } from \"../components/AuthContext\";\nimport { GridRowSelectionModel ,GridRowParams} from \"@mui/x-data-grid\";\nimport ModalWithTable from \"../components/ModalWithTable\";\nimport { flushSync } from \"react-dom\";\n\ninterface QueryModalTableParamsType {\n  link: {\n    queryWithVariable: (variable: any) => string;\n    queryExtraBySearch: string;\n  };\n  uniqueId: string;\n  queryKey: string;\n  responseDataKey: string;\n  columns: Array<any>;\n  onSelected?: (selectedRowData: Array<any>, data: Array<any>) => void;\n  onRemoveSelected?: (data: Array<any>) => void;\n  onSuccess?: (data: Array<any>) => void;\n  searchRef?: React.RefObject<HTMLInputElement>;\n  onCellKeyDown?: any;\n  onCloseFunction?: (search: any) => void;\n  isRowSelectable?: ((params: GridRowParams<any>) => boolean) | undefined;\n}\nconst useMutationModalTable = ({\n  link,\n  uniqueId,\n  queryKey,\n  responseDataKey,\n  columns,\n  onSelected = () => {},\n  onRemoveSelected = () => {},\n  onSuccess = () => {},\n  searchRef,\n  onCellKeyDown,\n  onCloseFunction,\n  isRowSelectable\n}: QueryModalTableParamsType) => {\n  const { myAxios, user } = useContext(AuthContext);\n  const [openSearchCollection, setOpenSearchCollection] = useState(false);\n  const [rows, setRows] = useState<GridRowSelectionModel>([]);\n  const { isLoading, mutate } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) =>\n      await myAxios.get(`${link.queryWithVariable(variables)}`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    onSuccess: (res) => {\n      const response = res as any;\n      setRows(response.data[responseDataKey]);\n      onSuccess(response);\n    },\n  });\n\n  const openModal = (search: string = \"\") => {\n    flushSync(() => {\n      setOpenSearchCollection(true);\n    });\n\n    if (searchRef?.current) {\n      searchRef.current.value = search;\n\n      myAxios\n        .get(`${link.queryExtraBySearch}=${search}`, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        })\n        .then((res: any) => {\n          if (!res?.data.success) {\n            return alert(`Error : ${res?.data.message}`);\n          }\n          const response = res as any;\n          setRows(response.data[responseDataKey]);\n          if (searchRef?.current) searchRef.current.focus();\n        });\n\n    }\n\n  };\n  const closeModal = () => {\n    setOpenSearchCollection(false);\n    if (onCloseFunction) {\n      onCloseFunction(searchRef?.current?.value);\n    }\n  };\n\n  const ModalComponent = (\n    <ModalWithTable\n      searchRef={searchRef}\n      showModal={openSearchCollection}\n      onCloseModal={() => {\n        setOpenSearchCollection(false);\n        if (onCloseFunction) {\n          onCloseFunction(searchRef?.current?.value);\n        }\n      }}\n      onClickCloseIcon={() => {\n        setOpenSearchCollection(false);\n        if (onCloseFunction) {\n          onCloseFunction(searchRef?.current?.value);\n        }\n      }}\n      searchOnChange={(e) => {\n        myAxios\n          .get(`${link.queryExtraBySearch}=${e.target.value}`, {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          })\n          .then((res: any) => {\n            if (!res?.data.success) {\n              return alert(`Error : ${res?.data.message}`);\n            }\n            const response = res as any;\n            setRows(response.data[responseDataKey]);\n          });\n      }}\n      onSearchKeyEnter={(value) => {\n        myAxios\n          .get(`${link.queryExtraBySearch}=${value}`, {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          })\n          .then((res: any) => {\n            if (!res?.data.success) {\n              return alert(`Error : ${res?.data.message}`);\n            }\n            const response = res as any;\n            setRows(response.data[responseDataKey]);\n          });\n      }}\n      onCellKeyDown={onCellKeyDown}\n      height={300}\n      isLoading={isLoading}\n      queryKey={queryKey}\n      columns={columns}\n      onSelectionChange={(rowSelectionModel, data) => {\n        if (rowSelectionModel.length <= 0) {\n          return onRemoveSelected(data);\n        }\n        const selectedIDs = new Set(rowSelectionModel);\n        const selectedRowData = data.filter((row: any) => {\n          return selectedIDs.has(row[uniqueId].toString());\n        });\n        if (selectedRowData.length <= 0) return;\n        onSelected(selectedRowData, data);\n      }}\n      isRowSelectable={isRowSelectable}\n      id={uniqueId}\n      rows={rows}\n      setRows={setRows}\n    />\n  );\n\n  return {\n    openSearchCollection,\n    rows,\n    isLoading,\n    openModal,\n    closeModal,\n    ModalComponent,\n    mutate,\n  };\n};\n\nexport default useMutationModalTable;\n","import { useContext, useState, useRef, useReducer, createContext } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  CircularProgress,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  FormControl,\n  Select,\n  MenuItem,\n  Modal,\n  Autocomplete,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport { green } from \"@mui/material/colors\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport useUrlParams from \"../../../../hooks/useUrlParams\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport { wait } from \"../../../../lib/wait\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { incrementCheckNo } from \"./PostDateChecks\";\nimport useQueryModalTable from \"../../../../hooks/useQueryModalTable\";\nimport useMutationModalTable from \"../../../../hooks/useMutationModalTable\";\nimport { flushSync } from \"react-dom\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport { UpwardTable } from \"../../../../components/UpwardTable\";\nimport PageHelmet from \"../../../../components/Helmet\";\n\nconst CollectionContext = createContext<{\n  debit: Array<any>;\n  credit: Array<any>;\n}>({ debit: [], credit: [] });\n\nconst initialState = {\n  ORNo: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  //====\n  creditUpdateMode: false,\n  creditCheckIdx: \"\",\n  creditCheckID: \"\",\n  //===\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  searchCheckedList: \"\",\n  bank_transaction: \"\",\n  isFao: false,\n  search: \"\",\n  mode: \"\",\n};\nconst initialStateDeposit = {\n  cashID: \"\",\n  cashMode: \"add\",\n  payamentType: \"CSH\",\n  amount: \"\",\n  transaction_desc: [],\n  debitHasSelected: false,\n};\nconst initialStateCredit = {\n  creditMode: \"add\",\n  creditId: \"\",\n  transaction: \"\",\n  amount: \"\",\n  FAO_Name: \"\",\n  FAO_ID: \"\",\n  remarks: \"\",\n  option: \"Non-Vat\",\n  invoice: \"\",\n  Code: \"\",\n  Title: \"\",\n  TC: \"\",\n};\nconst modalInitialState = {\n  CheckIdx: \"\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  CheckMode: \"add\",\n};\n\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst addCollectionQueryKey = \"add-collection\";\nconst queryMutationKeyCollectionDataSearch = \"collection-data-search\";\nexport const debitColumn = [\n  { field: \"Payment\", headerName: \"Payment\", flex: 1, width: 170 },\n  {\n    field: \"Amount\",\n    headerName: \"Amount\",\n    flex: 1,\n    width: 170,\n    type: \"number\",\n  },\n  { field: \"Check_No\", headerName: \"Check No\", width: 170 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 170 },\n  { field: \"Bank_Branch\", headerName: \"Bank/Branch\", width: 300 },\n  { field: \"Acct_Code\", headerName: \"DR Code\", width: 170 },\n  { field: \"Acct_Title\", headerName: \"DR Title\", width: 300 },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 170 },\n  { field: \"Cntr\", headerName: \"Cntr\", width: 170 },\n  { field: \"Remarks\", headerName: \"Remarks\", width: 300 },\n  { field: \"TC\", headerName: \"TC\", width: 170 },\n  { field: \"temp_id\", headerName: \"temp_id\", hide: true },\n  { field: \"Bank\", headerName: \"Bank\", hide: true },\n  { field: \"BankName\", headerName: \"BankName\", hide: true },\n];\nexport const creditColumn = [\n  { field: \"temp_id\", headerName: \"temp_id\", hide: true },\n  { field: \"transaction\", headerName: \"Transaction\", width: 200 },\n  { field: \"amount\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"Remarks\", headerName: \"Remarks\", width: 350 },\n  { field: \"Code\", headerName: \"Code\", width: 150 },\n  { field: \"Title\", headerName: \"Title\", width: 350 },\n  { field: \"TC\", headerName: \"TC\", width: 200 },\n  { field: \"Account_No\", headerName: \"Accoount No.\", width: 180 },\n  { field: \"Name\", headerName: \"Name\", width: 350 },\n  { field: \"VATType\", headerName: \"VAT Type\", width: 150 },\n  { field: \"invoiceNo\", headerName: \"Invoice No\", width: 250 },\n];\nconst queryKeyPaymentType = \"payment-type-code\";\nconst queryKeyNewORNumber = \"new-or-number\";\n\nexport default function Collections() {\n  const [credit, setCredit] = useState<GridRowSelectionModel>([]);\n  const [debit, setDebit] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n\n  const { searchParams, setSearchParams } = useUrlParams();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [debitState, debitDispatch] = useReducer(reducer, initialStateDeposit);\n  const [creditState, creditDispatch] = useReducer(reducer, initialStateCredit);\n  const [modalState, modalDispatch] = useReducer(reducer, modalInitialState);\n\n  const { myAxios, user } = useContext(AuthContext);\n  const [save, setSave] = useState(searchParams.get(\"selected\") !== \"\");\n  const [addNew, setAddNew] = useState(searchParams.get(\"selected\") !== \"\");\n  const [hasSelected, setHasSelected] = useState(false);\n\n  // button submit buttons\n  const cashButtonSave = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveActionButtonRef = useRef<any>(null);\n\n  const creditSaveButton = useRef<HTMLButtonElement>(null);\n  const saveCollectionButtonRef = useRef<HTMLButtonElement>(null);\n\n  //search modal auto focus on load\n  const pdcSearchInput = useRef<HTMLInputElement>(null);\n  const collectionSearchInput = useRef<HTMLInputElement>(null);\n  const bankSearchInput = useRef<HTMLInputElement>(null);\n  const checkListSearchInput = useRef<HTMLInputElement>(null);\n\n  //Check Modal Input ref\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkRemakrsRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n\n  //debit amount ref\n  const paymentTypeRef = useRef<HTMLSelectElement>(null);\n  const amountRef = useRef<HTMLInputElement>(null);\n\n  //credit input ref\n  let creditTransactionRef = useRef<HTMLInputElement>(null);\n  const creditAmountRef = useRef<HTMLInputElement>(null);\n  const creditFaoRef = useRef<HTMLInputElement>(null);\n  const creditInvoiceRef = useRef<HTMLInputElement>(null);\n\n  //pn/client ref\n  const pnClientORRef = useRef<HTMLInputElement>(null);\n\n  const queryClient = useQueryClient();\n  // client IDs search table modal\n\n\n  const dateRef = useRef<HTMLInputElement>(null);\n  const pdcAddbtnRef = useRef<HTMLButtonElement>(null);\n\n\n\n  const tableDebit = useRef<any>(null);\n  const tableCredit = useRef<any>(null);\n  const creditRemarksRef = useRef<any>(null);\n  const vatRef = useRef<any>(null);\n\n  const {\n    ModalComponent: ModalClientIDs,\n    openModal: openCliendIDsModal,\n    isLoading: isLoadingClientIdsModal,\n    closeModal: closeCliendIDsModal,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        flex: 1,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-polidy-ids\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData, data) => {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"PNo\",\n        value: selectedRowData[0].IDNo,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"IDNo\",\n        value: selectedRowData[0].client_id,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"Name\",\n        value: selectedRowData[0].Name ?? \"\",\n      });\n      closeCliendIDsModal();\n      wait(50).then(() => {\n        paymentTypeRef.current?.focus()\n      })\n    },\n    searchRef: pdcSearchInput,\n  });\n\n  //CREDIT CLIENT\n\n  const {\n    ModalComponent: ModalCreditClientIDs,\n    openModal: openCreditCliendIDsModal,\n    isLoading: isLoadingCreditClientIdsModal,\n    closeModal: closeCreditCliendIDsModal,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        flex: 1,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-polidy-ids\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData, data) => {\n      creditDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"FAO_ID\",\n        value: selectedRowData[0].IDNo,\n      });\n      creditDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"FAO_Name\",\n        value: selectedRowData[0].Name ?? \"\",\n      });\n      closeCreditCliendIDsModal();\n      wait(50).then(() => {\n        creditRemarksRef.current?.focus()\n      })\n    },\n    searchRef: pdcSearchInput,\n  });\n\n  // collection search table modal\n  const {\n    ModalComponent: ModalSearchCollection,\n    openModal: openModalSearchCollection,\n    closeModal: closeModalSearchCollection,\n    isLoading: isLoadingModalSearchCollection,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-collection\",\n      queryUrlName: \"searchCollectionInput\",\n    },\n    columns: [\n      { field: \"Date\", headerName: \"OR Date\", width: 170 },\n      { field: \"ORNo\", headerName: \"OR No.\", width: 200 },\n      { field: \"Name\", headerName: \"Name\", flex: 1 },\n    ],\n    queryKey: \"collection-search\",\n    uniqueId: \"ORNo\",\n    responseDataKey: \"collection\",\n    onSelected: (selectedRowData, data) => {\n      mutateCollectionDataSearch({ ORNo: selectedRowData[0].ORNo });\n    },\n    onCloseFunction: (value: any) => {\n      dispatch({ type: \"UPDATE_FIELD\", field: \"search\", value });\n    },\n    searchRef: collectionSearchInput,\n  });\n  // bank search table modal\n  const {\n    ModalComponent: ModalSearchBanks,\n    openModal: openModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    columns: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n      { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n    ],\n    queryKey: \"collection-banks\",\n    uniqueId: \"Bank_Code\",\n    responseDataKey: \"pdcBanks\",\n    onSelected: (selectedRowData, data) => {\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"BankName\",\n        value: selectedRowData[0].Bank,\n      });\n\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"BankCode\",\n        value: selectedRowData[0].Bank_Code,\n      });\n      closeModalSearchBanks();\n\n      setTimeout(() => {\n        if (checkBranchRef.current) {\n          checkBranchRef.current.focus()\n        }\n      }, 100)\n    },\n\n    searchRef: bankSearchInput,\n  });\n  //Get checked list\n  const {\n    ModalComponent: ModalSearchCheckList,\n    openModal: openModalSearchCheckList,\n    closeModal: closeModalSearchCheckList,\n    isLoading: isLoadingModalSearchCheckList,\n    mutate: mutateClientCheckedList,\n  } = useMutationModalTable({\n    link: {\n      queryWithVariable: (variables: any) => {\n        return `/task/accounting/get-client-checked-by-id?PNo=${variables.PNo}&searchCheckedList=${variables.searchCheckedList}`;\n      },\n      queryExtraBySearch: `/task/accounting/get-client-checked-by-id?PNo=${state.PNo}&searchCheckedList`,\n    },\n    columns: [\n      { field: \"temp_id\", headerName: \"temp_id\", width: 0, hide: true },\n      { field: \"Check_No\", headerName: \"Check No\", width: 130 },\n      { field: \"Check_Date\", headerName: \"Check Date\", flex: 1 },\n      {\n        field: \"Amount\",\n        headerName: \"Amount\",\n        width: 200,\n        type: \"number\",\n      },\n      {\n        field: \"Bank_Branch\",\n        headerName: \"Bank Branch\",\n        width: 200,\n      },\n      {\n        field: \"Remarks\",\n        headerName: \"Remarks\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-client-check\",\n    uniqueId: \"temp_id\",\n    responseDataKey: \"clientCheckedList\",\n    onSelected: (selectedRowData, data) => {\n      if (\n        debit\n          .filter((items: any) => items.Check_No !== \"\")\n          .map((items: any) => items.Check_No)\n          .includes(selectedRowData[0].Check_No)\n      ) {\n        return;\n      }\n\n      myAxios\n        .post(\n          `/task/accounting/get-drcode-drtitle-from-collection`,\n          { code: debitState.payamentType },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        )\n        .then((res) => {\n          console.log(res)\n          const { Acct_Code, Acct_Title } = res?.data?.data[0];\n          setDebit((d: any) => {\n            let lastID = 0;\n            if (d.length <= 0) {\n              lastID = 0;\n            } else {\n              lastID = parseInt(d[d.length - 1].temp_id) + 1;\n            }\n\n            d = [\n              ...d,\n              {\n                Payment: \"Check\",\n                Amount: selectedRowData[0].Amount,\n                Check_No: selectedRowData[0].Check_No,\n                Check_Date: selectedRowData[0].Check_Date,\n                Bank_Branch: selectedRowData[0].Bank_Branch,\n                Acct_Code,\n                Acct_Title,\n                Deposit_Slip: \"\",\n                Cntr: \"\",\n                Remarks: selectedRowData[0].Remarks,\n                TC: debitState.payamentType,\n                temp_id: lastID.toString(),\n                Bank: selectedRowData[0].Bank,\n                BankName: selectedRowData[0].BankName,\n                Check_Remarks: selectedRowData[0].Check_Remarks,\n                Branch: selectedRowData[0].Branch,\n              },\n            ];\n            return d;\n          });\n          closeModalSearchCheckList();\n        });\n    },\n    onSuccess: (data) => {\n      openModalSearchCheckList();\n    },\n    searchRef: checkListSearchInput,\n    isRowSelectable: (params) => {\n      if (\n        debit\n          .filter((items: any) => items.Check_No !== \"\")\n          .map((items: any) => items.Check_No)\n          .includes(params.row.Check_No)\n      ) {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  // get chart_account and transaction_code\n  const { isLoading: paymentTypeLoading } = useQuery({\n    queryKey: queryKeyPaymentType,\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/get-transaction-code-title`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (res) => {\n      const response = res as any;\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"transaction_desc\",\n        value: response.data.transactionDesc,\n      });\n    },\n  });\n\n  //get drcode and drtitle\n  const { isLoading: NewORNoLoading, refetch: refetchNewOR } = useQuery({\n    queryKey: queryKeyNewORNumber,\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/get-new-or-number`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (res) => {\n      const response = res as any;\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"ORNo\",\n        value: response.data?.ORNo[0].collectionID,\n      });\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"OR_No\",\n        value: response.data?.ORNo[0].collectionID,\n      });\n    },\n  });\n  // get data after collection search selected\n  const {\n    isLoading: loadingCollectionDataSearch,\n    mutate: mutateCollectionDataSearch,\n  } = useMutation({\n    mutationKey: queryMutationKeyCollectionDataSearch,\n    mutationFn: async (variables: any) =>\n      await myAxios.get(\n        `/task/accounting/get-collection-data-search?ORNo=${variables.ORNo}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      const dataCollection = response.data.collection;\n\n      const ORNo = dataCollection[0].ORNo;\n      const OR_Date = dataCollection[0].Date_OR;\n      const ClientID = dataCollection[0].ID_No;\n      const ClientName = dataCollection[0].Short;\n      const selectedSearchState = {\n        ORNo: ORNo,\n        PNo: ClientID,\n        IDNo: ClientID,\n        Date: OR_Date,\n        Name: ClientName,\n      };\n      const debit: Array<any> = [];\n      const credit: Array<any> = [];\n\n\n      function isValidDate(dateString: string): boolean {\n        const date = new Date(dateString);\n        return date instanceof Date && !isNaN(date.getTime());\n      }\n\n      for (let i = 0; i <= dataCollection.length - 1; i++) {\n        if (\n          dataCollection[i].Payment !== \"\" &&\n          dataCollection[i].Debit !== \"0\"\n        ) {\n          debit.push({\n            Payment: dataCollection[i].Payment,\n            Amount: dataCollection[i].Debit,\n            Check_No: dataCollection[i].Check_No,\n            Check_Date: isValidDate(dataCollection[i].Check_Date)\n              ? new Date(dataCollection[i].Check_Date).toLocaleDateString()\n              : \"\",\n            Bank_Branch: dataCollection[i].Bank,\n            Acct_Code: dataCollection[i].DRCode,\n            Acct_Title: dataCollection[i].DRTitle,\n            Deposit_Slip: dataCollection[i].SlipCode,\n            Cntr: \"\",\n            Remarks: dataCollection[i].DRRemarks,\n            TC: dataCollection[i].Check_No ? \"CHK\" : \"CSH\",\n            temp_id: `${i}`,\n            Bank: dataCollection[i].Bank_Code,\n            BankName: dataCollection[i].BankName,\n            Branch: dataCollection[i].Branch,\n            Check_Remarks: dataCollection[i].DRRemarks,\n          });\n        }\n\n        if (\n          dataCollection[i].Purpose !== \"\" &&\n          dataCollection[i].Credit !== \"0\" &&\n          dataCollection[i].CRCode !== \"\" &&\n          dataCollection[i].CRTitle !== \"\" &&\n          dataCollection[i].CRLoanID !== \"\" &&\n          dataCollection[i].CRLoanName !== \"\" &&\n          dataCollection[i].CRVatType !== \"\" &&\n          dataCollection[i].CRInvoiceNo !== \"\"\n        ) {\n          credit.push({\n            temp_id: `${i}`,\n            transaction: dataCollection[i].Purpose,\n            amount: dataCollection[i].Credit,\n            Remarks: dataCollection[i].CRRemarks,\n            Code: dataCollection[i].CRCode,\n            Title: dataCollection[i].CRTitle,\n            TC: dataCollection[i].CRTitle,\n            Account_No: dataCollection[i].CRLoanID,\n            Name: dataCollection[i].CRLoanName,\n            VATType: dataCollection[i].CRVATType,\n            invoiceNo: dataCollection[i].CRInvoiceNo,\n          });\n        }\n      }\n      setNewStateValue(dispatch, selectedSearchState);\n      setDebit(debit);\n      setCredit(credit);\n      setAddNew(true);\n      setSave(true);\n      setHasSelected(true);\n      closeModalSearchCollection();\n    },\n  });\n  //add update\n  const {\n    mutate,\n    isLoading: loadingAddNew,\n    variables,\n  } = useMutation({\n    mutationKey: addCollectionQueryKey,\n    mutationFn: async (variables: any) => {\n      if (hasSelected) {\n        delete variables.mode;\n        return await myAxios.post(\n          \"/task/accounting/update-collection\",\n          variables,\n          {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        );\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-collection\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        setSave(false);\n        setAddNew(false);\n        setNewStateValue(dispatch, initialState);\n        queryClient.invalidateQueries(\"collection-search\");\n        setHasSelected(false);\n        setDebit([]);\n        setCredit([]);\n        refetchNewOR();\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  // print\n  const { mutate: mutataPrint, isLoading: isLoadingPrint } = useMutation({\n    mutationKey: \"on-print\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/task/accounting/on-print\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        printOR(res.data);\n      }\n    },\n  });\n  // dispatch state\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // dispatch debit state\n  const handleDebitInputChange = (e: any) => {\n    const { name, value } = e.target;\n    debitDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // dispatch credit state\n  const handleCreditInputChange = (e: any) => {\n    const { name, value } = e.target;\n    creditDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // click button save\n  function handleOnSave(e: any) {\n    e.preventDefault();\n    if (state.ORNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide OR number\",\n        timer: 1500,\n      });\n    } else if (state.PNo === \"\") {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"isFao\",\n        value: false,\n      });\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide PN/Client ID\",\n        timer: 1500,\n      }).then(() => {\n        wait(350).then(() => {\n          openCliendIDsModal();\n        });\n      });\n    } else if (debit.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide debit entry\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => {\n          paymentTypeRef.current?.focus();\n        });\n      });\n    } else if (credit.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide credit entry\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => {\n          creditTransactionRef.current?.focus();\n        });\n      });\n    } else if (\n      debit.reduce(\n        (sum: any, obj: any) =>\n          sum + parseFloat(obj.Amount.toString().replace(/,/g, \"\")),\n        0\n      ) !==\n      credit.reduce(\n        (sum: any, obj: any) =>\n          sum + parseFloat(obj.amount.toString().replace(/,/g, \"\")),\n        0\n      )\n    ) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title:\n          \"Transaction is not balanced. Check if the amount you entered are correct!\",\n        timer: 1500,\n      });\n    }\n\n    if (state.PNo.length >= 200) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"PN/Client ID is too long!\",\n        timer: 1500,\n      });\n    }\n\n    const newState = {\n      ORNo: state.ORNo,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      debit: JSON.stringify(debit),\n      credit: JSON.stringify(credit),\n      payamentType: debitState.payamentType,\n    };\n    if (hasSelected) {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...newState, userCodeConfirmation, mode: \"\" });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...newState, mode: \"\" });\n        },\n      });\n    }\n  }\n  // debit select Row\n  function DebitSelectedChange(rowSelected: any) {\n    if (rowSelected.Payment === \"Cash\") {\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"CheckMode\",\n        value: \"\",\n      });\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"CheckIdx\",\n        value: \"\",\n      });\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"amount\",\n        value: rowSelected.Amount,\n      });\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"cashID\",\n        value: rowSelected.temp_id,\n      });\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"cashMode\",\n        value: \"edit\",\n      });\n      return;\n    }\n    setAddNew(true);\n    setSave(true);\n    modalDispatch({\n      type: \"UPDATE_FIELD\",\n      field: \"CheckMode\",\n      value: \"edit\",\n    });\n    modalDispatch({\n      type: \"UPDATE_FIELD\",\n      field: \"CheckIdx\",\n      value: rowSelected.temp_id,\n    });\n\n    if (rowSelected.Deposit_Slip !== \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: `Unable to edit. Check No ${rowSelected.Check_No} is a PDC deposited!`,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (rowSelected.Cntr !== \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: `Unable to edit. Check No ${rowSelected.Check_No} is a PDC reference!`,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    const newState = {\n      CheckIdx: rowSelected.temp_id,\n      BankName: rowSelected.BankName,\n      BankCode: rowSelected.Bank,\n      Branch: rowSelected.Branch,\n      Check_Date: new Date(rowSelected.Check_Date),\n      Check_No: rowSelected.Check_No,\n      Check_Amnt: rowSelected.Amount,\n      Check_Remarks: rowSelected.Remarks,\n      CheckMode: \"edit\",\n    };\n\n    // if (code === \"Delete\" || code === \"Backspace\") {\n    //   return DebitDeleteRow(rowSelected);\n    // }\n\n    setNewStateValue(modalDispatch, newState);\n    flushSync(() => {\n      setOpenPdcInputModal(true);\n    });\n    checkModalSaveActionButtonRef.current?.focusVisible();\n  }\n  // debit selected row delete\n  function DebitDeleteRow(rowSelected: any) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        return Swal.fire({\n          text: `Check No. ${rowSelected.Check_No} has delete successfully.`,\n          icon: \"success\",\n          showCancelButton: true,\n          timer: 1500,\n        }).then(() => {\n          setDebit((d) => {\n            d = d.filter((item: any) => {\n              return item.temp_id !== rowSelected.temp_id;\n            });\n            return d;\n          });\n        });\n      }\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"amount\",\n        value: \"0.00\",\n      });\n      tableDebit.current?.resetTableSelected();\n    });\n  }\n\n  function handleModalInputChange(e: any) {\n    const { name, value } = e.target;\n    modalDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  }\n\n  function CustomSwalAlertWarning(\n    label: string,\n    cb: (value: SweetAlertResult<any>) => any\n  ) {\n    Swal.fire({\n      text: label,\n      icon: \"warning\",\n      showCancelButton: false,\n      timer: 1500,\n    }).then(cb);\n  }\n\n  function printOR(res: any) {\n    const data = res.data.concat(res.data1);\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(data));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"collection\");\n      if (user?.department === \"UMIS\") {\n        localStorage.setItem(\"title\", user?.department === 'UMIS' ? \"UPWARD MANAGEMENT INSURANCE SERVICES\" : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\");\n      } else {\n        localStorage.setItem(\n          \"title\",\n          \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\"\n        );\n      }\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  }\n\n  const width = window.innerWidth - 70;\n  const height = window.innerHeight - 500;\n\n  return (\n    <>\n      <PageHelmet title=\"Collection\" />\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flex: 1,\n          padding: \"5px\"\n        }}\n      >\n        <CollectionContext.Provider value={{ credit, debit }}>\n          <div style={{ height: \"auto\" }}>\n            <Box\n              sx={(theme) => ({\n                display: \"flex\",\n                alignItems: \"center\",\n                columnGap: \"20px\",\n                [theme.breakpoints.down(\"sm\")]: {\n                  flexDirection: \"column\",\n                  alignItems: \"flex-start\",\n                  flex: 1,\n                  marginBottom: \"15px\",\n                },\n              })}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  columnGap: \"20px\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    columnGap: \"5px\",\n                  }}\n                >\n                  {isLoadingModalSearchCollection ? (\n                    <LoadingButton loading={isLoadingModalSearchCollection} />\n                  ) : (\n                    <TextField\n                      label=\"Search\"\n                      size=\"small\"\n                      name=\"search\"\n                      value={state.search}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          e.preventDefault();\n                          return openModalSearchCollection(\n                            (e.target as HTMLInputElement).value\n                          );\n                        }\n                      }}\n                      InputProps={{\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      }}\n                      sx={{\n                        width: \"300px\",\n                        height: \"27px\",\n                        \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                    />\n                  )}\n                  {!save && (\n                    <Button\n                      sx={{\n                        height: \"30px\",\n                        fontSize: \"11px\",\n                      }}\n                      variant=\"contained\"\n                      startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                      id=\"entry-header-save-button\"\n                      onClick={() => {\n                        setAddNew(true);\n                        setSave(true);\n                        setSearchParams((prev) => {\n                          prev.set(\"selected\", \"\");\n                          return prev;\n                        });\n                        setDebit([]);\n                        setCredit([]);\n                        setHasSelected(false);\n                      }}\n                    >\n                      New\n                    </Button>\n                  )}\n                  <Box sx={{ position: \"relative\" }}>\n                    <Button\n                      sx={{\n                        height: \"30px\",\n                        fontSize: \"11px\",\n                      }}\n                      ref={saveCollectionButtonRef}\n                      id=\"save-entry-header\"\n                      color=\"success\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                      onClick={handleOnSave}\n                      disabled={\n                        (loadingAddNew && variables.mode === undefined) || !save\n                      }\n                      startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n                    >\n                      Save\n                    </Button>\n                    {loadingAddNew && variables.mode === undefined && (\n                      <CircularProgress\n                        size={24}\n                        sx={{\n                          color: green[500],\n                          position: \"absolute\",\n                          top: \"50%\",\n                          left: \"50%\",\n                          marginTop: \"-12px\",\n                          marginLeft: \"-12px\",\n                        }}\n                      />\n                    )}\n                  </Box>\n                  {save && (\n                    <Button\n                      sx={{\n                        height: \"30px\",\n                        fontSize: \"11px\",\n                      }}\n                      variant=\"contained\"\n                      startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n                      color=\"error\"\n                      onClick={() => {\n                        Swal.fire({\n                          title: \"Are you sure?\",\n                          text: \"You won't be able to revert this!\",\n                          icon: \"warning\",\n                          showCancelButton: true,\n                          confirmButtonColor: \"#3085d6\",\n                          cancelButtonColor: \"#d33\",\n                          confirmButtonText: \"Yes, cancel it!\",\n                        }).then((result) => {\n                          if (result.isConfirmed) {\n                            setSave(false);\n                            setAddNew(false);\n                            setNewStateValue(dispatch, initialState);\n                            refetchNewOR();\n                            setDebit([]);\n                            setCredit([]);\n                            setHasSelected(false);\n                          }\n                        });\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  )}\n                  <LoadingButton\n                    loading={isLoadingPrint}\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    sx={{\n                      height: \"30px\",\n                      fontSize: \"11px\",\n                    }}\n                    disabled={!hasSelected}\n                    onClick={() => {\n                      mutataPrint({ ORNo: state.ORNo });\n                    }}\n                  >\n                    Print\n                  </LoadingButton>\n                </div>\n              </div>\n            </Box>\n            <form\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  return;\n                }\n              }}\n            >\n              <Box\n                sx={(theme) => ({\n                  [theme.breakpoints.down(\"md\")]: {\n                    flexDirection: \"column\",\n                    rowGap: \"10px\",\n                  },\n                })}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    padding: \"15px 0 \",\n                  }}\n                >\n                  {NewORNoLoading ? (\n                    <LoadingButton loading={NewORNoLoading} />\n                  ) : (\n                    <FormControl\n                      sx={{\n                        width: \"170px\",\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      disabled={!addNew || hasSelected}\n                      required\n                    >\n                      <InputLabel htmlFor=\"collection-id-field\">\n                        OR No.\n                      </InputLabel>\n                      <OutlinedInput\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                        readOnly={user?.department !== \"UCSMI\"}\n\n                        // inputRef={checkBankRef}\n                        disabled={!addNew || hasSelected}\n                        label=\"OR No.\"\n                        name=\"ORNo\"\n                        value={state.ORNo}\n                        onChange={handleInputChange}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            dateRef.current?.focus();\n                          }\n                        }}\n                        id=\"collection-id-field\"\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              disabled={!addNew || hasSelected}\n                              aria-label=\"search-client\"\n                              color=\"secondary\"\n                              edge=\"end\"\n                              onClick={() => {\n                                refetchNewOR();\n                              }}\n                            >\n                              <RestartAltIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                      />\n                    </FormControl>\n                  )}\n                  <CustomDatePicker\n                    textField={{\n                      InputLabelProps: {\n                        style: {\n                          fontSize: \"14px\",\n                        },\n                      },\n                      InputProps: {\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      },\n                    }}\n                    inputRef={dateRef}\n                    fullWidth={false}\n                    disabled={!addNew}\n                    label=\"OR Date\"\n                    onChange={(value: any) => {\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Date\",\n                        value: value,\n                      });\n                    }}\n                    value={new Date(state.Date)}\n                    onKeyDown={(e: any) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        //saveCollectionButtonRef.current?.click();\n                        pnClientORRef.current?.focus()\n                      }\n                    }}\n\n                  />\n                  {paymentTypeLoading || isLoadingClientIdsModal ? (\n                    <LoadingButton\n                      loading={paymentTypeLoading || isLoadingClientIdsModal}\n                    />\n                  ) : (\n                    <FormControl\n                      sx={{\n                        width: \"170px\",\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      disabled={!addNew}\n                    >\n                      <InputLabel htmlFor=\"client-id\">PN/Client ID</InputLabel>\n                      <OutlinedInput\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                        inputRef={pnClientORRef}\n                        name=\"PNo\"\n                        value={state.PNo}\n                        onChange={handleInputChange}\n                        id=\"client-id\"\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            dispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"isFao\",\n                              value: false,\n                            });\n                            return openCliendIDsModal(state.PNo);\n                          }\n                        }}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              disabled={!addNew}\n                              onClick={() => {\n                                openCliendIDsModal(state.PNo);\n                                dispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field: \"isFao\",\n                                  value: false,\n                                });\n                              }}\n                              edge=\"end\"\n                              color=\"secondary\"\n                            >\n                              <PersonSearchIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                        label=\"PN/Client ID\"\n                      />\n                    </FormControl>\n                  )}\n                  <TextField\n                    required\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Clients Name\"\n                    name=\"Name\"\n                    value={state.Name}\n                    onChange={handleInputChange}\n                    disabled={!addNew}\n                    InputProps={{\n                      readOnly: true,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        return openCliendIDsModal(state.PNo);\n                      }\n                    }}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                </div>\n              </Box>\n            </form>\n          </div>\n          <div\n            style={{\n              position: \"relative\",\n              width: \"100%\",\n              overflow: \"auto\",\n              flex: 1,\n            }}\n          >\n            <div\n              style={{\n                position: \"absolute\",\n                width: \"100%\",\n                height: \"auto\",\n              }}\n            >\n              <fieldset\n                style={{\n                  boxSizing: \"border-box\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  position: \"relative\",\n                  height: \"420px\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <legend>Particulars (Debit)</legend>\n                <div style={{ display: \"flex\", marginBottom: \"10px\" }}>\n                  <FormControl\n                    sx={{\n                      width: \"150px\",\n                      marginRight: \"10px\",\n                      minWidth: 150,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-1px\" },\n                    }}\n                  >\n                    <InputLabel id=\"payment-check\">Payment Type</InputLabel>\n                    <Select\n                      inputRef={paymentTypeRef}\n                      disabled={!addNew}\n                      labelId=\"payment-check\"\n                      value={debitState.payamentType}\n                      onChange={handleDebitInputChange}\n                      autoWidth\n                      label=\"Payment Type\"\n                      size=\"small\"\n                      name=\"payamentType\"\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      <MenuItem\n                        value={\"CHK\"}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            if (debitState.payamentType === \"CHK\") {\n                              wait(150).then(() => {\n                                pdcAddbtnRef.current?.focus()\n                              })\n                            } else {\n                              wait(150).then(() => {\n                                amountRef.current?.focus()\n                              })\n                            }\n                          }\n                        }}\n                      >Check</MenuItem>\n                      <MenuItem value={\"CSH\"} onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          if (debitState.payamentType === \"CHK\") {\n                            wait(150).then(() => {\n                              pdcAddbtnRef.current?.focus()\n                            })\n                          } else {\n                            wait(150).then(() => {\n                              amountRef.current?.focus()\n                            })\n                          }\n                        }\n                      }}>Cash</MenuItem>\n                    </Select>\n                  </FormControl>\n                  {debitState.payamentType === \"CHK\" ? (\n                    <div style={{ display: \"flex\", gap: \"10px\" }}>\n                      <Button\n                        disabled={!addNew}\n                        startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                        variant=\"outlined\"\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        onClick={() => {\n                          const getLastCheck_No: any = debit[debit.length - 1];\n                          const newData = {\n                            CheckIdx: \"\",\n                            BankName: \"\",\n                            BankCode: \"\",\n                            Branch: \"\",\n                            Check_Date: new Date(),\n                            Check_No: incrementCheckNo(getLastCheck_No?.Check_No),\n                            Check_Amnt: \"\",\n                            Check_Remarks: \"\",\n                            CheckMode: \"add\",\n                          };\n                          setNewStateValue(modalDispatch, newData);\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkNoRef.current?.focus();\n                        }}\n                        ref={pdcAddbtnRef}\n                      >\n                        Add PDC Check\n                      </Button>\n                      <LoadingButton\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        loading={\n                          paymentTypeLoading || isLoadingModalSearchCheckList\n                        }\n                        disabled={!addNew}\n                        onClick={() => {\n                          mutateClientCheckedList({\n                            PNo: state.PNo,\n                            searchCheckedList: state.searchCheckedList,\n                          });\n                        }}\n                        startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                        variant=\"outlined\"\n                        color=\"success\"\n                      >\n                        Add Check From PDC Entry\n                      </LoadingButton>\n                    </div>\n                  ) : (\n                    <div\n                      style={{\n                        display: \"flex\",\n                        gap: \"10px\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      <TextField\n                        inputRef={amountRef}\n                        disabled={!addNew || debitState.cashMode === \"\"}\n                        name=\"amount\"\n                        label=\"Amount\"\n                        size=\"small\"\n                        value={debitState.amount}\n                        onChange={handleDebitInputChange}\n                        placeholder=\"0.00\"\n                        InputProps={{\n                          inputComponent: NumericFormatCustom as any,\n                          style: { height: \"27px\", fontSize: \"14px\" },\n                        }}\n                        sx={{\n                          width: \"160px\",\n                          \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                          \".MuiFormLabel-root[data-shrink=false]\": {\n                            top: \"-5px\",\n                          },\n                        }}\n                        onBlur={() => {\n                          debitDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"amount\",\n                            value: parseFloat(\n                              debitState.amount.replace(/,/g, \"\")\n                            ).toFixed(2),\n                          });\n                        }}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            cashButtonSave.current?.click();\n                          }\n                        }}\n                      />\n                      {debitState.cashMode === \"\" ? (\n                        <Button\n                          sx={{\n                            height: \"30px\",\n                            fontSize: \"11px\",\n                          }}\n                          variant=\"outlined\"\n                          onClick={() => {\n                            debitDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"cashID\",\n                              value: \"\",\n                            });\n                            debitDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"cashMode\",\n                              value: \"add\",\n                            });\n                          }}\n                        >\n                          Add Cash\n                        </Button>\n                      ) : (\n                        <LoadingButton\n                          sx={{\n                            height: \"30px\",\n                            fontSize: \"11px\",\n                          }}\n                          ref={cashButtonSave}\n                          loading={paymentTypeLoading}\n                          variant=\"outlined\"\n                          color=\"success\"\n                          disabled={!addNew}\n                          onClick={() => {\n                            if (\n                              parseFloat(debitState.amount.replace(/,/g, \"\")) <=\n                              0 ||\n                              isNaN(\n                                parseFloat(debitState.amount.replace(/,/g, \"\"))\n                              )\n                            ) {\n                              amountRef.current?.focus();\n                              return Swal.fire({\n                                position: \"center\",\n                                icon: \"warning\",\n                                title: \"Please provide amount!\",\n                                showConfirmButton: false,\n                                timer: 1500,\n                              });\n                            }\n                            let temp_id = \"\";\n                            debitState.amount = parseFloat(\n                              debitState.amount.replace(/,/g, \"\")\n                            ).toLocaleString(\"en-US\", {\n                              minimumFractionDigits: 2,\n                              maximumFractionDigits: 2,\n                            });\n                            myAxios\n                              .post(\n                                `/task/accounting/get-drcode-drtitle-from-collection`,\n                                { code: debitState.payamentType },\n                                {\n                                  headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    Authorization: `Bearer ${user?.accessToken}`,\n                                  },\n                                }\n                              )\n                              .then((res) => {\n                                const { Acct_Code, Acct_Title } =\n                                  res?.data.data[0];\n                                setDebit((d: any) => {\n                                  temp_id = generateID(\n                                    d.length > 0\n                                      ? (d[d.length - 1] as any).temp_id\n                                      : \"0\"\n                                  );\n\n                                  if (debitState.cashMode === \"edit\") {\n                                    d = d.filter(\n                                      (itms: any) =>\n                                        itms.temp_id !== debitState.cashID\n                                    );\n                                    temp_id = debitState.cashID;\n                                  }\n\n                                  const data = {\n                                    Payment: \"Cash\",\n                                    Amount: debitState.amount,\n                                    Check_No: \"\",\n                                    Check_Date: \"\",\n                                    Bank_Branch: \"\",\n                                    Acct_Code,\n                                    Acct_Title,\n                                    Deposit_Slip: \"\",\n                                    Cntr: \"\",\n                                    Remarks: \"\",\n                                    TC: debitState.payamentType,\n                                    Bank: \"\",\n                                    BankName: \"\",\n                                    Check_Remarks: \"\",\n                                    Branch: \"\",\n                                    temp_id,\n                                  };\n\n                                  d = [...d, data];\n                                  d.sort((a: any, b: any) => {\n                                    const idA = parseInt(a.temp_id, 10);\n                                    const idB = parseInt(b.temp_id, 10);\n                                    if (idA < idB) {\n                                      return -1;\n                                    }\n                                    if (idA > idB) {\n                                      return 1;\n                                    }\n                                    return 0;\n                                  });\n                                  return d;\n                                });\n                                debitDispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field: \"amount\",\n                                  value: parseFloat(\n                                    \"0\".replace(/,/g, \"\")\n                                  ).toFixed(2),\n                                });\n                                debitDispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field: \"cashID\",\n                                  value: \"\",\n                                });\n                                debitDispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field: \"cashMode\",\n                                  value: \"add\",\n                                });\n                                tableDebit.current?.resetTableSelected();\n                              });\n                          }}\n                        >\n                          Save Debit\n                        </LoadingButton>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <UpwardTable\n                  isLoading={loadingAddNew || loadingCollectionDataSearch}\n                  ref={tableDebit}\n                  rows={debit}\n                  column={debitColumn}\n                  width={width}\n                  height={height}\n                  dataReadOnly={true}\n                  onSelectionChange={(selectedRow) => {\n                    const rowSelected = selectedRow[0];\n                    if (selectedRow.length > 0) {\n                      DebitSelectedChange(rowSelected);\n                    } else {\n                      modalDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: \"\",\n                      });\n                      modalDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckMode\",\n                        value: \"\",\n                      });\n                      debitDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"cashID\",\n                        value: \"\",\n                      });\n                      debitDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"cashMode\",\n                        value: \"\",\n                      });\n                      debitDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"amount\",\n                        value: \"0.00\",\n                      });\n                    }\n                  }}\n                  onKeyDown={(row, key) => {\n                    if (key === \"Delete\" || key === \"Backspace\") {\n                      const rowSelected = row[0];\n                      Swal.fire({\n                        title: \"Are you sure?\",\n                        text: `You won't to delete this?`,\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonColor: \"#3085d6\",\n                        cancelButtonColor: \"#d33\",\n                        confirmButtonText: \"Yes, delete it!\",\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          return setDebit((d) => {\n                            d = d.filter((item: any) => {\n                              return item.temp_id !== rowSelected.temp_id;\n                            });\n                            return d;\n                          });\n                        }\n                      });\n                    }\n                  }}\n                  inputsearchselector=\".manok\"\n                />\n                <div style={{ width: \"100%\", marginTop: \"20px\" }}>\n                  <DebitFooterComponent />\n                </div>\n\n              </fieldset>\n              <br />\n              <fieldset\n                style={{\n                  boxSizing: \"border-box\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  position: \"relative\",\n                  height: \"460px\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <legend>Payment Breakdown (Credit)</legend>\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexDirection: \"column\",\n                    marginBottom: \"10px\"\n                  }}\n                >\n                  <div style={{ display: \"flex\", gap: \"10px\" }}>\n                    {paymentTypeLoading ? (\n                      <LoadingButton loading={paymentTypeLoading} />\n                    ) : (\n                      <Autocomplete\n                        freeSolo\n                        options={debitState.transaction_desc}\n                        value={creditState.transaction}\n                        onChange={(e, v: any) => {\n                          if (v) {\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"Code\",\n                              value: v.Acct_Code,\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"Title\",\n                              value: v.Acct_Title,\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"TC\",\n                              value: v.Code,\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"transaction\",\n                              value: v.label,\n                            });\n                          } else {\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"Code\",\n                              value: \"\",\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"Title\",\n                              value: \"\",\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"TC\",\n                              value: \"\",\n                            });\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"transaction\",\n                              value: \"\",\n                            });\n                          }\n                        }}\n                        onInput={(e: any) => {\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"transaction\",\n                            value: e.target.value,\n                          });\n                        }}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            // inputRef={(input) => {\n                            //   creditTransactionRef = input;\n                            // }}\n                            InputProps={{\n                              ...params.InputProps,\n                              inputRef: creditTransactionRef,\n                              style: { height: \"27px\", fontSize: \"14px\" },\n                            }}\n                            label=\"Transaction\"\n                          />\n                        )}\n                        sx={{\n                          flex: 1,\n                          \".MuiFormLabel-root\": {\n                            fontSize: \"14px\",\n                          },\n                          \".MuiInputBase-input\": {\n                            width: \"100% !important\",\n                          },\n                          \".MuiFormLabel-root[data-shrink=false]\": {\n                            top: \"-5px\",\n                          },\n                          \".MuiAutocomplete-input \": {\n                            position: \"absolute\",\n                          },\n                        }}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            wait(150).then(() => {\n                              creditAmountRef.current?.focus()\n                            })\n                          }\n                        }}\n                        size=\"small\"\n                        disabled={!addNew}\n                      />\n                    )}\n                    <TextField\n                      disabled={!addNew}\n                      name=\"amount\"\n                      label=\"Amount\"\n                      size=\"small\"\n                      value={creditState.amount}\n                      onChange={handleCreditInputChange}\n                      placeholder=\"0.00\"\n                      InputProps={{\n                        inputComponent: NumericFormatCustom as any,\n                        inputRef: creditAmountRef,\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      }}\n                      onBlur={() => {\n                        creditDispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"amount\",\n                          value: parseFloat(\n                            creditState.amount.replace(/,/g, \"\")\n                          ).toFixed(2),\n                        });\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          creditFaoRef.current?.focus()\n                        }\n                      }}\n                      sx={{\n                        width: \"160px\",\n                        \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                    />\n                    {isLoadingCreditClientIdsModal ?\n                      <LoadingButton loading={isLoadingCreditClientIdsModal} />\n                      :\n                      <FormControl\n                        sx={{\n                          width: \"150px\",\n                          \".MuiFormLabel-root\": {\n                            fontSize: \"14px\",\n                            background: \"white\",\n                            zIndex: 99,\n                            padding: \"0 3px\",\n                          },\n                          \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                        }}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        disabled={!addNew}\n                      >\n                        <InputLabel htmlFor=\"fao\">FAO</InputLabel>\n                        <OutlinedInput\n                          sx={{\n                            height: \"27px\",\n                            fontSize: \"14px\",\n                          }}\n                          inputRef={creditFaoRef}\n                          name=\"FAO_Name\"\n                          value={creditState.FAO_Name}\n                          onChange={handleCreditInputChange}\n                          id=\"fao\"\n                          onKeyDown={(e) => {\n                            if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                              dispatch({\n                                type: \"UPDATE_FIELD\",\n                                field: \"isFao\",\n                                value: true,\n                              });\n                              return openCreditCliendIDsModal(creditState.FAO_Name);\n                            }\n                          }}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                disabled={!addNew}\n                                onClick={() => {\n                                  dispatch({\n                                    type: \"UPDATE_FIELD\",\n                                    field: \"isFao\",\n                                    value: true,\n                                  });\n                                  openCreditCliendIDsModal(creditState.FAO_Name);\n                                }}\n                                edge=\"end\"\n                                color=\"secondary\"\n                              >\n                                <PersonSearchIcon />\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          label=\"FAO\"\n                        />\n                      </FormControl>}\n                    <TextField\n                      disabled={!addNew}\n                      name=\"remarks\"\n                      label=\"Remarks\"\n                      size=\"small\"\n                      value={creditState.remarks ?? \"\"}\n                      onChange={handleCreditInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          vatRef.current.focus()\n                        }\n                      }}\n                      InputProps={{\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                        inputRef: creditRemarksRef\n                      }}\n                      sx={{\n                        width: \"160px\",\n                        \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                    />\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"10px\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        columnGap: \"10px\",\n                      }}\n                    >\n                      <FormControl\n                        sx={{\n                          width: \"150px\",\n                          marginRight: \"10px\",\n                          minWidth: 150,\n                          \".MuiFormLabel-root\": {\n                            fontSize: \"14px\",\n                            background: \"white\",\n                            zIndex: 99,\n                            padding: \"0 3px\",\n                          },\n                          \".MuiFormLabel-root[data-shrink=false]\": { top: \"-1px\" },\n                        }}\n                      >\n                        <InputLabel id=\"payment-check\">VAT Type</InputLabel>\n                        <Select\n                          inputRef={vatRef}\n                          disabled={!addNew}\n                          labelId=\"payment-check\"\n                          value={creditState.option}\n                          onChange={handleCreditInputChange}\n                          autoWidth\n                          label=\"VAT Type\"\n                          size=\"small\"\n                          name=\"option\"\n                          sx={{\n                            height: \"27px\",\n                            fontSize: \"14px\",\n                          }}\n                        >\n                          <MenuItem\n                            value={\"Vat\"}\n                            onKeyDown={(e) => {\n                              if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                                wait(150).then(() => {\n                                  creditInvoiceRef.current?.focus()\n                                })\n                              }\n                            }}\n                          >VAT</MenuItem>\n                          <MenuItem value={\"Non-Vat\"} onKeyDown={(e) => {\n                            if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                              wait(150).then(() => {\n                                creditInvoiceRef.current?.focus()\n                              })\n                            }\n                          }}>Non-VAT</MenuItem>\n                        </Select>\n                      </FormControl>\n\n                      <TextField\n                        disabled={!addNew || creditState.creditMode === \"\"}\n                        name=\"invoice\"\n                        label=\"Invoice\"\n                        size=\"small\"\n                        value={creditState.invoice}\n                        onChange={handleCreditInputChange}\n                        InputProps={{\n                          inputRef: creditInvoiceRef,\n                          style: { height: \"27px\", fontSize: \"14px\" },\n                        }}\n                        sx={{\n                          width: \"300px\",\n                          \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                          \".MuiFormLabel-root[data-shrink=false]\": {\n                            top: \"-5px\",\n                          },\n                        }}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            const timeout = setTimeout(() => {\n                              creditSaveButton.current?.click();\n                              clearTimeout(timeout);\n                            }, 100);\n                          }\n                        }}\n                      />\n                      {creditState.creditMode === \"\" ? (\n                        <Button\n                          sx={{\n                            height: \"30px\",\n                            fontSize: \"11px\",\n                          }}\n                          variant=\"outlined\"\n                          onClick={() => {\n                            Object.entries(initialStateCredit).forEach(\n                              ([field, value]) => {\n                                creditDispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field,\n                                  value,\n                                });\n                              }\n                            );\n                          }}\n                        >\n                          NEW\n                        </Button>\n                      ) : (\n                        <Button\n                          disabled={!addNew || creditState.creditMode === \"\"}\n\n                          ref={creditSaveButton}\n                          sx={{\n                            height: \"30px\",\n                            fontSize: \"11px\",\n                          }}\n                          color=\"success\"\n                          variant=\"outlined\"\n                          onClick={() => {\n                            if (\n                              creditState.transaction === \"\" ||\n                              creditState.transaction === null ||\n                              creditState.transaction === undefined\n                            ) {\n                              return CustomSwalAlertWarning(\n                                \"Please select a transaction!\",\n                                () => {\n                                  wait(300).then(() => {\n                                    creditTransactionRef.current?.focus();\n                                  });\n                                }\n                              );\n                            }\n\n                            if (\n                              debitState.transaction_desc.filter(\n                                (item: any) =>\n                                  item.label === creditState.transaction\n                              ).length <= 0\n                            ) {\n                              return CustomSwalAlertWarning(\n                                \"Transaction not yet defined!\",\n                                () => {\n                                  wait(300).then(() => {\n                                    creditTransactionRef.current?.focus();\n                                  });\n                                }\n                              );\n                            }\n                            if (\n                              parseFloat(creditState.amount.replace(/,/g, \"\")) <=\n                              0 ||\n                              isNaN(\n                                parseFloat(creditState.amount.replace(/,/g, \"\"))\n                              )\n                            ) {\n                              return CustomSwalAlertWarning(\n                                \"Please provide amount!\",\n                                () => {\n                                  wait(300).then(() => {\n                                    creditAmountRef.current?.focus();\n                                  });\n                                }\n                              );\n                            }\n                            if (creditState.FAO_ID === \"\") {\n                              return CustomSwalAlertWarning(\n                                \"Please provide FAO!\",\n                                () => {\n                                  wait(300).then(() => {\n                                    creditFaoRef.current?.focus();\n                                  });\n                                }\n                              );\n                            }\n                            if (creditState.invoice === \"\") {\n                              return CustomSwalAlertWarning(\n                                \"Please provide invoice!\",\n                                () => {\n                                  wait(300).then(() => {\n                                    creditInvoiceRef.current?.focus();\n                                  });\n                                }\n                              );\n                            }\n\n                            if (creditState.invoice.length >= 200) {\n                              return CustomSwalAlertWarning(\n                                \"Invoice is too long!\",\n                                () => { }\n                              );\n                            }\n                            if (creditState.FAO_ID.length >= 200) {\n                              return CustomSwalAlertWarning(\n                                \"ID is too long!\",\n                                () => { }\n                              );\n                            }\n                            if (creditState.remarks.length >= 200) {\n                              return CustomSwalAlertWarning(\n                                \"Remarks is too long!\",\n                                () => { }\n                              );\n                            }\n                            if (creditState.amount.length >= 200) {\n                              return CustomSwalAlertWarning(\n                                \"Amount is too long!\",\n                                () => { }\n                              );\n                            }\n\n                            function onSaveTransaction() {\n                              creditState.amount = parseFloat(\n                                creditState.amount\n                              ).toLocaleString(\"en-US\", {\n                                style: \"decimal\",\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2,\n                              });\n                              const temp_id =\n                                parseInt(\n                                  credit.length <= 0\n                                    ? \"0\"\n                                    : (credit[credit.length - 1] as any).temp_id\n                                ) + 1;\n\n                              const creditData = {\n                                transaction: creditState.transaction,\n                                amount: creditState.amount,\n                                Remarks: creditState.remarks,\n                                Code: creditState.Code,\n                                Title: creditState.Title,\n                                TC: creditState.TC,\n                                Account_No: creditState.FAO_ID,\n                                Name: creditState.FAO_Name,\n                                VATType: creditState.option,\n                                invoiceNo: creditState.invoice,\n                              };\n                              setCredit((d: any) => {\n                                if (creditState.creditMode === \"add\") {\n                                  d = [...d, { temp_id, ...creditData }];\n                                  return d;\n                                } else {\n                                  const data = d.map((obj: any) => {\n                                    if (obj.temp_id === creditState.creditId) {\n                                      obj = { ...obj, ...creditData };\n                                    }\n                                    return obj;\n                                  });\n                                  return data;\n                                }\n                              });\n                              if (creditState.option === \"Vat\") {\n                                const taxableAmt =\n                                  parseFloat(\n                                    creditState.amount.replace(/,/g, \"\")\n                                  ) / 1.12;\n                                const inputTax = taxableAmt * 0.12;\n                                const newD = debitState.transaction_desc.filter(\n                                  (item: any) => item.label === \"Output Tax\"\n                                )[0];\n                                const creditDataVat = {\n                                  temp_id: temp_id + 1,\n                                  transaction: \"Output Tax\",\n                                  amount: inputTax.toFixed(2),\n                                  Remarks: creditState.remarks,\n                                  Code: newD.Acct_Code,\n                                  Title: newD.Acct_Title,\n                                  TC: newD.Code,\n                                  Account_No: creditState.FAO_ID,\n                                  Name: creditState.FAO_Name,\n                                  VATType: creditState.option,\n                                  invoiceNo: creditState.invoice,\n                                };\n                                setCredit((d: any) => {\n                                  d = [...d, creditDataVat];\n                                  return d;\n                                });\n                              }\n                              Swal.fire({\n                                text:\n                                  creditState.creditMode === \"edit\"\n                                    ? \"Update Successfully\"\n                                    : \"Create Successfully\",\n                                icon: \"success\",\n                                showCancelButton: false,\n                                timer: 1500,\n                              }).then(() => {\n                                setNewStateValue(\n                                  creditDispatch,\n                                  initialStateCredit\n                                );\n                                tableCredit.current.resetTableSelected();\n                              });\n                            }\n                            if (creditState.creditMode === \"edit\") {\n                              return Swal.fire({\n                                title: \"Are you sure?\",\n                                text: `You won't to update this?`,\n                                icon: \"warning\",\n                                showCancelButton: true,\n                                confirmButtonColor: \"#3085d6\",\n                                cancelButtonColor: \"#d33\",\n                                confirmButtonText: \"Yes, update it!\",\n                              }).then((result) => {\n                                if (result.isConfirmed) {\n                                  return onSaveTransaction();\n                                }\n                              });\n                            } else {\n                              onSaveTransaction();\n                            }\n                          }}\n                        >\n                          Save Credit\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <UpwardTable\n                  isLoading={loadingAddNew || loadingCollectionDataSearch}\n                  ref={tableCredit}\n                  rows={credit}\n                  column={creditColumn}\n                  width={width}\n                  height={height}\n                  dataReadOnly={true}\n                  onSelectionChange={(selectedRow) => {\n                    const rowSelected = selectedRow[0];\n                    if (selectedRow.length > 0) {\n                      const updateData = {\n                        creditMode: \"edit\",\n                        creditId: rowSelected.temp_id,\n                        transaction: rowSelected.transaction,\n                        amount: rowSelected.amount,\n                        remarks: rowSelected.Remarks,\n                        Code: rowSelected.Code,\n                        Title: rowSelected.Title,\n                        TC: rowSelected.TC,\n                        FAO_ID: rowSelected.Account_No,\n                        FAO_Name: rowSelected.Name,\n                        option: rowSelected.VATType,\n                        invoice: rowSelected.invoiceNo,\n                      };\n                      setNewStateValue(creditDispatch, updateData);\n                    } else {\n                      Object.entries(initialStateCredit).forEach(\n                        ([field, value]) => {\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field,\n                            value,\n                          });\n                        }\n                      );\n                    }\n                  }}\n                  onKeyDown={(row, key) => {\n                    if (key === \"Delete\" || key === \"Backspace\") {\n                      const rowSelected = row[0];\n                      Swal.fire({\n                        title: \"Are you sure?\",\n                        text: `You won't to delete this?`,\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonColor: \"#3085d6\",\n                        cancelButtonColor: \"#d33\",\n                        confirmButtonText: \"Yes, delete it!\",\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          return setCredit((d) => {\n                            d = d.filter((item: any) => {\n                              return item.temp_id !== rowSelected.temp_id;\n                            });\n                            return d;\n                          });\n                        }\n                      });\n                    }\n                  }}\n                  inputsearchselector=\".manok\"\n                />\n                <div style={{ width: \"100%\", marginTop: \"10px\" }}>\n                  <CreditFooterComponent />\n                </div>\n                {/* <div\n                style={{\n                  marginTop: \"10px\",\n                  width: \"100%\",\n                  position: \"relative\",\n                }}\n              >\n                <Box\n                  style={{\n                    height: \"410px\",\n                    width: \"100%\",\n                    overflowX: \"scroll\",\n                    position: \"absolute\",\n                  }}\n                >\n                  <Table\n                    ref={tableCredit}\n                    isLoading={loadingAddNew || loadingCollectionDataSearch}\n                    columns={creditColumn}\n                    rows={credit}\n                    table_id={\"temp_id\"}\n                    isSingleSelection={true}\n                    isRowFreeze={false}\n                    dataSelection={(selection, data, code) => {\n                      const rowSelected = data.filter(\n                        (item: any) => item.temp_id === selection[0]\n                      )[0];\n                      if (\n                        rowSelected === undefined ||\n                        rowSelected.length <= 0\n                      ) {\n                        Object.entries(initialStateCredit).forEach(\n                          ([field, value]) => {\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field,\n                              value,\n                            });\n                          }\n                        );\n                        return;\n                      }\n                      const updateData = {\n                        creditMode: \"edit\",\n                        creditId: rowSelected.temp_id,\n                        transaction: rowSelected.transaction,\n                        amount: rowSelected.amount,\n                        remarks: rowSelected.Remarks,\n                        Code: rowSelected.Code,\n                        Title: rowSelected.Title,\n                        TC: rowSelected.TC,\n                        FAO_ID: rowSelected.Account_No,\n                        FAO_Name: rowSelected.Name,\n                        option: rowSelected.VATType,\n                        invoice: rowSelected.invoiceNo,\n                      };\n                      setNewStateValue(creditDispatch, updateData);\n\n                      if (code === \"Delete\" || code === \"Backspace\") {\n                        Swal.fire({\n                          title: \"Are you sure?\",\n                          text: `You won't to delete this?`,\n                          icon: \"warning\",\n                          showCancelButton: true,\n                          confirmButtonColor: \"#3085d6\",\n                          cancelButtonColor: \"#d33\",\n                          confirmButtonText: \"Yes, delete it!\",\n                        }).then((result) => {\n                          if (result.isConfirmed) {\n                            return setCredit((d) => {\n                              d = d.filter((item: any) => {\n                                return item.temp_id !== rowSelected.temp_id;\n                              });\n                              return d;\n                            });\n                          }\n                        });\n                      }\n                    }}\n                    footerChildren={() => {\n                      return <CreditFooterComponent />;\n                    }}\n                    footerPaginationPosition={\"left-right\"}\n                    showFooterSelectedCount={false}\n                  />\n                </Box>\n              </div> */}\n              </fieldset>\n            </div>\n          </div>\n          {ModalClientIDs}\n          {ModalSearchCollection}\n          {ModalSearchBanks}\n          {ModalSearchCheckList}\n          {ModalCreditClientIDs}\n          <Modal\n            open={openPdcInputModal}\n            onClose={() => {\n              setOpenPdcInputModal(false);\n              tableDebit.current?.resetTableSelected();\n            }}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n          >\n            <Box\n              sx={{\n                position: \"absolute\" as \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n                width: 700,\n                bgcolor: \"background.paper\",\n                p: 4,\n              }}\n            >\n              <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                Check Detail\n              </Typography>\n              <div\n                style={{\n                  display: \"flex\",\n                  columnGap: \"10px\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: \"10px\",\n                  }}\n                >\n                  <TextField\n                    required\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Check No.\"\n                    name=\"Check_No\"\n                    value={modalState.Check_No}\n                    onChange={handleModalInputChange}\n                    disabled={!addNew || modalState.CheckIdx !== \"\"}\n                    onKeyDown={(e: any) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        if (checkBankRef.current) {\n                          checkBankRef.current.focus()\n                        }\n                      }\n                    }}\n                    InputProps={{\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                      inputRef: checkNoRef,\n                    }}\n                    sx={{\n                      height: \"27px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                  {isLoadingModalSearchbanks ? (\n                    <LoadingButton loading={isLoadingModalSearchbanks} />\n                  ) : (\n                    <FormControl\n                      sx={{\n                        width: \"100%\",\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                      fullWidth\n                      variant=\"outlined\"\n                      size=\"small\"\n                      disabled={!addNew}\n                    >\n                      <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                      <OutlinedInput\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                        inputRef={checkBankRef}\n                        disabled={!addNew}\n                        fullWidth\n                        label=\"Bank\"\n                        name=\"BankName\"\n                        value={modalState.BankName}\n                        onChange={handleModalInputChange}\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            return openModalSearchBanks(modalState.BankName);\n                          }\n                        }}\n                        id=\"label-input-id\"\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              disabled={!addNew}\n                              aria-label=\"search-client\"\n                              color=\"secondary\"\n                              edge=\"end\"\n                              onClick={() =>\n                                openModalSearchBanks(modalState.BankName)\n                              }\n                            >\n                              <PolicyIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                      />\n                    </FormControl>\n                  )}\n                  <TextField\n                    required\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Branch\"\n                    name=\"Branch\"\n                    value={modalState.Branch}\n                    onChange={handleModalInputChange}\n                    disabled={!addNew}\n                    onKeyDown={(e: any) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        if (checkRemakrsRef.current) {\n                          checkRemakrsRef.current.focus()\n                        }\n                      }\n                    }}\n                    InputProps={{\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                      inputRef: checkBranchRef,\n                    }}\n                    sx={{\n                      height: \"27px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                  <TextField\n                    required\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Remarks\"\n                    name=\"Check_Remarks\"\n                    value={modalState.Check_Remarks}\n                    onChange={handleModalInputChange}\n                    disabled={!addNew}\n                    rows={4}\n                    multiline\n                    onKeyDown={(e: any) => {\n                      if (e.key === \"Enter\" && e.shiftKey) {\n                        return\n                      }\n\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        e.preventDefault();\n                        if (checkDateRef.current) {\n                          checkDateRef.current.focus()\n                        }\n                      }\n                    }}\n                    InputProps={{\n                      style: { height: \"auto\", fontSize: \"14px\" },\n                      inputRef: checkRemakrsRef,\n\n                    }}\n                    sx={{\n                      flex: 1,\n                      height: \"27px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexDirection: \"column\",\n                  }}\n                >\n                  <CustomDatePicker\n                    disabled={!addNew}\n                    label=\"Check Dated\"\n                    onChange={(value: any) => {\n                      modalDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Date\",\n                        value: value,\n                      });\n                    }}\n                    onKeyDown={(e: any) => {\n\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        e.preventDefault();\n                        if (checkAmountRef.current) {\n                          checkAmountRef.current.focus()\n                        }\n                      }\n                    }}\n                    value={new Date(modalState.Check_Date)}\n                    inputRef={checkDateRef}\n                    textField={{\n                      InputLabelProps: {\n                        style: {\n                          fontSize: \"14px\",\n                        },\n                      },\n                      InputProps: {\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      },\n                    }}\n                  />\n                  <TextField\n                    required\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Amount\"\n                    name=\"Check_Amnt\"\n                    value={modalState.Check_Amnt}\n                    onChange={handleModalInputChange}\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        const timeout = setTimeout(() => {\n                          checkModalSaveButton.current?.click();\n                          clearTimeout(timeout);\n                        }, 100);\n                      }\n                    }}\n                    disabled={!addNew}\n                    placeholder=\"0.00\"\n                    InputProps={{\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                      inputComponent: NumericFormatCustom as any,\n                      inputRef: checkAmountRef,\n                    }}\n                    sx={{\n                      flex: 1,\n                      height: \"27px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                    onBlur={() => {\n                      modalDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          modalState.Check_Amnt.replace(/,/g, \"\")\n                        ).toFixed(2),\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"flex-end\",\n                  alignItems: \"flex-end\",\n                  gap: \"20px\",\n                }}\n              >\n                <Button\n                  ref={checkModalSaveButton}\n                  action={checkModalSaveActionButtonRef}\n                  color=\"success\"\n                  variant=\"contained\"\n                  autoFocus={modalState.CheckIdx !== \"\"}\n                  onClick={() => {\n                    if (modalState.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Please provide check!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkNoRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (\n                      parseFloat(modalState.Check_Amnt.replace(/,/g, \"\")) <= 0 ||\n                      isNaN(parseFloat(modalState.Check_Amnt.replace(/,/g, \"\")))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Please provide check amount!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkAmountRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Please provide bank!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBankRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Please provide branch!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBranchRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.BankName.length >= 200) {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Bank Name is too long!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBankRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.Branch.length >= 200) {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Branch is too long!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBranchRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.Check_No.length >= 200) {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Check No is too long!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBranchRef.current?.focus();\n                        }\n                      );\n                    }\n                    if (modalState.Check_Amnt.length >= 200) {\n                      setOpenPdcInputModal(false);\n                      return CustomSwalAlertWarning(\n                        \"Check Ammount is too long!\",\n                        (d) => {\n                          flushSync(() => {\n                            setOpenPdcInputModal(true);\n                          });\n                          checkBranchRef.current?.focus();\n                        }\n                      );\n                    }\n\n                    modalState.Check_Amnt = parseFloat(\n                      modalState.Check_Amnt.replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    function addPDCCheck() {\n                      let temp_id = \"\";\n                      myAxios\n                        .post(\n                          `/task/accounting/get-drcode-drtitle-from-collection`,\n                          { code: debitState.payamentType },\n                          {\n                            headers: {\n                              \"Content-Type\": \"application/json\",\n                              Authorization: `Bearer ${user?.accessToken}`,\n                            },\n                          }\n                        )\n                        .then((res) => {\n                          const { Acct_Code, Acct_Title } = res?.data.data[0];\n                          setDebit((d: any) => {\n                            temp_id = generateID(\n                              d.length > 0\n                                ? (d[d.length - 1] as any).temp_id\n                                : \"0\"\n                            );\n\n                            if (modalState.CheckMode === \"edit\") {\n                              d = d.filter(\n                                (itms: any) =>\n                                  itms.temp_id !== modalState.CheckIdx.toString()\n                              );\n                              temp_id = modalState.CheckIdx.toString();\n                            }\n\n                            const data = {\n                              Payment: \"Check\",\n                              Amount: modalState.Check_Amnt,\n                              Check_No: modalState.Check_No,\n                              Check_Date: new Date(\n                                modalState.Check_Date\n                              ).toLocaleDateString(\"en-US\", {\n                                month: \"2-digit\",\n                                day: \"2-digit\",\n                                year: \"numeric\",\n                              }),\n                              Bank_Branch: `${modalState.BankName} / ${modalState.Branch}`,\n                              Acct_Code,\n                              Acct_Title,\n                              Deposit_Slip: \"\",\n                              Cntr: \"\",\n                              Remarks: modalState.Check_Remarks,\n                              TC: debitState.payamentType,\n                              temp_id: temp_id,\n                              Bank: modalState.BankCode,\n                              BankName: modalState.BankName,\n                              Check_Remarks: modalState.Check_Remarks,\n                              Branch: modalState.Branch,\n                            };\n                            d = [...d, data];\n                            d.sort((a: any, b: any) => {\n                              const idA = parseInt(a.temp_id, 10);\n                              const idB = parseInt(b.temp_id, 10);\n                              if (idA < idB) {\n                                return -1;\n                              }\n                              if (idA > idB) {\n                                return 1;\n                              }\n                              return 0;\n                            });\n\n                            return d;\n                          });\n                        });\n                    }\n                    if (modalState.CheckMode === \"edit\") {\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      return Swal.fire({\n                        title:\n                          \"Are you sure? You want to Update this \" +\n                          modalState.Check_No +\n                          \" Check No.\",\n                        text: \"You won't be able to revert this!\",\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonColor: \"#3085d6\",\n                        cancelButtonColor: \"#d33\",\n                        confirmButtonText: \"Yes, update it!\",\n                        focusConfirm: true,\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          addPDCCheck();\n                          Swal.fire({\n                            text: \"Update Successfully\",\n                            icon: \"success\",\n                            showCancelButton: false,\n                            timer: 1500,\n                            didClose() {\n                              flushSync(() => {\n                                setOpenPdcInputModal(true);\n                              });\n                              checkModalSaveActionButtonRef.current?.focusVisible();\n                              tableDebit.current?.resetTableSelected();\n                            },\n                          });\n                        }\n                      });\n                    } else {\n                      if (\n                        debit.filter(\n                          (item: any) => item.Check_No === modalState.Check_No\n                        ).length > 0\n                      ) {\n                        flushSync(() => {\n                          setOpenPdcInputModal(false);\n                        });\n                        return Swal.fire({\n                          text: `${modalState.Check_No} is already Exist!`,\n                          icon: \"warning\",\n                          showCancelButton: false,\n                          timer: 1500,\n                        }).then(() => {\n                          setOpenPdcInputModal(false);\n                        });\n                      }\n\n                      addPDCCheck();\n                      modalDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value: incrementCheckNo(modalState.Check_No),\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                        didClose() {\n                          flushSync(() => {\n                            setOpenPdcInputModal(false);\n                          });\n                          checkModalSaveActionButtonRef.current?.focusVisible();\n                          tableDebit.current?.resetTableSelected();\n                        },\n                      });\n                      return;\n                    }\n                  }}\n                >\n                  Save\n                </Button>\n                <Button\n                  color=\"warning\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    setOpenPdcInputModal(false);\n                    tableDebit.current?.resetTableSelected();\n                  }}\n                >\n                  Cancel\n                </Button>\n                {modalState.CheckIdx !== \"\" && (\n                  <Button\n                    color=\"error\"\n                    variant=\"contained\"\n                    onClick={() => {\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      DebitDeleteRow({\n                        Check_No: modalState.Check_No,\n                        temp_id: modalState.CheckIdx,\n                      });\n                    }}\n                  >\n                    Delete\n                  </Button>\n                )}\n              </div>\n            </Box>\n          </Modal>\n        </CollectionContext.Provider>\n        {(loadingAddNew || isLoadingModalSearchCollection) && <div className=\"loading-component\"><div className=\"loader\"></div></div>}\n      </div>\n    </>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nfunction DebitFooterComponent() {\n  const { debit } = useContext(CollectionContext);\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <strong style={{ fontSize: \"14px\" }}>\n        Total:{\" \"}\n        {debit\n          .reduce(\n            (sum, obj) => sum + parseFloat(obj.Amount.replace(/,/g, \"\")),\n            0\n          )\n          .toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })}\n      </strong>\n    </Box>\n  );\n}\nfunction CreditFooterComponent() {\n  const { credit } = useContext(CollectionContext);\n  return (\n    <Box\n      sx={{\n        px: 2,\n        py: 1,\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <strong style={{ fontSize: \"14px\" }}>\n        Total:{\" \"}\n        {credit\n          .reduce(\n            (sum, obj) => sum + parseFloat(obj.amount.replace(/,/g, \"\")),\n            0\n          )\n          .toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })}\n      </strong>\n    </Box>\n  );\n}\nfunction generateID(prevID: string) {\n  const nextID = parseInt(prevID, 10) + 1;\n  return String(nextID).padStart(3, \"0\");\n}\n"],"names":["_ref","_mutationFn","link","uniqueId","queryKey","responseDataKey","columns","_ref$onSelected","onSelected","_ref$onRemoveSelected","onRemoveSelected","_ref$onSuccess","onSuccess","searchRef","onCellKeyDown","onCloseFunction","isRowSelectable","_useContext","useContext","AuthContext","myAxios","user","_useState","useState","_useState2","_slicedToArray","openSearchCollection","setOpenSearchCollection","_useState3","_useState4","rows","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variables","wrap","_context","prev","next","get","concat","queryWithVariable","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","res","response","data","isLoading","mutate","openModal","search","length","undefined","flushSync","current","value","queryExtraBySearch","then","success","alert","message","focus","closeModal","_searchRef$current","ModalComponent","_jsx","ModalWithTable","showModal","onCloseModal","_searchRef$current2","onClickCloseIcon","_searchRef$current3","searchOnChange","e","target","onSearchKeyEnter","height","onSelectionChange","rowSelectionModel","selectedIDs","Set","selectedRowData","filter","row","has","toString","id","CollectionContext","createContext","debit","credit","initialState","ORNo","PNo","IDNo","Date","Name","Remarks","creditUpdateMode","creditCheckIdx","creditCheckID","PDC_Status","Deposit_Slip","DateDeposit","OR_No","searchCheckedList","bank_transaction","isFao","mode","initialStateDeposit","cashID","cashMode","payamentType","amount","transaction_desc","debitHasSelected","initialStateCredit","creditMode","creditId","transaction","FAO_Name","FAO_ID","remarks","option","invoice","Code","Title","TC","modalInitialState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","CheckMode","reducer","state","action","type","_objectSpread","_defineProperty","field","addCollectionQueryKey","queryMutationKeyCollectionDataSearch","debitColumn","headerName","flex","width","hide","creditColumn","queryKeyPaymentType","queryKeyNewORNumber","Collections","_queryFn","_queryFn2","_mutationFn2","_mutationFn3","_creditState$remarks","setCredit","setDebit","_useState5","_useState6","openPdcInputModal","setOpenPdcInputModal","_useUrlParams","useUrlParams","searchParams","setSearchParams","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","debitState","debitDispatch","_useReducer5","_useReducer6","creditState","creditDispatch","_useReducer7","_useReducer8","modalState","modalDispatch","_useState7","_useState8","save","setSave","_useState9","_useState10","addNew","setAddNew","_useState11","_useState12","hasSelected","setHasSelected","cashButtonSave","useRef","checkModalSaveButton","checkModalSaveActionButtonRef","creditSaveButton","saveCollectionButtonRef","pdcSearchInput","collectionSearchInput","bankSearchInput","checkListSearchInput","checkNoRef","checkBankRef","checkBranchRef","checkRemakrsRef","checkAmountRef","checkDateRef","paymentTypeRef","amountRef","creditTransactionRef","creditAmountRef","creditFaoRef","creditInvoiceRef","pnClientORRef","queryClient","useQueryClient","dateRef","pdcAddbtnRef","tableDebit","tableCredit","creditRemarksRef","vatRef","_useQueryModalTable","useQueryModalTable","url","queryUrlName","_selectedRowData$0$Na","client_id","closeCliendIDsModal","wait","_paymentTypeRef$curre","ModalClientIDs","openCliendIDsModal","isLoadingClientIdsModal","_useQueryModalTable2","_selectedRowData$0$Na2","closeCreditCliendIDsModal","_creditRemarksRef$cur","ModalCreditClientIDs","openCreditCliendIDsModal","isLoadingCreditClientIdsModal","_useQueryModalTable3","mutateCollectionDataSearch","ModalSearchCollection","openModalSearchCollection","closeModalSearchCollection","isLoadingModalSearchCollection","_useQueryModalTable4","Bank","Bank_Code","closeModalSearchBanks","setTimeout","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useMutationModalTabl","useMutationModalTable","items","map","includes","post","code","_res$data","console","log","_res$data$data$","Acct_Code","Acct_Title","d","lastID","parseInt","temp_id","_toConsumableArray","Payment","Amount","Bank_Branch","Cntr","closeModalSearchCheckList","openModalSearchCheckList","params","ModalSearchCheckList","isLoadingModalSearchCheckList","mutateClientCheckedList","_useQuery","useQuery","queryFn","refetchOnWindowFocus","transactionDesc","paymentTypeLoading","_useQuery2","_callee2","_context2","_response$data","_response$data2","collectionID","NewORNoLoading","refetchNewOR","refetch","_callee3","_context3","dataCollection","collection","OR_Date","Date_OR","ClientID","ID_No","selectedSearchState","Short","isValidDate","dateString","date","isNaN","getTime","i","Debit","push","toLocaleDateString","DRCode","DRTitle","SlipCode","DRRemarks","Purpose","Credit","CRCode","CRTitle","CRLoanID","CRLoanName","CRVatType","CRInvoiceNo","CRRemarks","Account_No","VATType","CRVATType","invoiceNo","setNewStateValue","loadingCollectionDataSearch","_useMutation2","_x2","_callee4","_context4","invalidateQueries","Swal","position","icon","title","showConfirmButton","timer","loadingAddNew","_useMutation3","_x3","_callee5","_context5","data1","localStorage","removeItem","setItem","JSON","stringify","department","window","open","printOR","mutataPrint","isLoadingPrint","handleInputChange","_e$target","name","handleDebitInputChange","_e$target2","handleCreditInputChange","_e$target3","handleModalInputChange","_e$target4","CustomSwalAlertWarning","label","cb","text","showCancelButton","innerWidth","innerHeight","_jsxs","_Fragment","children","PageHelmet","style","display","flexDirection","padding","Provider","Box","sx","theme","alignItems","columnGap","breakpoints","down","marginBottom","LoadingButton","loading","TextField","size","onChange","onKeyDown","preventDefault","InputProps","fontSize","top","Button","variant","startIcon","AddIcon","onClick","set","ref","color","_paymentTypeRef$curre2","_creditTransactionRef","reduce","sum","obj","parseFloat","replace","newState","codeCondfirmationAlert","isUpdate","userCodeConfirmation","saveCondfirmationAlert","isConfirm","disabled","SaveIcon","CircularProgress","green","left","marginTop","marginLeft","CloseIcon","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","rowGap","gap","FormControl","background","zIndex","required","InputLabel","htmlFor","OutlinedInput","readOnly","_dateRef$current","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","textField","InputLabelProps","inputRef","fullWidth","_pnClientORRef$curren","PersonSearchIcon","overflow","boxSizing","border","borderRadius","marginRight","minWidth","Select","labelId","autoWidth","MenuItem","_pdcAddbtnRef$current","_amountRef$current","_pdcAddbtnRef$current2","_amountRef$current2","_checkNoRef$current","getLastCheck_No","newData","incrementCheckNo","placeholder","inputComponent","NumericFormatCustom","onBlur","toFixed","_cashButtonSave$curre","click","_amountRef$current3","toLocaleString","minimumFractionDigits","maximumFractionDigits","_tableDebit$current2","_res$data$data$2","generateID","itms","sort","a","b","idA","idB","resetTableSelected","UpwardTable","column","dataReadOnly","selectedRow","rowSelected","_checkModalSaveAction","focusVisible","DebitSelectedChange","key","item","inputsearchselector","DebitFooterComponent","Autocomplete","freeSolo","options","v","onInput","renderInput","_creditAmountRef$curr","_creditFaoRef$current","justifyContent","_creditInvoiceRef$cur","_creditInvoiceRef$cur2","timeout","_creditSaveButton$cur","clearTimeout","Object","entries","forEach","_ref3","_ref4","_creditTransactionRef2","_creditTransactionRef3","_creditAmountRef$curr2","_creditFaoRef$current2","_creditInvoiceRef$cur3","onSaveTransaction","creditData","inputTax","newD","creditDataVat","updateData","_ref5","_ref6","CreditFooterComponent","Modal","onClose","_tableDebit$current3","transform","bgcolor","p","Typography","component","PolicyIcon","multiline","shiftKey","_checkModalSaveButton","autoFocus","_checkNoRef$current2","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre","_checkBankRef$current2","_checkBranchRef$curre2","_checkBranchRef$curre3","_checkBranchRef$curre4","addPDCCheck","_res$data$data$3","month","day","year","focusConfirm","didClose","_checkModalSaveAction2","_tableDebit$current4","_checkModalSaveAction3","_tableDebit$current5","_tableDebit$current6","_tableDebit$current","className","_ref7","_ref8","px","py","prevID","nextID","String","padStart"],"sourceRoot":""}