{"version":3,"file":"static/js/8185.9d188e6c.chunk.js","mappings":"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","sources":["hooks/useUpwardTableModal.tsx","feautures/Admin/Task/Accounting/PostDateChecks.tsx"],"sourcesContent":["import { useEffect, useRef, useState, useCallback, useId } from \"react\";\nimport \"../style/upwardtablemodel.css\";\nimport { TextInput } from \"../components/UpwardFields\";\nimport { UpwardTable } from \"../components/UpwardTable\";\nimport { throttle } from \"lodash\";\nimport { AxiosInstance } from \"axios\";\nimport { User } from \"../components/AuthContext\";\nimport { useMutation } from \"react-query\";\n\ninterface UseUpwardTableModalProps {\n  myAxios: AxiosInstance;\n  user: User | null;\n  column: Array<any>;\n  link: {\n    url: string;\n    queryUrlName: string;\n  };\n  onSelectionChange: (selectedRow: any) => void;\n  onModalClose?: () => void;\n  responseDataKey: string;\n}\nexport const useUpwardTableModal = ({\n  myAxios,\n  user,\n  column,\n  link,\n  onSelectionChange,\n  responseDataKey,\n  onModalClose = () => { },\n}: UseUpwardTableModalProps) => {\n  const id = useId();\n  const inputSearchRef = useRef<HTMLInputElement>(null);\n  const tableRef = useRef<any>(null);\n  const parentRef = useRef<any>(null);\n  const [show, setShowModal] = useState(false);\n  const [rows, setRows] = useState([]);\n  const { isLoading, mutate } = useMutation({\n    mutationKey: id,\n    mutationFn: async (variable: any) =>\n      await myAxios.get(\n        `${link?.url}?${link?.queryUrlName}=${variable.search}`,\n        {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      setRows(response.data[responseDataKey]);\n    },\n  });\n  const performSearch = (query: string) => {\n    if (query === \"\") {\n      mutate({ search: query });\n    }\n  };\n  // Throttle the search function to limit it to once every 500ms\n  const throttledSearch = useCallback(\n    throttle((query) => performSearch(query), 500),\n    []\n  );\n  const openModal = (search: string) => {\n    mutate({ search: search });\n    setShowModal(true);\n    setTimeout(() => {\n      if (inputSearchRef.current) {\n        inputSearchRef.current.value = search;\n      }\n      inputSearchRef.current?.focus();\n    }, 150);\n  };\n  const closeModal = () => {\n    setShowModal(false);\n    onModalClose();\n  };\n\n  const width = 460;\n  const height = 530;\n\n  useEffect(() => {\n    if (show && parentRef.current) {\n      parentRef.current?.focus();\n    }\n  }, [show, parentRef]);\n\n  const Modal = show ? (\n    <div\n      className=\"modal-parent\"\n      ref={parentRef}\n      tabIndex={-1}\n      onKeyDown={(e) => {\n        if (e.key === \"Escape\") {\n          closeModal();\n\n        }\n      }}\n    >\n      <div className=\"modal-content\">\n        <TextInput\n          label={{ style: { display: \"none\" } }}\n          input={{\n            className: \"search-input-up-on-key-down\",\n            type: \"text\",\n            style: { width: \"100%\", marginBottom: \"20px\" },\n            onChange: (e) => {\n              e.preventDefault();\n              throttledSearch(e.currentTarget.value);\n            },\n            onKeyDown: (e) => {\n              if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\n                e.preventDefault();\n                mutate({ search: (e.target as any).value });\n              }\n              if (e.key === \"ArrowDown\") {\n                e.preventDefault();\n                const datagridview = document.querySelector(\n                  `.grid-container`\n                ) as HTMLDivElement;\n                console.log(datagridview);\n                datagridview.focus();\n              }\n            },\n          }}\n          inputRef={inputSearchRef}\n        />\n        <UpwardTable\n          ref={tableRef}\n          rows={rows}\n          column={column.filter((itm) => !itm.hide)}\n          width={width}\n          height={height}\n          dataReadOnly={true}\n          onSelectionChange={onSelectionChange}\n        />\n        <button className=\"close-modal\" onClick={closeModal}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16px\"\n            height=\"16px\"\n            viewBox=\"-0.5 0 25 25\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M3 21.32L21 3.32001\"\n              stroke=\"#000000\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M3 3.32001L21 21.32\"\n              stroke=\"#000000\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </button>\n      </div>\n    </div>\n  ) : null;\n\n  return {\n    Modal,\n    openModal,\n    closeModal,\n    isLoading,\n  };\n};\n","import React, { useContext, useState, useRef, useReducer } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Modal,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  MenuItem,\n  Menu,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { flushSync } from \"react-dom\";\nimport { LoadingButton } from \"@mui/lab\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport DriveFolderUploadIcon from \"@mui/icons-material/DriveFolderUpload\";\nimport { DisplayFile, checkFile } from \"../Claims/Claims\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { grey } from \"@mui/material/colors\";\nimport { UpwardTable } from \"../../../../components/UpwardTable\";\nimport { useUpwardTableModal } from \"../../../../hooks/useUpwardTableModal\";\n\nconst initialState = {\n  Sub_Ref_No: \"\",\n  Ref_No: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  search: \"\",\n  pdcMode: \"\",\n  checkMode: \"\",\n  sub_account: \"\",\n  Acronym: \"\",\n};\nconst modalPdcCheckInititalState = {\n  CheckIdx: \"0\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  Check_Count: \"\",\n};\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport const pdcColumn = [\n  { field: \"Check_No\", headerName: \"Check No.\", width: 150 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 150 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"BankName\", headerName: \"Bank\", width: 200 },\n  { field: \"Branch\", headerName: \"Branch\", width: 200 },\n  {\n    field: \"Check_Remarks\",\n    headerName: \"Checked Remarks\",\n    width: 350,\n  },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 150 },\n  { field: \"DateDeposit\", headerName: \"Date Deposit\", width: 150 },\n  { field: \"OR_No\", headerName: \"OR Num\", width: 150 },\n  { field: \"BankCode\", headerName: \"Bank Code\", width: 150, hide: true },\n];\nexport const pdcSearchColumn = [\n  { field: \"Date\", headerName: \"Date Received\", width: 160 },\n  { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n  {\n    field: \"Name\",\n    headerName: \"Name\",\n    flex: 1,\n  },\n];\nexport const pdcBanksColumn = [\n  { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n  { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n];\nconst queryKey = \"pdc\";\nconst quertKeyPDCSearch = \"pdc-search\";\n\nexport default function PostDateChecks() {\n  const tableRef = useRef<any>(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<Array<File>>([]);\n  const [pdcDataRows, setPdcDataRows] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [stateModalPdcCheck, dispatchModalPdcCheck] = useReducer(\n    reducer,\n    modalPdcCheckInititalState\n  );\n\n  const { myAxios, user } = useContext(AuthContext);\n  const dataGridFunctions = useRef<any>(null);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  // pdc form save button\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const savePDCButtonRef = useRef<HTMLButtonElement>(null);\n  const openIdsButtonRef = useRef<HTMLButtonElement>(null);\n  //check modal refs\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButtonActionRef = useRef<any>(null);\n  // search modal auto focus on load\n  const addRefButton = useRef<HTMLButtonElement>(null);\n  const queryClient = useQueryClient();\n  const table = useRef<any>(null);\n\n  const dateRef = useRef<HTMLButtonElement>(null);\n  const remakrsRef = useRef<HTMLButtonElement>(null);\n  const pnRef = useRef<HTMLButtonElement>(null);\n  const branchRef = useRef<HTMLButtonElement>(null);\n  const clientnameRef = useRef<HTMLButtonElement>(null);\n\n\n  const { isLoading: newRefNumberLoading, refetch: refetchNewRefNumber } =\n    useQuery({\n      queryKey: \"new-ref-number\",\n      queryFn: async () => {\n        return await myAxios.get(\"/task/accounting/pdc-new-ref-number\", {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      },\n      refetchOnWindowFocus: false,\n      onSuccess: (res) => {\n        const response = res as any;\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Sub_Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n      },\n    });\n  const { mutate, isLoading: loadingAddNew } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) => {\n      if (state.pdcMode === \"update\") {\n        delete variables.mode;\n        return await myAxios.post(\"/task/accounting/update-pdc\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-pdc\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        refetchNewRefNumber();\n        queryClient.invalidateQueries(quertKeyPDCSearch);\n        setNewStateValue(dispatch, initialState);\n        setPdcDataRows([]);\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"\",\n        });\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  //selecte search\n\n  const { mutate: mutateSelectedSearch, isLoading: isLoadingSelectedSearch } =\n    useMutation({\n      mutationKey: queryKey,\n      mutationFn: async (variables: any) =>\n        await myAxios.post(\"/task/accounting/get-search-pdc-check\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }),\n      onSuccess: async (res) => {\n        if (!res?.data.success) {\n          return alert(`Error : ${res?.data.message}`);\n        }\n        const response = res as any;\n        const Ref_No = response.data.getSearchPDCCheck[0].Ref_No;\n        if (response.data.upload[0]) {\n          const uploadFiles = JSON.parse(response.data.upload[0]?.upload);\n          const newObjContainerBasic = await formatDataToDocument(\n            uploadFiles,\n            `${process.env.REACT_APP_IMAGE_URL}pdc/${Ref_No}`\n          );\n          const fileSelected = await Promise.all(newObjContainerBasic);\n          setSelectedFiles(fileSelected);\n        }\n        async function formatDataToDocument(\n          dataDocument: Array<any>,\n          url: string\n        ) {\n          const newObjContainer: Array<any> = [];\n          for (let index = 0; index < dataDocument.length; index++) {\n            const basicItem = dataDocument[index];\n            const mainURL = `${url}/${basicItem.uniqueFilename}`;\n            const response = await fetch(mainURL);\n            const blob = await response.blob();\n            const file = new File([blob], basicItem.fileName, {\n              type: basicItem.fileType,\n            });\n            const reader = new FileReader();\n            newObjContainer.push(\n              new Promise((resolve, reject) => {\n                reader.onload = function (event) {\n                  resolve(file);\n                };\n                reader.onerror = function (event) {\n                  reject(new Error(\"Error reading file: \" + file.name));\n                };\n                reader.readAsDataURL(file);\n              })\n            );\n          }\n          return newObjContainer;\n        }\n\n        setPdcDataRows(\n          response.data.getSearchPDCCheck.map((item: any, idx: number) => {\n            return { ...item, CheckIdx: `${idx}` };\n          })\n        );\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.getSearchPDCCheck[0].Ref_No,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: response.data.getSearchPDCCheck[0].Name,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Date\",\n          value: response.data.getSearchPDCCheck[0].Date,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: response.data.getSearchPDCCheck[0].PNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: response.data.getSearchPDCCheck[0].IDNo,\n        });\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: response.data.getSearchPDCCheck[0].Acronym,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: response.data.getSearchPDCCheck[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: response.data.getSearchPDCCheck[0].Remarks,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"update\",\n        });\n      },\n    });\n  // policy ids search table modal\n  const {\n    Modal: ModalSearchPdcIDs,\n    closeModal: closeModalSearchPdcIDs,\n    openModal: openModalSearchPdcIDs,\n    isLoading: isLoadingModalSearchPdcIDs,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    column: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      { field: \"chassis\", headerName: \"Chassis No.\", width: 200, hide: true },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 350,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        width: 300,\n        hide: true,\n      },\n      {\n        field: \"client_id\",\n        headerName: \"client_id\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: selectedRow[0].IDNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: selectedRow[0].client_id,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: selectedRow[0].Name ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: selectedRow[0].remarks ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: selectedRow[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: selectedRow[0].Acronym,\n        });\n\n        closeModalSearchPdcIDs();\n        if (pdcDataRows.length <= 0) {\n          setTimeout(() => {\n            addRefButton.current?.click();\n          }, 100);\n        }\n      }\n    },\n\n    responseDataKey: \"clientsId\",\n  });\n  // bank search table modal\n  const {\n    Modal: ModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    openModal: openModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    column: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 100 },\n      { field: \"Bank\", headerName: \"Bank Name\", width: 350 },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankName\",\n          value: selectedRow[0].Bank,\n        });\n\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankCode\",\n          value: selectedRow[0].Bank_Code,\n        });\n        closeModalSearchBanks();\n        setOpenPdcInputModal(true);\n        setTimeout(() => {\n          checkBranchRef.current?.focus();\n        }, 100);\n      }\n    },\n    onModalClose: () => {\n      setTimeout(() => {\n        setOpenPdcInputModal(true);\n      }, 100);\n    },\n    responseDataKey: \"pdcBanks\",\n  });\n  // pdc search table modal\n  const {\n    Modal: UpwardPDCModal,\n    closeModal: closeUpwardPDCModal,\n    openModal: openUpwardPDCModal,\n    isLoading: isLoadingModalSearchPDC,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    column: [\n      { field: \"Date\", headerName: \"Date Received\", width: 90 },\n      { field: \"Ref_No\", headerName: \"Ref No.\", width: 80 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 320,\n      },\n    ],\n    link: {\n      url: \"/task/accounting/search-pdc\",\n      queryUrlName: \"searchPDCInput\",\n    },\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        mutateSelectedSearch({ ref_no: selectedRow[0].Ref_No });\n        closeUpwardPDCModal();\n        if (searchRef.current) {\n          searchRef.current?.focus();\n        }\n      }\n    },\n    responseDataKey: \"searchPDC\",\n  });\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  const handleModalInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchModalPdcCheck({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  async function handleOnSave(e: any) {\n    if (state.PNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide loan information!\",\n        timer: 1500,\n      }).then(() => {\n        setTimeout(() => {\n          openIdsButtonRef.current?.click();\n        }, 350);\n      });\n    }\n    if (pdcDataRows.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide entry!\",\n        timer: 1500,\n      }).then(() => {\n        setOpenPdcInputModal(true);\n      });\n    }\n    if (state.PNo.length >= 45) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Pno is too long!\",\n        timer: 1500,\n      });\n    }\n    if (state.Remarks.length >= 220) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Remarks is too long!\",\n        timer: 1500,\n      });\n    }\n    const filePromises: Array<any> = [];\n    function fileTransfer(filePromises: Array<any>) {\n      const files = selectedFiles;\n      if (files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const reader = new FileReader();\n          filePromises.push(\n            new Promise((resolve, reject) => {\n              reader.onload = function (event) {\n                resolve({\n                  datakey: \"pdc_file\",\n                  fileName: file.name,\n                  fileContent: event.target?.result,\n                  fileType: file.type,\n                  file,\n                });\n              };\n              reader.onerror = function (event) {\n                reject(new Error(\"Error reading file: \" + file.name));\n              };\n              reader.readAsDataURL(file);\n            })\n          );\n        }\n      }\n    }\n    fileTransfer(filePromises);\n    const fileToSave = await Promise.all(filePromises);\n    const stateSubmited = {\n      Ref_No: state.Ref_No,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      Remarks: state.Remarks,\n      BankCode: state.BankCode,\n      checks: JSON.stringify(pdcDataRows),\n    };\n    if (state.pdcMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...stateSubmited, userCodeConfirmation, fileToSave });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...stateSubmited, fileToSave });\n        },\n      });\n    }\n  }\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const fileList = e.dataTransfer.files;\n    const files = Array.from(fileList);\n    const newFiles = [...selectedFiles, ...files];\n    setIsDragging(false);\n    if (checkFile(newFiles)) {\n      fileInputRef.current?.click();\n      return alert(\"file is not valid Extention!\");\n    } else {\n      setSelectedFiles(newFiles);\n    }\n  };\n  const clickPDCReceipt = () => {\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(pdcDataRows));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"pdc\");\n      localStorage.setItem(\"state\", JSON.stringify(state));\n      localStorage.setItem(\n        \"column\",\n        JSON.stringify([\n          { datakey: \"Check_No\", header: \"CHECK NO\", width: \"80px\" },\n          { datakey: \"Check_Date\", header: \"DATE\", width: \"130px\" },\n          { datakey: \"BankName\", header: \"BANK\", width: \"240px\" },\n          { datakey: \"Check_Amnt\", header: \"AMOUNT\", width: \"70px\" },\n          { datakey: \"SEQ\", header: \"SEQ\", width: \"30px\" },\n        ])\n      );\n\n      localStorage.setItem(\n        \"title\",\n        user?.department === \"UMIS\"\n          ? \"UPWARD MANAGEMENT INSURANCE SERVICES\\n Post Date Checks Receipt\"\n          : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n Post Date Checks Receipt\"\n      );\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const clickPDCLabeling = () => {\n    let printString = () => {\n      return (\n        <div>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              marginTop: \"8px\",\n              marginBottom: 0,\n            }}\n          >\n            UCSMI\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.Name}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.IDNo}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: \"20px\",\n            }}\n          >\n            {state.Ref_No}\n          </p>\n        </div>\n      );\n    };\n\n    flushSync(() => {\n      const elementString = ReactDOMServer.renderToString(printString());\n      localStorage.setItem(\"printString\", elementString);\n      localStorage.removeItem(\"dataString\");\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const onSelectionChange = (selectedRow: any) => {\n    if (selectedRow.length > 0) {\n      const rowSelected = selectedRow[0];\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"update\",\n      });\n      setNewStateValue(dispatchModalPdcCheck, rowSelected);\n      flushSync(() => {\n        setOpenPdcInputModal(true);\n      });\n      checkModalSaveButtonActionRef.current?.focusVisible();\n    } else {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"\",\n      });\n    }\n  };\n  const isDisableField = state.pdcMode === \"\";\n  const width = window.innerWidth - 50;\n  const height = window.innerHeight - 145;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n        background: \"red\",\n        padding: \"10px\",\n        backgroundColor: \"#F8F8FF\",\n      }}\n    >\n      {UpwardPDCModal}\n      {ModalSearchPdcIDs}\n      {ModalSearchBanks}\n      <Box\n        sx={(theme) => ({\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"20px\",\n          [theme.breakpoints.down(\"sm\")]: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            flex: 1,\n            marginBottom: \"15px\",\n          },\n        })}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n            marginBottom: \"15px\",\n          }}\n        >\n          {isLoadingModalSearchPDC ? (\n            <LoadingButton loading={isLoadingModalSearchPDC} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              value={state.search}\n              onChange={handleInputChange}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  openUpwardPDCModal((e.target as HTMLInputElement).value);\n                }\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const datagridview = document.querySelector(\n                    `.grid-container`\n                  ) as HTMLDivElement;\n                  datagridview.focus();\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n                inputRef: searchRef,\n                className: \"manok\",\n              }}\n              sx={{\n                width: \"400px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n          {state.pdcMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              color=\"primary\"\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"pdcMode\",\n                  value: \"add\",\n                });\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            ref={savePDCButtonRef}\n            id=\"save-entry-header\"\n            color=\"success\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={handleOnSave}\n            disabled={state.pdcMode === \"\"}\n            loading={loadingAddNew}\n            startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n          >\n            Save\n          </LoadingButton>\n          {(state.pdcMode === \"add\" || state.pdcMode === \"update\") && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    initialState.Sub_Ref_No = state.Sub_Ref_No;\n                    initialState.Ref_No = state.Sub_Ref_No;\n                    setNewStateValue(dispatch, initialState);\n                    setPdcDataRows([]);\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"pdcMode\",\n                      value: \"\",\n                    });\n                  }\n                });\n              }}\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          )}\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            disabled={state.pdcMode === \"\"}\n            variant=\"contained\"\n            startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n            onClick={() => {\n              const getLastCheck_No: any = pdcDataRows[pdcDataRows.length - 1];\n              modalPdcCheckInititalState.Check_No = incrementCheckNo(\n                getLastCheck_No?.Check_No\n              );\n              setNewStateValue(\n                dispatchModalPdcCheck,\n                modalPdcCheckInititalState\n              );\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"\",\n              });\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n\n              if (state.checkMode !== \"update\") {\n                checkNoRef.current?.focus();\n              }\n            }}\n            ref={addRefButton}\n          >\n            Add Check\n          </Button>\n          <div>\n            <Button\n              disabled={state.pdcMode !== \"update\"}\n              id=\"basic-button\"\n              aria-controls={open ? \"basic-menu\" : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? \"true\" : undefined}\n              onClick={handleClick}\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n                color: \"white\",\n                backgroundColor: grey[600],\n                \"&:hover\": {\n                  backgroundColor: grey[700],\n                },\n              }}\n            >\n              Print\n            </Button>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                \"aria-labelledby\": \"basic-button\",\n              }}\n            >\n              <MenuItem onClick={clickPDCReceipt}>PDC Receipt</MenuItem>\n              <MenuItem onClick={clickPDCLabeling}>PDC Labeling</MenuItem>\n            </Menu>\n          </div>\n        </div>\n      </Box>\n      <form\n        onKeyDown={(e) => {\n          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n            e.preventDefault();\n            return;\n          }\n        }}\n        style={{\n          marginBottom: \"20px\",\n        }}\n      >\n        <Box\n          sx={(theme) => ({\n            display: \"flex\",\n            columnGap: \"15px\",\n            flexDirection: \"row\",\n            [theme.breakpoints.down(\"md\")]: {\n              flexDirection: \"column\",\n              rowGap: \"10px\",\n            },\n          })}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: \"10px\",\n              width: \"100%\",\n            }}\n          >\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                } as any\n              }\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                }}\n              >\n                {newRefNumberLoading ? (\n                  <LoadingButton loading={newRefNumberLoading} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"pdc-id-field\">\n                      Reference No.\n                    </InputLabel>\n                    <OutlinedInput\n                      readOnly={user?.department !== \"UCSMI\"}\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                        fieldset: { borderColor: \"black\" },\n                      }}\n                      disabled={isDisableField}\n                      label=\"Reference No.\"\n                      name=\"Ref_No\"\n                      value={state.Ref_No}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          dateRef.current?.focus()\n                        }\n                      }}\n                      id=\"pdc-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  fullWidth={true}\n                  disabled={isDisableField}\n                  label=\"Date Received\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  inputRef={dateRef}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                       // savePDCButtonRef.current?.click();\n                       remakrsRef.current?.focus()\n                    }\n                  }}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n              </div>\n              <TextField\n                InputLabelProps={{\n                  sx: {\n                    color: \"black\",\n                  },\n                }}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Remarks\"\n                value={state.Remarks}\n                onChange={handleInputChange}\n                disabled={isDisableField}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    pnRef.current?.focus()\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef:remakrsRef\n                }}\n                sx={{\n                  fieldset: { borderColor: \"black\" },\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </fieldset>\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  flexDirection: \"column\",\n                } as any\n              }\n            >\n              <div\n                style={{ width: \"100%\", flex: 1, display: \"flex\", gap: \"10px\" }}\n              >\n                {isLoadingModalSearchPdcIDs ? (\n                  <LoadingButton loading={isLoadingModalSearchPdcIDs} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">\n                      PN/Client ID\n                    </InputLabel>\n                    <OutlinedInput\n                    inputRef={pnRef}\n                      sx={{\n                        fieldset: { borderColor: \"black\" },\n\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          openIdsButtonRef.current?.click();\n                        }\n                      }}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            ref={openIdsButtonRef}\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => openModalSearchPdcIDs(state.PNo)}\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Acronym\"\n                  value={state.Acronym}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      clientnameRef.current?.focus();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                    inputRef:branchRef\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{ width: \"100%\", display: \"flex\", columnGap: \"10px\" }}\n              >\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                    inputRef:clientnameRef\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <Button\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={state.pdcMode === \"\"}\n                  variant=\"contained\"\n                  startIcon={<DownloadIcon sx={{ width: 15, height: 15 }} />}\n                  onClick={() => {\n                    setShowModal(true);\n                  }}\n                >\n                  Upload Check\n                </Button>\n              </div>\n            </fieldset>\n          </Box>\n        </Box>\n      </form>\n      <UpwardTable\n        isLoading={isLoadingSelectedSearch}\n        ref={tableRef}\n        rows={pdcDataRows}\n        column={pdcColumn}\n        width={width}\n        height={height}\n        dataReadOnly={true}\n        onSelectionChange={onSelectionChange}\n        onKeyDown={(row, key) => {\n          if (key === \"Delete\" || key === \"Backspace\") {\n            const rowSelected = row[0];\n            if (\n              (rowSelected.Deposit_Slip && rowSelected.Deposit_Slip !== \"\") ||\n              (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n              (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n            ) {\n              return Swal.fire({\n                position: \"center\",\n                icon: \"warning\",\n                title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n                showConfirmButton: false,\n                timer: 1500,\n              });\n            }\n            const timeout = setTimeout(() => {\n              Swal.fire({\n                title: \"Are you sure?\",\n                text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  return setPdcDataRows((dt) => {\n                    return dt.filter(\n                      (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n                    );\n                  });\n                }\n                table.current?.removeSelection();\n              });\n              clearTimeout(timeout);\n            }, 250);\n          }\n        }}\n        inputsearchselector=\".manok\"\n      />\n\n      <Modal\n        open={openPdcInputModal}\n        onClose={() => {\n          table.current?.removeSelection();\n          setOpenPdcInputModal(false);\n        }}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\" as \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"auto\",\n            bgcolor: \"background.paper\",\n            p: 4,\n          }}\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Check Detail\n          </Typography>\n          <br />\n          <div\n            style={{\n              display: \"flex\",\n              columnGap: \"10px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"10px\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Check No.\"\n                name=\"Check_No\"\n                value={stateModalPdcCheck.Check_No}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkNoRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {isLoadingModalSearchbanks ? (\n                <LoadingButton loading={isLoadingModalSearchbanks} />\n              ) : (\n                <FormControl\n                  sx={{\n                    width: \"100%\",\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                  <OutlinedInput\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                    inputRef={checkBankRef}\n                    fullWidth\n                    label=\"Bank\"\n                    name=\"BankName\"\n                    value={stateModalPdcCheck.BankName}\n                    onChange={handleModalInputChange}\n                    id=\"label-input-id\"\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        setOpenPdcInputModal(false);\n\n                        return openModalSearchBanks(\n                          stateModalPdcCheck.BankName\n                        );\n                      }\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"search-client\"\n                          color=\"secondary\"\n                          edge=\"end\"\n                          onClick={() => {\n                            setOpenPdcInputModal(false);\n\n                            openModalSearchBanks(stateModalPdcCheck.BankName);\n                          }}\n                        >\n                          <PolicyIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"Branch\"\n                value={stateModalPdcCheck.Branch}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkBranchRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Check_Remarks\"\n                value={stateModalPdcCheck.Check_Remarks}\n                onChange={handleModalInputChange}\n                rows={4}\n                multiline\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"auto\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"auto\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                flexDirection: \"column\",\n              }}\n            >\n              <CustomDatePicker\n                label=\"Check Dated\"\n                onChange={(value: any) => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateModalPdcCheck.Check_Date)}\n                inputRef={checkDateRef}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"Check_Amnt\"\n                value={stateModalPdcCheck.Check_Amnt}\n                onChange={handleModalInputChange}\n                placeholder=\"0.00\"\n                onBlur={() => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Amnt\",\n                    value: parseFloat(\n                      stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  inputRef: checkAmountRef,\n                }}\n                sx={{\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {state.checkMode !== \"update\" && (\n                <TextField\n                  type=\"number\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check Count\"\n                  name=\"Check_Count\"\n                  value={stateModalPdcCheck.Check_Count}\n                  onChange={handleModalInputChange}\n                  placeholder=\"0\"\n                  onKeyDown={(e: any) => {\n                    const validCode = [\"Enter\", \"NumpadEnter\"];\n                    if (validCode.includes(e.code)) {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputProps: {\n                      min: 1,\n                      type: \"text\",\n                      pattern: \"[0-9]*\",\n                    },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              width: \"100%\",\n              marginTop: \"10px\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveButtonActionRef}\n                color=\"primary\"\n                variant=\"contained\"\n                autoFocus={state.checkMode !== \"\"}\n                onClick={() => {\n                  if (state.checkMode === \"update\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Update Check ${stateModalPdcCheck.Check_No}`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n                      modalCheckAddUpdate();\n                    });\n                  }\n                  modalCheckAddUpdate();\n\n                  function modalCheckAddUpdate() {\n                    if (\n                      state.checkMode !== \"update\" &&\n                      pdcDataRows\n                        .map((item: any) => item.Check_No)\n                        .includes(stateModalPdcCheck.Check_No)\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Check is already exist!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n                    if (\n                      parseInt(stateModalPdcCheck.Check_Amnt) <= 0 ||\n                      isNaN(parseInt(stateModalPdcCheck.Check_Amnt))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check amount!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide bank!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide branch!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_No.length >= 40) {\n                      return Swal.fire({\n                        text: \"Check No is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_Amnt.length >= 200) {\n                      return Swal.fire({\n                        text: \"Check Amount is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch.length >= 45) {\n                      return Swal.fire({\n                        text: \"Branch is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_Remarks.length >= 220) {\n                      return Swal.fire({\n                        text: \"Remarks is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    stateModalPdcCheck.Check_Amnt = parseFloat(\n                      stateModalPdcCheck.Check_Amnt.toString().replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      style: \"decimal\",\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    stateModalPdcCheck.Check_Date = new Date(\n                      stateModalPdcCheck.Check_Date\n                    ).toLocaleDateString(\"en-US\", {\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                      year: \"numeric\",\n                    });\n                    const checkContainer: any = [];\n                    if (\n                      !isNaN(parseInt(stateModalPdcCheck.Check_Count)) &&\n                      parseInt(stateModalPdcCheck.Check_Count) > 0 &&\n                      state.checkMode !== \"update\"\n                    ) {\n                      for (\n                        let i = 0;\n                        i < parseInt(stateModalPdcCheck.Check_Count);\n                        i++\n                      ) {\n                        let CheckIdx = (\n                          pdcDataRows.length > 0\n                            ? parseInt(\n                              (pdcDataRows[pdcDataRows.length - 1] as any)\n                                .CheckIdx\n                            ) +\n                            (i + 1)\n                            : i\n                        ).toString();\n\n                        const currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + i);\n                        const data: any = {\n                          CheckIdx,\n                          Check_No: incrementStringNumbers(\n                            stateModalPdcCheck.Check_No,\n                            i\n                          ),\n                          Check_Date: currentDate.toLocaleDateString(\"en-US\", {\n                            month: \"2-digit\",\n                            day: \"2-digit\",\n                            year: \"numeric\",\n                          }),\n                          Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                          BankName: stateModalPdcCheck.BankName,\n                          BankCode: stateModalPdcCheck.BankCode,\n                          Branch: stateModalPdcCheck.Branch,\n                          Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                          Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                          DateDeposit: stateModalPdcCheck.DateDeposit,\n                          OR_No: stateModalPdcCheck.OR_No,\n                        };\n\n                        if (\n                          state.checkMode !== \"update\" &&\n                          pdcDataRows\n                            .map((item: any) => item.Check_No)\n                            .includes(data.Check_No)\n                        ) {\n                          setOpenPdcInputModal(false);\n                          return Swal.fire({\n                            text: \"Check is already exist!\",\n                            icon: \"warning\",\n                            showCancelButton: false,\n                            timer: 1500,\n                          }).then(() => {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkNoRef.current?.focus();\n                          });\n                        }\n\n                        checkContainer.push(data);\n                      }\n                      setPdcDataRows((d: any) => {\n                        d = [...d, ...checkContainer];\n                        return d;\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      });\n\n                      return;\n                    }\n\n                    function incrementStringNumbers(\n                      str: string,\n                      increment: number\n                    ) {\n                      let num = parseInt(str);\n                      num = num + increment;\n                      return num.toString().padStart(str.length, \"0\");\n                    }\n\n                    setPdcDataRows((dt: any) => {\n                      let CheckIdx = \"\";\n                      if (dt.length <= 0) {\n                        CheckIdx = \"0\";\n                      } else if (state.checkMode === \"update\") {\n                        CheckIdx = stateModalPdcCheck.CheckIdx;\n                      } else {\n                        CheckIdx = (\n                          parseInt(dt[dt.length - 1].CheckIdx) + 1\n                        ).toString();\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: CheckIdx,\n                      });\n\n                      const data: any = {\n                        Check_No: stateModalPdcCheck.Check_No,\n                        Check_Date: stateModalPdcCheck.Check_Date,\n                        Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                        BankName: stateModalPdcCheck.BankName,\n                        BankCode: stateModalPdcCheck.BankCode,\n                        Branch: stateModalPdcCheck.Branch,\n                        Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                        Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                        DateDeposit: stateModalPdcCheck.DateDeposit,\n                        OR_No: stateModalPdcCheck.OR_No,\n                      };\n                      if (state.checkMode === \"update\") {\n                        dt = dt.map((items: any) => {\n                          if (items.CheckIdx === CheckIdx) {\n                            items = { ...items, ...data };\n                          }\n                          return items;\n                        });\n                      } else {\n                        dt = [...dt, { CheckIdx, ...data }];\n                      }\n                      return dt;\n                    });\n\n                    setOpenPdcInputModal(false);\n\n                    Swal.fire({\n                      text:\n                        state.checkMode === \"update\"\n                          ? \"Check Update Successfully\"\n                          : \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                    }).then(() => {\n                      if (state.checkMode !== \"update\") {\n                        var currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + 1);\n\n                        dispatchModalPdcCheck({\n                          type: \"UPDATE_FIELD\",\n                          field: \"Check_Date\",\n                          value: currentDate,\n                        });\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                        ),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value:\n                          state.checkMode === \"update\"\n                            ? stateModalPdcCheck.Check_No\n                            : incrementCheckNo(stateModalPdcCheck.Check_No),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(true);\n                      });\n                      checkModalSaveButtonActionRef.current.focusVisible();\n                    });\n                  }\n                }}\n              >\n                {state.checkMode === \"update\" ? \"Update\" : \"Save\"}\n              </Button>\n              {state.checkMode === \"update\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Delete Check ${stateModalPdcCheck.Check_No} `,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n\n                      setPdcDataRows((dt) => {\n                        dt = dt.filter(\n                          (items: any) =>\n                            items.CheckIdx !== stateModalPdcCheck.CheckIdx\n                        );\n                        return dt;\n                      });\n                      dataGridFunctions.current?.removeSelection();\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  setNewStateValue(\n                    dispatchModalPdcCheck,\n                    modalPdcCheckInititalState\n                  );\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n              <IconButton\n                style={{\n                  position: \"absolute\",\n                  top: \"10px\",\n                  right: \"10px\",\n                }}\n                aria-label=\"search-client\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <div\n        style={{\n          display: showModal ? \"flex\" : \"none\",\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(158, 155, 157, 0.31)\",\n          zIndex: \"999\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: \"90%\",\n            height: \"90%\",\n          }}\n        >\n          <div\n            style={{\n              width: \"90%\",\n              height: \"90%\",\n              overflow: \"auto\",\n              background: \"white\",\n              padding: \"20px\",\n              margin: \"auto\",\n              zIndex: \"9929\",\n              boxShadow: \" -1px 1px 13px 6px rgba(0,0,0,0.54)\",\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                position: \"relative\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <IconButton\n                sx={{\n                  position: \"absolute\",\n                  right: \"5px\",\n                  top: \"5px\",\n                }}\n                onClick={() => {\n                  setShowModal(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"500px\",\n                  border: isDragging ? \"5px dashed green\" : \"5px dashed grey\",\n                  overflow: \"auto\",\n                  padding: \"10px\",\n                }}\n                onDragEnter={handleDragEnter}\n                onDragOver={(e) => e.preventDefault()}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div\n                  id=\"upload-container\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexWrap: \"wrap\",\n                  }}\n                  onDragEnter={handleDragEnter}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                >\n                  {selectedFiles.map((itm, idx) => {\n                    return (\n                      <DisplayFile\n                        key={idx}\n                        itm={itm}\n                        selectedFiles={selectedFiles}\n                        setSelectedFiles={setSelectedFiles}\n                        fileInput={fileInputRef}\n                      />\n                    );\n                  })}\n                </div>\n                {selectedFiles.length <= 0 && (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"50%\",\n                      left: \"50%\",\n                      transform: \"translate(-50%,-50%)\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <DriveFolderUploadIcon\n                      sx={{ fontSize: \"20em\", color: \"#64748b\" }}\n                    />\n                  </div>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  style={{ display: \"none\", background: \"white\" }}\n                  id=\"input-file\"\n                  onChange={(e) => {\n                    const fileList = e.target.files as FileList;\n                    const files = Array.from(fileList);\n                    const newFiles = [...selectedFiles, ...files];\n                    if (checkFile(newFiles)) {\n                      return alert(\"file is not valid Extention!\");\n                    }\n                    setSelectedFiles(newFiles);\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                }}\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    const inputFile = document.getElementById(\"input-file\");\n                    inputFile?.click();\n                  }}\n                >\n                  CLick it to upload\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {(loadingAddNew ||\n        isLoadingSelectedSearch) && <div className=\"loading-component\"><div className=\"loader\"></div></div>}\n\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nexport function incrementCheckNo(Check_No: string) {\n  if (Check_No === undefined || Check_No === null || Check_No === \"\") {\n    return \"001\";\n  }\n\n  let incrementedNumber = (parseInt(Check_No) + 1).toString();\n  while (incrementedNumber.length < Check_No.length) {\n    incrementedNumber = \"0\" + incrementedNumber;\n  }\n  return incrementedNumber;\n}\n"],"names":["useUpwardTableModal","_ref","_mutationFn","myAxios","user","column","link","onSelectionChange","responseDataKey","_ref$onModalClose","onModalClose","id","useId","inputSearchRef","useRef","tableRef","parentRef","_useState","useState","_useState2","_slicedToArray","show","setShowModal","_useState3","_useState4","rows","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variable","wrap","_context","prev","next","get","concat","url","queryUrlName","search","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","res","data","isLoading","mutate","throttledSearch","useCallback","throttle","query","performSearch","closeModal","useEffect","_parentRef$current","current","focus","Modal","_jsx","className","ref","tabIndex","onKeyDown","e","key","children","_jsxs","TextInput","label","style","display","input","type","width","marginBottom","onChange","preventDefault","currentTarget","value","target","datagridview","document","querySelector","console","log","inputRef","UpwardTable","filter","itm","hide","height","dataReadOnly","onClick","xmlns","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","openModal","setTimeout","_inputSearchRef$curre","initialState","Sub_Ref_No","Ref_No","PNo","IDNo","Date","Name","Remarks","PDC_Status","Deposit_Slip","DateDeposit","OR_No","pdcMode","checkMode","sub_account","Acronym","modalPdcCheckInititalState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","Check_Count","reducer","state","action","_objectSpread","_defineProperty","field","pdcColumn","headerName","pdcSearchColumn","flex","pdcBanksColumn","queryKey","quertKeyPDCSearch","PostDateChecks","_queryFn","_mutationFn2","_onSuccess","_handleOnSave","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","open","Boolean","isDragging","setIsDragging","selectedFiles","setSelectedFiles","_useState5","_useState6","pdcDataRows","setPdcDataRows","_useState7","_useState8","openPdcInputModal","setOpenPdcInputModal","_useState9","_useState10","showModal","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","stateModalPdcCheck","dispatchModalPdcCheck","_useContext","useContext","AuthContext","dataGridFunctions","searchRef","fileInputRef","savePDCButtonRef","openIdsButtonRef","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","checkModalSaveButton","checkModalSaveButtonActionRef","addRefButton","queryClient","useQueryClient","table","dateRef","remakrsRef","pnRef","branchRef","clientnameRef","_useQuery","useQuery","queryFn","refetchOnWindowFocus","response","RefNo","pdcID","newRefNumberLoading","refetchNewRefNumber","refetch","_callee2","variables","_context2","mode","post","success","invalidateQueries","setNewStateValue","Swal","position","icon","title","message","showConfirmButton","timer","loadingAddNew","_useMutation2","_x2","_callee3","_context3","_x3","_callee5","_formatDataToDocument","_response$data$upload","uploadFiles","newObjContainerBasic","fileSelected","formatDataToDocument","_context6","_x4","_x5","_callee4","dataDocument","newObjContainer","_loop","index","_context5","basicItem","mainURL","blob","file","reader","_context4","uniqueFilename","fetch","File","fileName","fileType","FileReader","push","Promise","resolve","reject","onload","event","onerror","Error","name","readAsDataURL","length","delegateYield","alert","getSearchPDCCheck","upload","JSON","parse","process","all","map","item","idx","mutateSelectedSearch","isLoadingSelectedSearch","_useUpwardTableModal","selectedRow","_selectedRow$0$Name","_selectedRow$0$remark","client_id","remarks","closeModalSearchPdcIDs","_addRefButton$current","click","ModalSearchPdcIDs","openModalSearchPdcIDs","isLoadingModalSearchPdcIDs","_useUpwardTableModal2","Bank","Bank_Code","closeModalSearchBanks","_checkBranchRef$curre","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useUpwardTableModal3","_searchRef$current","ref_no","closeUpwardPDCModal","UpwardPDCModal","openUpwardPDCModal","isLoadingModalSearchPDC","handleInputChange","_e$target","handleModalInputChange","_e$target2","handleDragLeave","handleDragEnter","handleDrop","_fileInputRef$current","fileList","dataTransfer","files","Array","from","newFiles","_toConsumableArray","checkFile","isDisableField","window","innerWidth","innerHeight","background","padding","backgroundColor","Box","sx","theme","alignItems","columnGap","breakpoints","down","flexDirection","LoadingButton","loading","TextField","size","code","InputProps","fontSize","top","Button","variant","startIcon","AddIcon","color","_x6","_callee6","filePromises","fileTransfer","fileToSave","stateSubmited","_context7","_loop2","i","_event$target","datakey","fileContent","result","then","_openIdsButtonRef$cur","checks","stringify","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","saveCondfirmationAlert","isConfirm","disabled","SaveIcon","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","_checkNoRef$current","getLastCheck_No","incrementCheckNo","flushSync","undefined","grey","Menu","onClose","MenuListProps","MenuItem","localStorage","removeItem","setItem","header","department","elementString","ReactDOMServer","textAlign","marginTop","margin","rowGap","gap","border","borderRadius","FormControl","fullWidth","zIndex","InputLabel","htmlFor","OutlinedInput","readOnly","fieldset","borderColor","_dateRef$current","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","_remakrsRef$current","textField","InputLabelProps","_pnRef$current","_openIdsButtonRef$cur2","PersonSearchIcon","_clientnameRef$curren","_savePDCButtonRef$cur","DownloadIcon","_checkModalSaveButton","rowSelected","focusVisible","row","timeout","_table$current","dt","removeSelection","clearTimeout","inputsearchselector","_table$current2","left","transform","bgcolor","p","Typography","component","_checkModalSaveButton2","PolicyIcon","_checkModalSaveButton3","multiline","_checkModalSaveButton4","_checkModalSaveButton5","placeholder","onBlur","parseFloat","replace","toFixed","_checkModalSaveButton6","inputComponent","NumericFormatCustom","includes","_checkModalSaveButton7","inputProps","min","pattern","justifyContent","autoFocus","_table$current3","modalCheckAddUpdate","_checkNoRef$current2","_checkNoRef$current3","parseInt","isNaN","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre2","toString","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","month","day","year","checkContainer","currentDate","setMonth","getMonth","incrementStringNumbers","_checkNoRef$current4","str","increment","num","padStart","items","_dataGridFunctions$cu","_table$current4","_table$current5","right","_table$current6","bottom","overflow","boxShadow","onDragEnter","onDragOver","onDragLeave","onDrop","flexWrap","DisplayFile","fileInput","DriveFolderUploadIcon","multiple","inputFile","getElementById","obj","Object","entries","forEach","_ref3","_ref4","incrementedNumber"],"sourceRoot":""}