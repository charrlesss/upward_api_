{"version":3,"file":"static/js/3010.17260635.chunk.js","mappings":"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","sources":["feautures/Admin/Task/Accounting/ChekPostponementRequest.tsx","../node_modules/@mui/icons-material/Close.js","../node_modules/@mui/icons-material/Search.js"],"sourcesContent":["\r\nimport { useContext, useRef } from \"react\";\r\nimport { SelectInput, TextAreaInput, TextFormatedInput, TextInput } from \"../../../../components/UpwardFields\";\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport { DataGridViewReact } from \"../../../../components/DataGridViewReact\";\r\nimport { orange } from \"@mui/material/colors\";\r\nimport { useMutation, useQuery } from \"react-query\";\r\nimport { AuthContext } from \"../../../../components/AuthContext\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { wait } from \"@testing-library/user-event/dist/utils\";\r\n\r\nconst columns = [\r\n    { key: \"Check_No\", label: \"Check No\", width: 170 },\r\n    { key: \"Check_Date\", label: \"Check Date\", width: 170 },\r\n    { key: \"Bank_Branch\", label: \"Bank/Branch\", width: 300 },\r\n    { key: \"Acct_Code\", label: \"DR Code\", width: 170 },\r\n    { key: \"Acct_Title\", label: \"DR Title\", width: 300 },\r\n    { key: \"Deposit_Slip\", label: \"Deposit Slip\", width: 170 },\r\n]\r\nexport default function ChekPostponementRequest() {\r\n    const { myAxios, user } = useContext(AuthContext)\r\n    const table = useRef<any>(null)\r\n\r\n    // first field\r\n    const RPCDNoRef = useRef<HTMLInputElement>(null)\r\n    const BranchRef = useRef<HTMLInputElement>(null)\r\n    const PNNoRef = useRef<HTMLSelectElement>(null)\r\n    const _PNNoRef = useRef<any>(null)\r\n    const NameRef = useRef<HTMLSelectElement>(null)\r\n    const _NameRef = useRef<any>(null)\r\n\r\n    // second field\r\n    const CheckNoRef = useRef<HTMLSelectElement>(null)\r\n    const NewDateRef = useRef<HTMLInputElement>(null)\r\n    const DateRef = useRef<HTMLInputElement>(null)\r\n    const ReasonRef = useRef<HTMLTextAreaElement>(null)\r\n    const BankRef = useRef<HTMLInputElement>(null)\r\n    const AmpountRef = useRef<HTMLInputElement>(null)\r\n\r\n    // third field\r\n    const HoldingFeesRef = useRef<HTMLInputElement>(null)\r\n    const PenaltyChargeRef = useRef<HTMLInputElement>(null)\r\n    const SurplusRef = useRef<HTMLInputElement>(null)\r\n    const DeductedToRef = useRef<HTMLSelectElement>(null)\r\n    const TotalRef = useRef<HTMLInputElement>(null)\r\n    const HowToBePaidRef = useRef<HTMLSelectElement>(null)\r\n    const RemarksRef = useRef<HTMLTextAreaElement>(null)\r\n\r\n    // load pnno / name\r\n    const {\r\n        isLoading: isLoadingLoadPnnoData,\r\n    } = useQuery({\r\n        queryKey: 'load-pnno',\r\n        queryFn: async () =>\r\n            await myAxios.get(`/task/accounting/check-postponement/request/load-pnno`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${user?.accessToken}`,\r\n                },\r\n            }),\r\n        onSuccess(response) {\r\n            if (!response.data.success) {\r\n                return alert(response.data.message)\r\n            }\r\n            const dt = response?.data.data\r\n            if (dt.length > 0) {\r\n                wait(100).then(() => {\r\n                    _PNNoRef.current.setDataSource(dt)\r\n                    _NameRef.current.setDataSource(dt)\r\n                })\r\n            }\r\n        },\r\n    });\r\n    // load auto id\r\n    const {\r\n        isLoading: isLoadingLoadAutoIdData,\r\n        refetch: loadARefetch\r\n    } = useQuery({\r\n        queryKey: 'auto-id',\r\n        queryFn: async () =>\r\n            await myAxios.get(`/task/accounting/check-postponement/request/auto-id`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${user?.accessToken}`,\r\n                },\r\n            }),\r\n        onSuccess(response) {\r\n            if (!response.data.success) {\r\n                return alert(response.data.message)\r\n            }\r\n\r\n            const dt = response?.data.data\r\n            if (dt.length > 0) {\r\n                wait(100).then(() => {\r\n                    if (RPCDNoRef.current) {\r\n                        RPCDNoRef.current.value = `HORPCD${dt[0].Year}${dt[0].Count}`\r\n                    }\r\n                })\r\n            }\r\n        },\r\n    });\r\n    //fst_fill\r\n    const {\r\n        isLoading: isLoadingFstFill,\r\n        mutate: mutateFstFill\r\n    } = useMutation({\r\n        mutationKey: 'fst-fill',\r\n        mutationFn: async (variable: any) =>\r\n            await myAxios.post(`/task/accounting/check-postponement/request/load-checks`, variable, {\r\n                headers: {\r\n                    Authorization: `Bearer ${user?.accessToken}`,\r\n                },\r\n            }),\r\n        onSuccess(response) {\r\n            if (!response.data.success) {\r\n                return alert(response.data.message)\r\n            }\r\n\r\n\r\n\r\n        },\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            padding: \"10px\",\r\n            background: \"#F1F1F1\",\r\n            height: \"100%\"\r\n        }}>\r\n            {/* ===========  first field  =========== */}\r\n            <div\r\n                style={{\r\n                    position: \"relative\",\r\n                    padding: \"12px\",\r\n                    borderLeft: \"1px solid #d1d5db\",\r\n                    borderRight: \"1px solid #d1d5db\",\r\n                    borderTop: \"1px solid #d1d5db\",\r\n                }}>\r\n                <span\r\n                    style={{\r\n                        fontSize: \"12px\",\r\n                        position: \"absolute\",\r\n                        top: \"-10px\",\r\n                        left: \"20px\",\r\n                        background: \"#F1F1F1\",\r\n                        padding: \"0 5px\"\r\n                    }}\r\n                >Account Informations</span>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\"\r\n                    }}\r\n                >\r\n                    {isLoadingLoadAutoIdData ? <LoadingButton loading={isLoadingLoadAutoIdData} /> : <TextInput\r\n                        containerStyle={{\r\n                            width: \"50%\",\r\n                            marginBottom: \"8px\"\r\n                        }}\r\n                        label={{\r\n                            title: \"RPCD no. :\",\r\n                            style: {\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                                width: \"80px\",\r\n                            },\r\n                        }}\r\n                        input={{\r\n                            disabled: true,\r\n                            type: \"text\",\r\n                            style: { width: \"calc(100% - 80px) \" },\r\n                            onKeyDown: (e) => {\r\n                                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                }\r\n                            },\r\n                        }}\r\n                        inputRef={RPCDNoRef}\r\n                    />}\r\n\r\n                    <TextInput\r\n                        containerStyle={{\r\n                            width: \"50%\",\r\n                            marginBottom: \"8px\"\r\n                        }}\r\n                        label={{\r\n                            title: \"Branch :\",\r\n                            style: {\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                                width: \"110px\",\r\n                            },\r\n                        }}\r\n                        input={{\r\n                            disabled: true,\r\n                            type: \"text\",\r\n                            style: { width: \"calc(100% - 100px)\" },\r\n                            onKeyDown: (e) => {\r\n                                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                }\r\n                            },\r\n                        }}\r\n                        inputRef={BranchRef}\r\n                    />\r\n\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\"\r\n                    }}\r\n                >\r\n                    {isLoadingLoadPnnoData ? <LoadingButton loading={isLoadingLoadPnnoData} /> :\r\n                        <SelectInput\r\n                            ref={_PNNoRef}\r\n                            label={{\r\n                                title: \"PN NO: :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"80px\",\r\n                                },\r\n                            }}\r\n                            selectRef={PNNoRef}\r\n                            select={{\r\n                                style: { flex: 1, height: \"22px\" },\r\n                                defaultValue: \"Non-VAT\",\r\n                                onChange: (e) => {\r\n                                    mutateFstFill({\r\n                                        CMB: \"PNNO\",\r\n                                        PNNo: e.target.value,\r\n                                        PNNname: \"\",\r\n                                    })\r\n\r\n                                    const data = _PNNoRef.current.getDataSource()\r\n                                    const res = data.filter((itm: any) => itm.PNo === e.target.value)\r\n                                    mutateFstFill({\r\n                                        PNNo: res[0].PNo,\r\n                                    })\r\n\r\n                                    if (PNNoRef.current) {\r\n                                        PNNoRef.current.value = res[0].PNo\r\n                                    }\r\n                                    if (BranchRef.current) {\r\n                                        BranchRef.current.value = res[0].BName\r\n                                    }\r\n                                    if (NameRef.current) {\r\n                                        NameRef.current.value = res[0].Name\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"50%\",\r\n                                marginBottom: \"12px\"\r\n                            }}\r\n                            datasource={[]}\r\n                            values={\"PNo\"}\r\n                            display={\"PNo\"}\r\n                        />}\r\n                    {isLoadingLoadPnnoData ?\r\n                        <LoadingButton loading={isLoadingLoadPnnoData} /> :\r\n                        <SelectInput\r\n                            ref={_NameRef}\r\n                            label={{\r\n                                title: \"Account Name :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"110px\",\r\n                                },\r\n                            }}\r\n                            selectRef={NameRef}\r\n                            select={{\r\n                                style: { flex: 1, height: \"22px\" },\r\n                                defaultValue: \"Non-VAT\",\r\n                                onChange: (e) => {\r\n\r\n                                    const data = _NameRef.current.getDataSource()\r\n                                    const res = data.filter((itm: any) => itm.Name === e.target.value)\r\n\r\n                                    mutateFstFill({\r\n                                        PNNo: res[0].PNo,\r\n                                    })\r\n                                    if (PNNoRef.current) {\r\n                                        PNNoRef.current.value = res[0].PNo\r\n                                    }\r\n                                    if (BranchRef.current) {\r\n                                        BranchRef.current.value = res[0].BName\r\n                                    }\r\n                                    if (NameRef.current) {\r\n                                        NameRef.current.value = res[0].Name\r\n                                    }\r\n                                }\r\n\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"50%\",\r\n                                marginBottom: \"12px\"\r\n                            }}\r\n                            datasource={[]}\r\n                            values={\"Name\"}\r\n                            display={\"Name\"}\r\n                        />}\r\n                </div>\r\n            </div>\r\n            {/* ===========  second field  =========== */}\r\n            <div\r\n                style={{\r\n                    position: \"relative\",\r\n                    padding: \"12px\",\r\n                    border: \"1px solid #d1d5db\",\r\n                }}>\r\n                <span\r\n                    style={{\r\n                        fontSize: \"12px\",\r\n                        position: \"absolute\",\r\n                        top: \"-10px\",\r\n                        left: \"20px\",\r\n                        background: \"#F1F1F1\",\r\n                        padding: \"0 5px\"\r\n                    }}\r\n                >Check Details :</span>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\"\r\n                    }}\r\n                >\r\n                    <SelectInput\r\n                        label={{\r\n                            title: \"Check No. :\",\r\n                            style: {\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                                width: \"80px\",\r\n                            },\r\n                        }}\r\n                        selectRef={CheckNoRef}\r\n                        select={{\r\n                            style: { flex: 1, height: \"22px\" },\r\n                            defaultValue: \"Non-VAT\",\r\n                            onChange: (e) => {\r\n\r\n                            }\r\n\r\n                        }}\r\n                        containerStyle={{\r\n                            width: \"50%\",\r\n                            marginBottom: \"12px\"\r\n                        }}\r\n                        datasource={[\r\n                            { key: \"\", value: \"\" },\r\n                            { key: \"Fully Paid\", value: \"Fully Paid\" },\r\n                            { key: \"Cash Replacement\", value: \"Cash Replacement\" },\r\n                            { key: \"Check Replacement\", value: \"Check Replacement\" },\r\n                            { key: \"Account Closed\", value: \"Account Closed\" },\r\n                            { key: \"Hold\", value: \"Hold\" },\r\n                            { key: \"Not Renewed by Camfin\", value: \"Not Renewed by Camfin\" },\r\n                        ]}\r\n                        values={\"value\"}\r\n                        display={\"key\"}\r\n                    />\r\n                    <TextInput\r\n                        containerStyle={{\r\n                            width: \"50%\",\r\n                            marginBottom: \"8px\"\r\n                        }}\r\n                        label={{\r\n                            title: \"New Date :\",\r\n                            style: {\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                                width: \"110px\",\r\n                            },\r\n                        }}\r\n                        input={{\r\n                            type: \"date\",\r\n                            style: { width: \"calc(100% - 100px)\" },\r\n                            onKeyDown: (e) => {\r\n                                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                }\r\n                            },\r\n                        }}\r\n                        inputRef={NewDateRef}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\",\r\n                        width: \"100%\",\r\n                    }}\r\n                >\r\n\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        width: \"50%\",\r\n                    }}>\r\n                        <TextInput\r\n                            containerStyle={{\r\n                                width: \"100%\",\r\n                                marginBottom: \"8px\"\r\n                            }}\r\n                            label={{\r\n                                title: \"Date :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"80px\",\r\n                                },\r\n                            }}\r\n                            input={{\r\n                                type: \"date\",\r\n                                style: { width: \"calc(100% - 80px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                },\r\n                            }}\r\n                            inputRef={DateRef}\r\n                        />\r\n                        <TextInput\r\n                            containerStyle={{\r\n                                width: \"100%\",\r\n                                marginBottom: \"8px\"\r\n                            }}\r\n                            label={{\r\n                                title: \"Bank :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"80px\",\r\n                                },\r\n                            }}\r\n                            input={{\r\n                                type: \"text\",\r\n                                style: { width: \"calc(100% - 80px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                },\r\n                            }}\r\n                            inputRef={BankRef}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: \"50%\"\r\n                        }}\r\n                    >\r\n                        <TextAreaInput\r\n                            label={{\r\n                                title: \"Reason : \",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"110px\",\r\n\r\n                                },\r\n                            }}\r\n                            textarea={{\r\n                                rows: 3,\r\n                                style: { flex: 1 },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                        //  refDate.current?.focus()\r\n                                    }\r\n                                },\r\n                                onChange: (e) => {\r\n\r\n                                },\r\n                            }}\r\n                            _inputRef={ReasonRef}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\",\r\n                        justifyContent: \"space-between\"\r\n                    }}\r\n                >\r\n                    <TextFormatedInput\r\n                        label={{\r\n                            title: \"Amount : \",\r\n                            style: {\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                                width: \"80px\",\r\n                            },\r\n                        }}\r\n                        containerStyle={{\r\n                            width: \"50%\"\r\n                        }}\r\n                        input={{\r\n                            type: \"text\",\r\n                            style: { width: \"calc(100% - 105px)\" },\r\n                            onKeyDown: (e) => {\r\n                                if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                }\r\n                            }\r\n                        }}\r\n                        inputRef={AmpountRef}\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            height: \"22px\",\r\n                            fontSize: \"11px\",\r\n                        }}\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                        }}\r\n                        color=\"success\"\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            {/* ========== Table ======= */}\r\n            <DataGridViewReact\r\n                ref={table}\r\n                columns={columns}\r\n                rows={[]}\r\n                containerStyle={{\r\n                    height: '180px',\r\n                }}\r\n                getSelectedItem={(rowItm: any) => {\r\n                    if (rowItm) {\r\n\r\n\r\n\r\n                    } else {\r\n\r\n                    }\r\n                }}\r\n                onKeyDown={(rowItm: any, rowIdx: any, e: any) => {\r\n                    if (e.code === 'Delete' || e.code === 'Backspace') {\r\n\r\n                    }\r\n                }}\r\n            />\r\n            {/* ===========  third field  =========== */}\r\n            <div\r\n                style={{\r\n                    position: \"relative\",\r\n                    padding: \"12px\",\r\n                    border: \"1px solid #d1d5db\",\r\n                    marginTop: \"10px\"\r\n\r\n                }}>\r\n                <span\r\n                    style={{\r\n                        fontSize: \"12px\",\r\n                        position: \"absolute\",\r\n                        top: \"-10px\",\r\n                        left: \"20px\",\r\n                        background: \"#F1F1F1\",\r\n                        padding: \"0 5px\"\r\n                    }}\r\n                >Fees and Charges</span>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        columnGap: \"50px\",\r\n                    }}\r\n                >\r\n                    <div style={{\r\n                        flex: 1,\r\n                        display: \"flex\",\r\n                        rowGap: \"10px\",\r\n                        flexDirection: \"column\"\r\n\r\n                    }}>\r\n                        <TextFormatedInput\r\n                            label={{\r\n                                title: \"Holding Fees :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"100px\",\r\n                                },\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"100%\"\r\n                            }}\r\n                            input={{\r\n                                type: \"text\",\r\n                                style: { width: \"calc(100% - 100px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                }\r\n                            }}\r\n                            inputRef={HoldingFeesRef}\r\n                        />\r\n                        <TextFormatedInput\r\n                            label={{\r\n                                title: \"Penalty Charge :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"100px\",\r\n                                },\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"100%\"\r\n                            }}\r\n                            input={{\r\n                                type: \"text\",\r\n                                style: { width: \"calc(100% - 100px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                }\r\n                            }}\r\n                            inputRef={PenaltyChargeRef}\r\n                        />\r\n                        <TextFormatedInput\r\n                            label={{\r\n                                title: \"Surplus:\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"100px\",\r\n                                },\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"100%\"\r\n                            }}\r\n                            input={{\r\n                                type: \"text\",\r\n                                style: { width: \"calc(100% - 100px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                }\r\n                            }}\r\n                            inputRef={SurplusRef}\r\n                        />\r\n                        <SelectInput\r\n                            label={{\r\n                                title: \"Deducted to:\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"100px\",\r\n                                },\r\n                            }}\r\n                            selectRef={DeductedToRef}\r\n                            select={{\r\n                                style: { flex: 1, height: \"22px\" },\r\n                                defaultValue: \"Non-VAT\",\r\n                                onChange: (e) => {\r\n\r\n                                }\r\n\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"100%\",\r\n                                marginBottom: \"12px\"\r\n                            }}\r\n                            datasource={[\r\n                                { key: \"\", value: \"\" },\r\n                                { key: \"Fully Paid\", value: \"Fully Paid\" },\r\n                                { key: \"Cash Replacement\", value: \"Cash Replacement\" },\r\n                                { key: \"Check Replacement\", value: \"Check Replacement\" },\r\n                                { key: \"Account Closed\", value: \"Account Closed\" },\r\n                                { key: \"Hold\", value: \"Hold\" },\r\n                                { key: \"Not Renewed by Camfin\", value: \"Not Renewed by Camfin\" },\r\n                            ]}\r\n                            values={\"value\"}\r\n                            display={\"key\"}\r\n                        />\r\n                        <TextFormatedInput\r\n                            label={{\r\n                                title: \"Total :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"100px\",\r\n                                },\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"100%\"\r\n                            }}\r\n                            input={{\r\n                                type: \"text\",\r\n                                style: { width: \"calc(100% - 100px)\" },\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                    }\r\n                                }\r\n                            }}\r\n                            inputRef={TotalRef}\r\n                        />\r\n                    </div>\r\n                    <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\r\n                        <SelectInput\r\n                            label={{\r\n                                title: \"How to be paid :\",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"120px\",\r\n                                },\r\n                            }}\r\n                            selectRef={HowToBePaidRef}\r\n                            select={{\r\n                                style: { flex: 1, height: \"22px\" },\r\n                                defaultValue: \"Non-VAT\",\r\n                                onChange: (e) => {\r\n\r\n                                }\r\n\r\n                            }}\r\n                            containerStyle={{\r\n                                width: \"50%\",\r\n                                marginBottom: \"12px\"\r\n                            }}\r\n                            datasource={[\r\n                                { key: \"\", value: \"\" },\r\n                                { key: \"Fully Paid\", value: \"Fully Paid\" },\r\n                                { key: \"Cash Replacement\", value: \"Cash Replacement\" },\r\n                                { key: \"Check Replacement\", value: \"Check Replacement\" },\r\n                                { key: \"Account Closed\", value: \"Account Closed\" },\r\n                                { key: \"Hold\", value: \"Hold\" },\r\n                                { key: \"Not Renewed by Camfin\", value: \"Not Renewed by Camfin\" },\r\n                            ]}\r\n                            values={\"value\"}\r\n                            display={\"key\"}\r\n                        />\r\n                        <label\r\n                            htmlFor=\"remarks\"\r\n                            style={{\r\n                                fontSize: \"12px\",\r\n                                fontWeight: \"bold\",\r\n                            }}>Name of Bank && Branch / Date && Time of deposit :</label>\r\n                        <TextAreaInput\r\n                            label={{\r\n                                title: \"Reason : \",\r\n                                style: {\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"bold\",\r\n                                    width: \"110px\",\r\n                                    display: \"none\"\r\n                                },\r\n                            }}\r\n                            textarea={{\r\n                                rows: 4,\r\n                                style: { flex: 1 },\r\n                                id: 'remarks',\r\n                                onKeyDown: (e) => {\r\n                                    if (e.code === \"NumpadEnter\" || e.code === 'Enter') {\r\n                                        //  refDate.current?.focus()\r\n                                    }\r\n                                },\r\n                                onChange: (e) => {\r\n\r\n                                },\r\n                            }}\r\n                            _inputRef={RemarksRef}\r\n                        />\r\n                        <div style={{\r\n                            flex: 1,\r\n                            display: \"flex\",\r\n                            justifyContent: \"flex-end\",\r\n                            alignItems: \"center\",\r\n                            columnGap: \"7px\"\r\n                        }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"info\"\r\n                                style={{\r\n                                    height: \"25px\",\r\n                                    fontSize: \"12px\",\r\n                                }}\r\n                                onClick={(e) => {\r\n                                    loadARefetch()\r\n                                }}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"success\"\r\n                                style={{\r\n                                    height: \"25px\",\r\n                                    fontSize: \"12px\",\r\n                                    background: orange[800]\r\n                                }}\r\n                                onClick={(e) => {\r\n\r\n                                }}\r\n                            >\r\n                                edit\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"success\"\r\n                                style={{\r\n                                    height: \"25px\",\r\n                                    fontSize: \"12px\",\r\n                                }}\r\n                                onClick={async (e) => {\r\n\r\n\r\n                                }}\r\n                            >\r\n                                save\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                style={{\r\n                                    height: \"25px\",\r\n                                    fontSize: \"12px\",\r\n                                }}\r\n                                onClick={(e) => {\r\n\r\n                                }}\r\n                            >\r\n                                cancel\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\nexports.default = _default;"],"names":["columns","key","label","width","ChekPostponementRequest","_queryFn","_queryFn2","_mutationFn","_ref","_useContext","useContext","AuthContext","myAxios","user","table","useRef","RPCDNoRef","BranchRef","PNNoRef","_PNNoRef","NameRef","_NameRef","CheckNoRef","NewDateRef","DateRef","ReasonRef","BankRef","AmpountRef","HoldingFeesRef","PenaltyChargeRef","SurplusRef","DeductedToRef","TotalRef","HowToBePaidRef","RemarksRef","_useQuery","useQuery","queryKey","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","response","data","success","alert","message","dt","length","wait","then","current","setDataSource","isLoadingLoadPnnoData","isLoading","_useQuery2","_callee2","_context2","value","Year","Count","isLoadingLoadAutoIdData","loadARefetch","refetch","_useMutation","useMutation","mutationKey","mutationFn","_x","_callee3","variable","_context3","post","mutateFstFill","mutate","_jsxs","style","padding","background","height","children","position","borderLeft","borderRight","borderTop","_jsx","fontSize","top","left","display","columnGap","LoadingButton","loading","TextInput","containerStyle","marginBottom","title","fontWeight","input","disabled","type","onKeyDown","e","code","inputRef","SelectInput","ref","selectRef","select","flex","defaultValue","onChange","CMB","PNNo","target","PNNname","res","getDataSource","filter","itm","PNo","BName","Name","datasource","values","border","flexDirection","TextAreaInput","textarea","rows","_inputRef","justifyContent","TextFormatedInput","Button","sx","variant","onClick","color","DataGridViewReact","getSelectedItem","rowItm","rowIdx","marginTop","rowGap","htmlFor","id","alignItems","orange","_x2","_callee4","_context4","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}