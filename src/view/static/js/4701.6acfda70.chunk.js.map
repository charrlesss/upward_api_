{"version":3,"file":"static/js/4701.6acfda70.chunk.js","mappings":"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","sources":["hooks/useMutationModalTable.tsx","feautures/Admin/Task/Accounting/Collections.tsx"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { AuthContext } from \"../components/AuthContext\";\nimport { GridRowSelectionModel ,GridRowParams} from \"@mui/x-data-grid\";\nimport ModalWithTable from \"../components/ModalWithTable\";\nimport { flushSync } from \"react-dom\";\n\ninterface QueryModalTableParamsType {\n  link: {\n    queryWithVariable: (variable: any) => string;\n    queryExtraBySearch: string;\n  };\n  uniqueId: string;\n  queryKey: string;\n  responseDataKey: string;\n  columns: Array<any>;\n  onSelected?: (selectedRowData: Array<any>, data: Array<any>) => void;\n  onRemoveSelected?: (data: Array<any>) => void;\n  onSuccess?: (data: Array<any>) => void;\n  searchRef?: React.RefObject<HTMLInputElement>;\n  onCellKeyDown?: any;\n  onCloseFunction?: (search: any) => void;\n  isRowSelectable?: ((params: GridRowParams<any>) => boolean) | undefined;\n}\nconst useMutationModalTable = ({\n  link,\n  uniqueId,\n  queryKey,\n  responseDataKey,\n  columns,\n  onSelected = () => {},\n  onRemoveSelected = () => {},\n  onSuccess = () => {},\n  searchRef,\n  onCellKeyDown,\n  onCloseFunction,\n  isRowSelectable\n}: QueryModalTableParamsType) => {\n  const { myAxios, user } = useContext(AuthContext);\n  const [openSearchCollection, setOpenSearchCollection] = useState(false);\n  const [rows, setRows] = useState<GridRowSelectionModel>([]);\n  const { isLoading, mutate } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) =>\n      await myAxios.get(`${link.queryWithVariable(variables)}`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    onSuccess: (res) => {\n      const response = res as any;\n      setRows(response.data[responseDataKey]);\n      onSuccess(response);\n    },\n  });\n\n  const openModal = (search: string = \"\") => {\n    flushSync(() => {\n      setOpenSearchCollection(true);\n    });\n\n    if (searchRef?.current) {\n      searchRef.current.value = search;\n\n      myAxios\n        .get(`${link.queryExtraBySearch}=${search}`, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        })\n        .then((res: any) => {\n          if (!res?.data.success) {\n            return alert(`Error : ${res?.data.message}`);\n          }\n          const response = res as any;\n          setRows(response.data[responseDataKey]);\n          if (searchRef?.current) searchRef.current.focus();\n        });\n\n    }\n\n  };\n  const closeModal = () => {\n    setOpenSearchCollection(false);\n    if (onCloseFunction) {\n      onCloseFunction(searchRef?.current?.value);\n    }\n  };\n\n  const ModalComponent = (\n    <ModalWithTable\n      searchRef={searchRef}\n      showModal={openSearchCollection}\n      onCloseModal={() => {\n        setOpenSearchCollection(false);\n        if (onCloseFunction) {\n          onCloseFunction(searchRef?.current?.value);\n        }\n      }}\n      onClickCloseIcon={() => {\n        setOpenSearchCollection(false);\n        if (onCloseFunction) {\n          onCloseFunction(searchRef?.current?.value);\n        }\n      }}\n      searchOnChange={(e) => {\n        myAxios\n          .get(`${link.queryExtraBySearch}=${e.target.value}`, {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          })\n          .then((res: any) => {\n            if (!res?.data.success) {\n              return alert(`Error : ${res?.data.message}`);\n            }\n            const response = res as any;\n            setRows(response.data[responseDataKey]);\n          });\n      }}\n      onSearchKeyEnter={(value) => {\n        myAxios\n          .get(`${link.queryExtraBySearch}=${value}`, {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          })\n          .then((res: any) => {\n            if (!res?.data.success) {\n              return alert(`Error : ${res?.data.message}`);\n            }\n            const response = res as any;\n            setRows(response.data[responseDataKey]);\n          });\n      }}\n      onCellKeyDown={onCellKeyDown}\n      height={300}\n      isLoading={isLoading}\n      queryKey={queryKey}\n      columns={columns}\n      onSelectionChange={(rowSelectionModel, data) => {\n        if (rowSelectionModel.length <= 0) {\n          return onRemoveSelected(data);\n        }\n        const selectedIDs = new Set(rowSelectionModel);\n        const selectedRowData = data.filter((row: any) => {\n          return selectedIDs.has(row[uniqueId].toString());\n        });\n        if (selectedRowData.length <= 0) return;\n        onSelected(selectedRowData, data);\n      }}\n      isRowSelectable={isRowSelectable}\n      id={uniqueId}\n      rows={rows}\n      setRows={setRows}\n    />\n  );\n\n  return {\n    openSearchCollection,\n    rows,\n    isLoading,\n    openModal,\n    closeModal,\n    ModalComponent,\n    mutate,\n  };\n};\n\nexport default useMutationModalTable;\n","import { useContext, useState, useRef, useReducer, createContext } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  CircularProgress,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  FormControl,\n  Select,\n  MenuItem,\n  Modal,\n  Autocomplete,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport { green } from \"@mui/material/colors\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport useUrlParams from \"../../../../hooks/useUrlParams\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport { wait } from \"../../../../lib/wait\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { incrementCheckNo } from \"./PostDateChecks\";\nimport useQueryModalTable from \"../../../../hooks/useQueryModalTable\";\nimport useMutationModalTable from \"../../../../hooks/useMutationModalTable\";\nimport { flushSync } from \"react-dom\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport { UpwardTable } from \"../../../../components/UpwardTable\";\n\nconst CollectionContext = createContext<{\n  debit: Array<any>;\n  credit: Array<any>;\n}>({ debit: [], credit: [] });\n\nconst initialState = {\n  ORNo: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  //====\n  creditUpdateMode: false,\n  creditCheckIdx: \"\",\n  creditCheckID: \"\",\n  //===\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  searchCheckedList: \"\",\n  bank_transaction: \"\",\n  isFao: false,\n  search: \"\",\n  mode: \"\",\n};\nconst initialStateDeposit = {\n  cashID: \"\",\n  cashMode: \"add\",\n  payamentType: \"CSH\",\n  amount: \"\",\n  transaction_desc: [],\n  debitHasSelected: false,\n};\nconst initialStateCredit = {\n  creditMode: \"add\",\n  creditId: \"\",\n  transaction: \"\",\n  amount: \"\",\n  FAO_Name: \"\",\n  FAO_ID: \"\",\n  remarks: \"\",\n  option: \"Non-Vat\",\n  invoice: \"\",\n  Code: \"\",\n  Title: \"\",\n  TC: \"\",\n};\nconst modalInitialState = {\n  CheckIdx: \"\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  CheckMode: \"add\",\n};\n\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst addCollectionQueryKey = \"add-collection\";\nconst queryMutationKeyCollectionDataSearch = \"collection-data-search\";\nexport const debitColumn = [\n  { field: \"Payment\", headerName: \"Payment\", flex: 1, width: 170 },\n  {\n    field: \"Amount\",\n    headerName: \"Amount\",\n    flex: 1,\n    width: 170,\n    type: \"number\",\n  },\n  { field: \"Check_No\", headerName: \"Check No\", width: 170 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 170 },\n  { field: \"Bank_Branch\", headerName: \"Bank/Branch\", width: 300 },\n  { field: \"Acct_Code\", headerName: \"DR Code\", width: 170 },\n  { field: \"Acct_Title\", headerName: \"DR Title\", width: 300 },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 170 },\n  { field: \"Cntr\", headerName: \"Cntr\", width: 170 },\n  { field: \"Remarks\", headerName: \"Remarks\", width: 300 },\n  { field: \"TC\", headerName: \"TC\", width: 170 },\n  { field: \"temp_id\", headerName: \"temp_id\", hide: true },\n  { field: \"Bank\", headerName: \"Bank\", hide: true },\n  { field: \"BankName\", headerName: \"BankName\", hide: true },\n];\nexport const creditColumn = [\n  { field: \"temp_id\", headerName: \"temp_id\", hide: true },\n  { field: \"transaction\", headerName: \"Transaction\", width: 200 },\n  { field: \"amount\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"Remarks\", headerName: \"Remarks\", width: 350 },\n  { field: \"Code\", headerName: \"Code\", width: 150 },\n  { field: \"Title\", headerName: \"Title\", width: 350 },\n  { field: \"TC\", headerName: \"TC\", width: 200 },\n  { field: \"Account_No\", headerName: \"Accoount No.\", width: 180 },\n  { field: \"Name\", headerName: \"Name\", width: 350 },\n  { field: \"VATType\", headerName: \"VAT Type\", width: 150 },\n  { field: \"invoiceNo\", headerName: \"Invoice No\", width: 250 },\n];\nconst queryKeyPaymentType = \"payment-type-code\";\nconst queryKeyNewORNumber = \"new-or-number\";\n\nexport default function Collections() {\n  const [credit, setCredit] = useState<GridRowSelectionModel>([]);\n  const [debit, setDebit] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n\n  const { searchParams, setSearchParams } = useUrlParams();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [debitState, debitDispatch] = useReducer(reducer, initialStateDeposit);\n  const [creditState, creditDispatch] = useReducer(reducer, initialStateCredit);\n  const [modalState, modalDispatch] = useReducer(reducer, modalInitialState);\n\n  const { myAxios, user } = useContext(AuthContext);\n  const [save, setSave] = useState(searchParams.get(\"selected\") !== \"\");\n  const [addNew, setAddNew] = useState(searchParams.get(\"selected\") !== \"\");\n  const [hasSelected, setHasSelected] = useState(false);\n\n  // button submit buttons\n  const cashButtonSave = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveActionButtonRef = useRef<any>(null);\n\n  const creditSaveButton = useRef<HTMLButtonElement>(null);\n  const saveCollectionButtonRef = useRef<HTMLButtonElement>(null);\n\n  //search modal auto focus on load\n  const pdcSearchInput = useRef<HTMLInputElement>(null);\n  const collectionSearchInput = useRef<HTMLInputElement>(null);\n  const bankSearchInput = useRef<HTMLInputElement>(null);\n  const checkListSearchInput = useRef<HTMLInputElement>(null);\n\n  //Check Modal Input ref\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n\n  //debit amount ref\n  const paymentTypeRef = useRef<HTMLSelectElement>(null);\n  const amountRef = useRef<HTMLInputElement>(null);\n\n  //credit input ref\n  let creditTransactionRef = useRef<HTMLInputElement>(null);\n  const creditAmountRef = useRef<HTMLInputElement>(null);\n  const creditFaoRef = useRef<HTMLInputElement>(null);\n  const creditInvoiceRef = useRef<HTMLInputElement>(null);\n\n  //pn/client ref\n  const pnClientORRef = useRef<HTMLInputElement>(null);\n\n  const queryClient = useQueryClient();\n  // client IDs search table modal\n\n\n  const dateRef = useRef<HTMLInputElement>(null);\n  const pdcAddbtnRef = useRef<HTMLButtonElement>(null);\n\n\n\n  const tableDebit = useRef<any>(null);\n  const tableCredit = useRef<any>(null);\n  const creditRemarksRef = useRef<any>(null);\n  const vatRef = useRef<any>(null);\n\n  const {\n    ModalComponent: ModalClientIDs,\n    openModal: openCliendIDsModal,\n    isLoading: isLoadingClientIdsModal,\n    closeModal: closeCliendIDsModal,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        flex: 1,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-polidy-ids\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData, data) => {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"PNo\",\n        value: selectedRowData[0].IDNo,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"IDNo\",\n        value: selectedRowData[0].ID,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"Name\",\n        value: selectedRowData[0].Name ?? \"\",\n      });\n      closeCliendIDsModal();\n      wait(50).then(() => {\n        paymentTypeRef.current?.focus()\n      })\n    },\n    searchRef: pdcSearchInput,\n  });\n\n  //CREDIT CLIENT\n\n  const {\n    ModalComponent: ModalCreditClientIDs,\n    openModal: openCreditCliendIDsModal,\n    isLoading: isLoadingCreditClientIdsModal,\n    closeModal: closeCreditCliendIDsModal,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        flex: 1,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-polidy-ids\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData, data) => {\n      creditDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"FAO_ID\",\n        value: selectedRowData[0].IDNo,\n      });\n      creditDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"FAO_Name\",\n        value: selectedRowData[0].Name ?? \"\",\n      });\n      closeCreditCliendIDsModal();\n      wait(50).then(() => {\n        creditRemarksRef.current?.focus()\n      })\n    },\n    searchRef: pdcSearchInput,\n  });\n\n  // collection search table modal\n  const {\n    ModalComponent: ModalSearchCollection,\n    openModal: openModalSearchCollection,\n    closeModal: closeModalSearchCollection,\n    isLoading: isLoadingModalSearchCollection,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-collection\",\n      queryUrlName: \"searchCollectionInput\",\n    },\n    columns: [\n      { field: \"Date\", headerName: \"OR Date\", width: 170 },\n      { field: \"ORNo\", headerName: \"OR No.\", width: 200 },\n      { field: \"Name\", headerName: \"Name\", flex: 1 },\n    ],\n    queryKey: \"collection-search\",\n    uniqueId: \"ORNo\",\n    responseDataKey: \"collection\",\n    onSelected: (selectedRowData, data) => {\n      mutateCollectionDataSearch({ ORNo: selectedRowData[0].ORNo });\n    },\n    onCloseFunction: (value: any) => {\n      dispatch({ type: \"UPDATE_FIELD\", field: \"search\", value });\n    },\n    searchRef: collectionSearchInput,\n  });\n  // bank search table modal\n  const {\n    ModalComponent: ModalSearchBanks,\n    openModal: openModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    columns: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n      { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n    ],\n    queryKey: \"collection-banks\",\n    uniqueId: \"Bank_Code\",\n    responseDataKey: \"pdcBanks\",\n    onSelected: (selectedRowData, data) => {\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"BankName\",\n        value: selectedRowData[0].Bank,\n      });\n\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"BankCode\",\n        value: selectedRowData[0].Bank_Code,\n      });\n      closeModalSearchBanks();\n    },\n\n    searchRef: bankSearchInput,\n  });\n  //Get checked list\n  const {\n    ModalComponent: ModalSearchCheckList,\n    openModal: openModalSearchCheckList,\n    closeModal: closeModalSearchCheckList,\n    isLoading: isLoadingModalSearchCheckList,\n    mutate: mutateClientCheckedList,\n  } = useMutationModalTable({\n    link: {\n      queryWithVariable: (variables: any) => {\n        return `/task/accounting/get-client-checked-by-id?PNo=${variables.PNo}&searchCheckedList=${variables.searchCheckedList}`;\n      },\n      queryExtraBySearch: `/task/accounting/get-client-checked-by-id?PNo=${state.PNo}&searchCheckedList`,\n    },\n    columns: [\n      { field: \"temp_id\", headerName: \"temp_id\", width: 0, hide: true },\n      { field: \"Check_No\", headerName: \"Check No\", width: 130 },\n      { field: \"Check_Date\", headerName: \"Check Date\", flex: 1 },\n      {\n        field: \"Amount\",\n        headerName: \"Amount\",\n        width: 200,\n        type: \"number\",\n      },\n      {\n        field: \"Bank_Branch\",\n        headerName: \"Bank Branch\",\n        width: 200,\n      },\n      {\n        field: \"Remarks\",\n        headerName: \"Remarks\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    queryKey: \"collection-client-check\",\n    uniqueId: \"temp_id\",\n    responseDataKey: \"clientCheckedList\",\n    onSelected: (selectedRowData, data) => {\n      if (\n        debit\n          .filter((items: any) => items.Check_No !== \"\")\n          .map((items: any) => items.Check_No)\n          .includes(selectedRowData[0].Check_No)\n      ) {\n        return;\n      }\n\n      myAxios\n        .post(\n          `/task/accounting/get-drcode-drtitle-from-collection`,\n          { code: debitState.payamentType },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        )\n        .then((res) => {\n          console.log(res)\n          const { Acct_Code, Acct_Title } = res?.data?.data[0];\n          setDebit((d: any) => {\n            let lastID = 0;\n            if (d.length <= 0) {\n              lastID = 0;\n            } else {\n              lastID = parseInt(d[d.length - 1].temp_id) + 1;\n            }\n\n            d = [\n              ...d,\n              {\n                Payment: \"Check\",\n                Amount: selectedRowData[0].Amount,\n                Check_No: selectedRowData[0].Check_No,\n                Check_Date: selectedRowData[0].Check_Date,\n                Bank_Branch: selectedRowData[0].Bank_Branch,\n                Acct_Code,\n                Acct_Title,\n                Deposit_Slip: \"\",\n                Cntr: \"\",\n                Remarks: selectedRowData[0].Remarks,\n                TC: debitState.payamentType,\n                temp_id: lastID.toString(),\n                Bank: selectedRowData[0].Bank,\n                BankName: selectedRowData[0].BankName,\n                Check_Remarks: selectedRowData[0].Check_Remarks,\n                Branch: selectedRowData[0].Branch,\n              },\n            ];\n            return d;\n          });\n          closeModalSearchCheckList();\n        });\n    },\n    onSuccess: (data) => {\n      openModalSearchCheckList();\n    },\n    searchRef: checkListSearchInput,\n    isRowSelectable: (params) => {\n      if (\n        debit\n          .filter((items: any) => items.Check_No !== \"\")\n          .map((items: any) => items.Check_No)\n          .includes(params.row.Check_No)\n      ) {\n        return false;\n      }\n      return true;\n    },\n  });\n\n  // get chart_account and transaction_code\n  const { isLoading: paymentTypeLoading } = useQuery({\n    queryKey: queryKeyPaymentType,\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/get-transaction-code-title`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (res) => {\n      const response = res as any;\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"transaction_desc\",\n        value: response.data.transactionDesc,\n      });\n    },\n  });\n\n  //get drcode and drtitle\n  const { isLoading: NewORNoLoading, refetch: refetchNewOR } = useQuery({\n    queryKey: queryKeyNewORNumber,\n    queryFn: async () =>\n      await myAxios.get(`/task/accounting/get-new-or-number`, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n    refetchOnWindowFocus: false,\n    onSuccess: (res) => {\n      const response = res as any;\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"ORNo\",\n        value: response.data?.ORNo[0].collectionID,\n      });\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"OR_No\",\n        value: response.data?.ORNo[0].collectionID,\n      });\n    },\n  });\n  // get data after collection search selected\n  const {\n    isLoading: loadingCollectionDataSearch,\n    mutate: mutateCollectionDataSearch,\n  } = useMutation({\n    mutationKey: queryMutationKeyCollectionDataSearch,\n    mutationFn: async (variables: any) =>\n      await myAxios.get(\n        `/task/accounting/get-collection-data-search?ORNo=${variables.ORNo}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }\n      ),\n    onSuccess: (res) => {\n      const response = res as any;\n      const dataCollection = response.data.collection;\n\n      const ORNo = dataCollection[0].ORNo;\n      const OR_Date = dataCollection[0].Date_OR;\n      const ClientID = dataCollection[0].ID_No;\n      const ClientName = dataCollection[0].Short;\n      const selectedSearchState = {\n        ORNo: ORNo,\n        PNo: ClientID,\n        IDNo: ClientID,\n        Date: OR_Date,\n        Name: ClientName,\n      };\n      const debit: Array<any> = [];\n      const credit: Array<any> = [];\n\n   \n      function isValidDate(dateString: string): boolean {\n        const date = new Date(dateString);\n        return date instanceof Date && !isNaN(date.getTime());\n      }\n\n      for (let i = 0; i <= dataCollection.length - 1; i++) {\n        if (\n          dataCollection[i].Payment !== \"\" &&\n          dataCollection[i].Debit !== \"0\"\n        ) {\n          debit.push({\n            Payment: dataCollection[i].Payment,\n            Amount: dataCollection[i].Debit,\n            Check_No: dataCollection[i].Check_No,\n            Check_Date: isValidDate(dataCollection[i].Check_Date)\n              ? new Date(dataCollection[i].Check_Date).toLocaleDateString()\n              : \"\",\n            Bank_Branch: dataCollection[i].Bank,\n            Acct_Code: dataCollection[i].DRCode,\n            Acct_Title: dataCollection[i].DRTitle,\n            Deposit_Slip: dataCollection[i].SlipCode,\n            Cntr: \"\",\n            Remarks: dataCollection[i].DRRemarks,\n            TC: dataCollection[i].Check_No ? \"CHK\" : \"CSH\",\n            temp_id: `${i}`,\n            Bank: dataCollection[i].Bank_Code,\n            BankName: dataCollection[i].BankName,\n            Branch: dataCollection[i].Branch,\n            Check_Remarks: dataCollection[i].DRRemarks,\n          });\n        }\n\n        if (\n          dataCollection[i].Purpose !== \"\" &&\n          dataCollection[i].Credit !== \"0\" &&\n          dataCollection[i].CRCode !== \"\" &&\n          dataCollection[i].CRTitle !== \"\" &&\n          dataCollection[i].CRLoanID !== \"\" &&\n          dataCollection[i].CRLoanName !== \"\" &&\n          dataCollection[i].CRVatType !== \"\" &&\n          dataCollection[i].CRInvoiceNo !== \"\"\n        ) {\n          credit.push({\n            temp_id: `${i}`,\n            transaction: dataCollection[i].Purpose,\n            amount: dataCollection[i].Credit,\n            Remarks: dataCollection[i].CRRemarks,\n            Code: dataCollection[i].CRCode,\n            Title: dataCollection[i].CRTitle,\n            TC: dataCollection[i].CRTitle,\n            Account_No: dataCollection[i].CRLoanID,\n            Name: dataCollection[i].CRLoanName,\n            VATType: dataCollection[i].CRVATType,\n            invoiceNo: dataCollection[i].CRInvoiceNo,\n          });\n        }\n      }\n      setNewStateValue(dispatch, selectedSearchState);\n      setDebit(debit);\n      setCredit(credit);\n      setAddNew(true);\n      setSave(true);\n      setHasSelected(true);\n      closeModalSearchCollection();\n    },\n  });\n  //add update\n  const {\n    mutate,\n    isLoading: loadingAddNew,\n    variables,\n  } = useMutation({\n    mutationKey: addCollectionQueryKey,\n    mutationFn: async (variables: any) => {\n      if (hasSelected) {\n        delete variables.mode;\n        return await myAxios.post(\n          \"/task/accounting/update-collection\",\n          variables,\n          {\n            headers: {\n              Authorization: `Bearer ${user?.accessToken}`,\n            },\n          }\n        );\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-collection\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        setSave(false);\n        setAddNew(false);\n        setNewStateValue(dispatch, initialState);\n        queryClient.invalidateQueries(\"collection-search\");\n        setHasSelected(false);\n        setDebit([]);\n        setCredit([]);\n        refetchNewOR();\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  // print\n  const { mutate: mutataPrint, isLoading: isLoadingPrint } = useMutation({\n    mutationKey: \"on-print\",\n    mutationFn: async (variables: any) => {\n      return await myAxios.post(\"/task/accounting/on-print\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        printOR(res.data);\n      }\n    },\n  });\n  // dispatch state\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // dispatch debit state\n  const handleDebitInputChange = (e: any) => {\n    const { name, value } = e.target;\n    debitDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // dispatch credit state\n  const handleCreditInputChange = (e: any) => {\n    const { name, value } = e.target;\n    creditDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  // click button save\n  function handleOnSave(e: any) {\n    e.preventDefault();\n    if (state.ORNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide OR number\",\n        timer: 1500,\n      });\n    } else if (state.PNo === \"\") {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"isFao\",\n        value: false,\n      });\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide PN/Client ID\",\n        timer: 1500,\n      }).then(() => {\n        wait(350).then(() => {\n          openCliendIDsModal();\n        });\n      });\n    } else if (debit.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide debit entry\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => {\n          paymentTypeRef.current?.focus();\n        });\n      });\n    } else if (credit.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide credit entry\",\n        timer: 1500,\n      }).then(() => {\n        wait(300).then(() => {\n          creditTransactionRef.current?.focus();\n        });\n      });\n    } else if (\n      debit.reduce(\n        (sum: any, obj: any) =>\n          sum + parseFloat(obj.Amount.toString().replace(/,/g, \"\")),\n        0\n      ) !==\n      credit.reduce(\n        (sum: any, obj: any) =>\n          sum + parseFloat(obj.amount.toString().replace(/,/g, \"\")),\n        0\n      )\n    ) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title:\n          \"Transaction is not balanced. Check if the amount you entered are correct!\",\n        timer: 1500,\n      });\n    }\n\n    if (state.PNo.length >= 200) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"PN/Client ID is too long!\",\n        timer: 1500,\n      });\n    }\n\n    const newState = {\n      ORNo: state.ORNo,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      debit: JSON.stringify(debit),\n      credit: JSON.stringify(credit),\n      payamentType: debitState.payamentType,\n    };\n    if (hasSelected) {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...newState, userCodeConfirmation, mode: \"\" });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...newState, mode: \"\" });\n        },\n      });\n    }\n  }\n  // debit select Row\n  function DebitSelectedChange(rowSelected: any) {\n    if (rowSelected.Payment === \"Cash\") {\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"CheckMode\",\n        value: \"\",\n      });\n      modalDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"CheckIdx\",\n        value: \"\",\n      });\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"amount\",\n        value: rowSelected.Amount,\n      });\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"cashID\",\n        value: rowSelected.temp_id,\n      });\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"cashMode\",\n        value: \"edit\",\n      });\n      return;\n    }\n    setAddNew(true);\n    setSave(true);\n    modalDispatch({\n      type: \"UPDATE_FIELD\",\n      field: \"CheckMode\",\n      value: \"edit\",\n    });\n    modalDispatch({\n      type: \"UPDATE_FIELD\",\n      field: \"CheckIdx\",\n      value: rowSelected.temp_id,\n    });\n\n    if (rowSelected.Deposit_Slip !== \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: `Unable to edit. Check No ${rowSelected.Check_No} is a PDC deposited!`,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    if (rowSelected.Cntr !== \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: `Unable to edit. Check No ${rowSelected.Check_No} is a PDC reference!`,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    }\n    const newState = {\n      CheckIdx: rowSelected.temp_id,\n      BankName: rowSelected.BankName,\n      BankCode: rowSelected.Bank,\n      Branch: rowSelected.Branch,\n      Check_Date: new Date(rowSelected.Check_Date),\n      Check_No: rowSelected.Check_No,\n      Check_Amnt: rowSelected.Amount,\n      Check_Remarks: rowSelected.Remarks,\n      CheckMode: \"edit\",\n    };\n\n    // if (code === \"Delete\" || code === \"Backspace\") {\n    //   return DebitDeleteRow(rowSelected);\n    // }\n\n    setNewStateValue(modalDispatch, newState);\n    flushSync(() => {\n      setOpenPdcInputModal(true);\n    });\n    checkModalSaveActionButtonRef.current?.focusVisible();\n  }\n  // debit selected row delete\n  function DebitDeleteRow(rowSelected: any) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        return Swal.fire({\n          text: `Check No. ${rowSelected.Check_No} has delete successfully.`,\n          icon: \"success\",\n          showCancelButton: true,\n          timer: 1500,\n        }).then(() => {\n          setDebit((d) => {\n            d = d.filter((item: any) => {\n              return item.temp_id !== rowSelected.temp_id;\n            });\n            return d;\n          });\n        });\n      }\n\n      debitDispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"amount\",\n        value: \"0.00\",\n      });\n      tableDebit.current?.resetTableSelected();\n    });\n  }\n\n  function handleModalInputChange(e: any) {\n    const { name, value } = e.target;\n    modalDispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  }\n\n  function CustomSwalAlertWarning(\n    label: string,\n    cb: (value: SweetAlertResult<any>) => any\n  ) {\n    Swal.fire({\n      text: label,\n      icon: \"warning\",\n      showCancelButton: false,\n      timer: 1500,\n    }).then(cb);\n  }\n\n  function printOR(res: any) {\n    const data = res.data.concat(res.data1);\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(data));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"collection\");\n      if (user?.department === \"UMIS\") {\n        localStorage.setItem(\"title\", user?.department === 'UMIS' ? \"UPWARD MANAGEMENT INSURANCE SERVICES\" : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\");\n      } else {\n        localStorage.setItem(\n          \"title\",\n          \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\"\n        );\n      }\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  }\n\n  const width = window.innerWidth - 70;\n  const height = window.innerHeight - 500;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n      }}\n    >\n      <CollectionContext.Provider value={{ credit, debit }}>\n        <div style={{ height: \"auto\" }}>\n          <Box\n            sx={(theme) => ({\n              display: \"flex\",\n              alignItems: \"center\",\n              columnGap: \"20px\",\n              [theme.breakpoints.down(\"sm\")]: {\n                flexDirection: \"column\",\n                alignItems: \"flex-start\",\n                flex: 1,\n                marginBottom: \"15px\",\n              },\n            })}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                columnGap: \"20px\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  columnGap: \"5px\",\n                }}\n              >\n                {isLoadingModalSearchCollection ? (\n                  <LoadingButton loading={isLoadingModalSearchCollection} />\n                ) : (\n                  <TextField\n                    label=\"Search\"\n                    size=\"small\"\n                    name=\"search\"\n                    value={state.search}\n                    onChange={handleInputChange}\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        e.preventDefault();\n                        return openModalSearchCollection(\n                          (e.target as HTMLInputElement).value\n                        );\n                      }\n                    }}\n                    InputProps={{\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    sx={{\n                      width: \"300px\",\n                      height: \"27px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                )}\n                {!save && (\n                  <Button\n                    sx={{\n                      height: \"30px\",\n                      fontSize: \"11px\",\n                    }}\n                    variant=\"contained\"\n                    startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                    id=\"entry-header-save-button\"\n                    onClick={() => {\n                      setAddNew(true);\n                      setSave(true);\n                      setSearchParams((prev) => {\n                        prev.set(\"selected\", \"\");\n                        return prev;\n                      });\n                      setDebit([]);\n                      setCredit([]);\n                      setHasSelected(false);\n                    }}\n                  >\n                    New\n                  </Button>\n                )}\n                <Box sx={{ position: \"relative\" }}>\n                  <Button\n                    sx={{\n                      height: \"30px\",\n                      fontSize: \"11px\",\n                    }}\n                    ref={saveCollectionButtonRef}\n                    id=\"save-entry-header\"\n                    color=\"success\"\n                    variant=\"contained\"\n                    type=\"submit\"\n                    onClick={handleOnSave}\n                    disabled={\n                      (loadingAddNew && variables.mode === undefined) || !save\n                    }\n                    startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n                  >\n                    Save\n                  </Button>\n                  {loadingAddNew && variables.mode === undefined && (\n                    <CircularProgress\n                      size={24}\n                      sx={{\n                        color: green[500],\n                        position: \"absolute\",\n                        top: \"50%\",\n                        left: \"50%\",\n                        marginTop: \"-12px\",\n                        marginLeft: \"-12px\",\n                      }}\n                    />\n                  )}\n                </Box>\n                {save && (\n                  <Button\n                    sx={{\n                      height: \"30px\",\n                      fontSize: \"11px\",\n                    }}\n                    variant=\"contained\"\n                    startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n                    color=\"error\"\n                    onClick={() => {\n                      Swal.fire({\n                        title: \"Are you sure?\",\n                        text: \"You won't be able to revert this!\",\n                        icon: \"warning\",\n                        showCancelButton: true,\n                        confirmButtonColor: \"#3085d6\",\n                        cancelButtonColor: \"#d33\",\n                        confirmButtonText: \"Yes, cancel it!\",\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          setSave(false);\n                          setAddNew(false);\n                          setNewStateValue(dispatch, initialState);\n                          refetchNewOR();\n                          setDebit([]);\n                          setCredit([]);\n                          setHasSelected(false);\n                        }\n                      });\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                )}\n                <LoadingButton\n                  loading={isLoadingPrint}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  sx={{\n                    height: \"30px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={!hasSelected}\n                  onClick={() => {\n                    mutataPrint({ ORNo: state.ORNo });\n                  }}\n                >\n                  Print\n                </LoadingButton>\n              </div>\n            </div>\n          </Box>\n          <form\n            onKeyDown={(e) => {\n              if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                e.preventDefault();\n                return;\n              }\n            }}\n          >\n            <Box\n              sx={(theme) => ({\n                [theme.breakpoints.down(\"md\")]: {\n                  flexDirection: \"column\",\n                  rowGap: \"10px\",\n                },\n              })}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px 0 \",\n                }}\n              >\n                {NewORNoLoading ? (\n                  <LoadingButton loading={NewORNoLoading} />\n                ) : (\n                  <FormControl\n                    sx={{\n                      width: \"170px\",\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={!addNew || hasSelected}\n                    required\n                  >\n                    <InputLabel htmlFor=\"collection-id-field\">\n                      OR No.\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      readOnly={user?.department !== \"UCSMI\"}\n\n                      // inputRef={checkBankRef}\n                      disabled={!addNew || hasSelected}\n                      label=\"OR No.\"\n                      name=\"ORNo\"\n                      value={state.ORNo}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          dateRef.current?.focus();\n                        }\n                      }}\n                      id=\"collection-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={!addNew || hasSelected}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => {\n                              refetchNewOR();\n                            }}\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                  inputRef={dateRef}\n                  fullWidth={false}\n                  disabled={!addNew}\n                  label=\"OR Date\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      //saveCollectionButtonRef.current?.click();\n                      pnClientORRef.current?.focus()\n                    }\n                  }}\n\n                />\n                {paymentTypeLoading || isLoadingClientIdsModal ? (\n                  <LoadingButton\n                    loading={paymentTypeLoading || isLoadingClientIdsModal}\n                  />\n                ) : (\n                  <FormControl\n                    sx={{\n                      width: \"170px\",\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={!addNew}\n                  >\n                    <InputLabel htmlFor=\"client-id\">PN/Client ID</InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      inputRef={pnClientORRef}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"client-id\"\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          dispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"isFao\",\n                            value: false,\n                          });\n                          return openCliendIDsModal(state.PNo);\n                        }\n                      }}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={!addNew}\n                            onClick={() => {\n                              openCliendIDsModal(state.PNo);\n                              dispatch({\n                                type: \"UPDATE_FIELD\",\n                                field: \"isFao\",\n                                value: false,\n                              });\n                            }}\n                            edge=\"end\"\n                            color=\"secondary\"\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={!addNew}\n                  InputProps={{\n                    readOnly: true,\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      return openCliendIDsModal(state.PNo);\n                    }\n                  }}\n                  sx={{\n                    flex: 1,\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n            </Box>\n          </form>\n        </div>\n        <div\n          style={{\n            position: \"relative\",\n            width: \"100%\",\n            overflow: \"auto\",\n            flex: 1,\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              width: \"100%\",\n              height: \"auto\",\n            }}\n          >\n            <fieldset\n              style={{\n                boxSizing: \"border-box\",\n                border: \"1px solid #cbd5e1\",\n                borderRadius: \"5px\",\n                position: \"relative\",\n                height: \"420px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <legend>Particulars (Debit)</legend>\n              <div style={{ display: \"flex\", marginBottom: \"10px\" }}>\n                <FormControl\n                  sx={{\n                    width: \"150px\",\n                    marginRight: \"10px\",\n                    minWidth: 150,\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-1px\" },\n                  }}\n                >\n                  <InputLabel id=\"payment-check\">Payment Type</InputLabel>\n                  <Select\n                    inputRef={paymentTypeRef}\n                    disabled={!addNew}\n                    labelId=\"payment-check\"\n                    value={debitState.payamentType}\n                    onChange={handleDebitInputChange}\n                    autoWidth\n                    label=\"Payment Type\"\n                    size=\"small\"\n                    name=\"payamentType\"\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    <MenuItem\n                      value={\"CHK\"}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          if (debitState.payamentType === \"CHK\") {\n                            wait(150).then(() => {\n                              pdcAddbtnRef.current?.focus()\n                            })\n                          } else {\n                            wait(150).then(() => {\n                              amountRef.current?.focus()\n                            })\n                          }\n                        }\n                      }}\n                    >Check</MenuItem>\n                    <MenuItem value={\"CSH\"} onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        if (debitState.payamentType === \"CHK\") {\n                          wait(150).then(() => {\n                            pdcAddbtnRef.current?.focus()\n                          })\n                        } else {\n                          wait(150).then(() => {\n                            amountRef.current?.focus()\n                          })\n                        }\n                      }\n                    }}>Cash</MenuItem>\n                  </Select>\n                </FormControl>\n                {debitState.payamentType === \"CHK\" ? (\n                  <div style={{ display: \"flex\", gap: \"10px\" }}>\n                    <Button\n                      disabled={!addNew}\n                      startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                      variant=\"outlined\"\n                      sx={{\n                        height: \"30px\",\n                        fontSize: \"11px\",\n                      }}\n                      onClick={() => {\n                        const getLastCheck_No: any = debit[debit.length - 1];\n                        const newData = {\n                          CheckIdx: \"\",\n                          BankName: \"\",\n                          BankCode: \"\",\n                          Branch: \"\",\n                          Check_Date: new Date(),\n                          Check_No: incrementCheckNo(getLastCheck_No?.Check_No),\n                          Check_Amnt: \"\",\n                          Check_Remarks: \"\",\n                          CheckMode: \"add\",\n                        };\n                        setNewStateValue(modalDispatch, newData);\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      }}\n                      ref={pdcAddbtnRef}\n                    >\n                      Add PDC Check\n                    </Button>\n                    <LoadingButton\n                      sx={{\n                        height: \"30px\",\n                        fontSize: \"11px\",\n                      }}\n                      loading={\n                        paymentTypeLoading || isLoadingModalSearchCheckList\n                      }\n                      disabled={!addNew}\n                      onClick={() => {\n                        mutateClientCheckedList({\n                          PNo: state.PNo,\n                          searchCheckedList: state.searchCheckedList,\n                        });\n                      }}\n                      startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n                      variant=\"outlined\"\n                      color=\"success\"\n                    >\n                      Add Check From PDC Entry\n                    </LoadingButton>\n                  </div>\n                ) : (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      gap: \"10px\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <TextField\n                      inputRef={amountRef}\n                      disabled={!addNew || debitState.cashMode === \"\"}\n                      name=\"amount\"\n                      label=\"Amount\"\n                      size=\"small\"\n                      value={debitState.amount}\n                      onChange={handleDebitInputChange}\n                      placeholder=\"0.00\"\n                      InputProps={{\n                        inputComponent: NumericFormatCustom as any,\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      }}\n                      sx={{\n                        width: \"160px\",\n                        \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                        \".MuiFormLabel-root[data-shrink=false]\": {\n                          top: \"-5px\",\n                        },\n                      }}\n                      onBlur={() => {\n                        debitDispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"amount\",\n                          value: parseFloat(\n                            debitState.amount.replace(/,/g, \"\")\n                          ).toFixed(2),\n                        });\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          cashButtonSave.current?.click();\n                        }\n                      }}\n                    />\n                    {debitState.cashMode === \"\" ? (\n                      <Button\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        variant=\"outlined\"\n                        onClick={() => {\n                          debitDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"cashID\",\n                            value: \"\",\n                          });\n                          debitDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"cashMode\",\n                            value: \"add\",\n                          });\n                        }}\n                      >\n                        Add Cash\n                      </Button>\n                    ) : (\n                      <LoadingButton\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        ref={cashButtonSave}\n                        loading={paymentTypeLoading}\n                        variant=\"outlined\"\n                        color=\"success\"\n                        disabled={!addNew}\n                        onClick={() => {\n                          if (\n                            parseFloat(debitState.amount.replace(/,/g, \"\")) <=\n                            0 ||\n                            isNaN(\n                              parseFloat(debitState.amount.replace(/,/g, \"\"))\n                            )\n                          ) {\n                            amountRef.current?.focus();\n                            return Swal.fire({\n                              position: \"center\",\n                              icon: \"warning\",\n                              title: \"Please provide amount!\",\n                              showConfirmButton: false,\n                              timer: 1500,\n                            });\n                          }\n                          let temp_id = \"\";\n                          debitState.amount = parseFloat(\n                            debitState.amount.replace(/,/g, \"\")\n                          ).toLocaleString(\"en-US\", {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2,\n                          });\n                          myAxios\n                            .post(\n                              `/task/accounting/get-drcode-drtitle-from-collection`,\n                              { code: debitState.payamentType },\n                              {\n                                headers: {\n                                  \"Content-Type\": \"application/json\",\n                                  Authorization: `Bearer ${user?.accessToken}`,\n                                },\n                              }\n                            )\n                            .then((res) => {\n                              const { Acct_Code, Acct_Title } =\n                                res?.data.data[0];\n                              setDebit((d: any) => {\n                                temp_id = generateID(\n                                  d.length > 0\n                                    ? (d[d.length - 1] as any).temp_id\n                                    : \"0\"\n                                );\n\n                                if (debitState.cashMode === \"edit\") {\n                                  d = d.filter(\n                                    (itms: any) =>\n                                      itms.temp_id !== debitState.cashID\n                                  );\n                                  temp_id = debitState.cashID;\n                                }\n\n                                const data = {\n                                  Payment: \"Cash\",\n                                  Amount: debitState.amount,\n                                  Check_No: \"\",\n                                  Check_Date: \"\",\n                                  Bank_Branch: \"\",\n                                  Acct_Code,\n                                  Acct_Title,\n                                  Deposit_Slip: \"\",\n                                  Cntr: \"\",\n                                  Remarks: \"\",\n                                  TC: debitState.payamentType,\n                                  Bank: \"\",\n                                  BankName: \"\",\n                                  Check_Remarks: \"\",\n                                  Branch: \"\",\n                                  temp_id,\n                                };\n\n                                d = [...d, data];\n                                d.sort((a: any, b: any) => {\n                                  const idA = parseInt(a.temp_id, 10);\n                                  const idB = parseInt(b.temp_id, 10);\n                                  if (idA < idB) {\n                                    return -1;\n                                  }\n                                  if (idA > idB) {\n                                    return 1;\n                                  }\n                                  return 0;\n                                });\n                                return d;\n                              });\n                              debitDispatch({\n                                type: \"UPDATE_FIELD\",\n                                field: \"amount\",\n                                value: parseFloat(\n                                  \"0\".replace(/,/g, \"\")\n                                ).toFixed(2),\n                              });\n                              debitDispatch({\n                                type: \"UPDATE_FIELD\",\n                                field: \"cashID\",\n                                value: \"\",\n                              });\n                              debitDispatch({\n                                type: \"UPDATE_FIELD\",\n                                field: \"cashMode\",\n                                value: \"add\",\n                              });\n                              tableDebit.current?.resetTableSelected();\n                            });\n                        }}\n                      >\n                        Save Debit\n                      </LoadingButton>\n                    )}\n                  </div>\n                )}\n              </div>\n              <UpwardTable\n                isLoading={loadingAddNew || loadingCollectionDataSearch}\n                ref={tableDebit}\n                rows={debit}\n                column={debitColumn}\n                width={width}\n                height={height}\n                dataReadOnly={true}\n                onSelectionChange={(selectedRow) => {\n                  const rowSelected = selectedRow[0];\n                  if (selectedRow.length > 0) {\n                    DebitSelectedChange(rowSelected);\n                  } else {\n                    modalDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"CheckIdx\",\n                      value: \"\",\n                    });\n                    modalDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"CheckMode\",\n                      value: \"\",\n                    });\n                    debitDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"cashID\",\n                      value: \"\",\n                    });\n                    debitDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"cashMode\",\n                      value: \"\",\n                    });\n                    debitDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"amount\",\n                      value: \"0.00\",\n                    });\n                  }\n                }}\n                onKeyDown={(row, key) => {\n                  if (key === \"Delete\" || key === \"Backspace\") {\n                    const rowSelected = row[0];\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `You won't to delete this?`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (result.isConfirmed) {\n                        return setDebit((d) => {\n                          d = d.filter((item: any) => {\n                            return item.temp_id !== rowSelected.temp_id;\n                          });\n                          return d;\n                        });\n                      }\n                    });\n                  }\n                }}\n                inputsearchselector=\".manok\"\n              />\n              <div style={{ width: \"100%\", marginTop: \"20px\" }}>\n                <DebitFooterComponent />\n              </div>\n\n            </fieldset>\n            <br />\n            <fieldset\n              style={{\n                boxSizing: \"border-box\",\n                border: \"1px solid #cbd5e1\",\n                borderRadius: \"5px\",\n                position: \"relative\",\n                height: \"460px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <legend>Payment Breakdown (Credit)</legend>\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                  flexDirection: \"column\",\n                  marginBottom: \"10px\"\n                }}\n              >\n                <div style={{ display: \"flex\", gap: \"10px\" }}>\n                  {paymentTypeLoading ? (\n                    <LoadingButton loading={paymentTypeLoading} />\n                  ) : (\n                    <Autocomplete\n                      freeSolo\n                      options={debitState.transaction_desc}\n                      value={creditState.transaction}\n                      onChange={(e, v: any) => {\n                        if (v) {\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"Code\",\n                            value: v.Acct_Code,\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"Title\",\n                            value: v.Acct_Title,\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"TC\",\n                            value: v.Code,\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"transaction\",\n                            value: v.label,\n                          });\n                        } else {\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"Code\",\n                            value: \"\",\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"Title\",\n                            value: \"\",\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"TC\",\n                            value: \"\",\n                          });\n                          creditDispatch({\n                            type: \"UPDATE_FIELD\",\n                            field: \"transaction\",\n                            value: \"\",\n                          });\n                        }\n                      }}\n                      onInput={(e: any) => {\n                        creditDispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"transaction\",\n                          value: e.target.value,\n                        });\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          // inputRef={(input) => {\n                          //   creditTransactionRef = input;\n                          // }}\n                          InputProps={{\n                            ...params.InputProps,\n                            inputRef: creditTransactionRef,\n                            style: { height: \"27px\", fontSize: \"14px\" },\n                          }}\n                          label=\"Transaction\"\n                        />\n                      )}\n                      sx={{\n                        flex: 1,\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                        },\n                        \".MuiInputBase-input\": {\n                          width: \"100% !important\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": {\n                          top: \"-5px\",\n                        },\n                        \".MuiAutocomplete-input \": {\n                          position: \"absolute\",\n                        },\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          wait(150).then(() => {\n                            creditAmountRef.current?.focus()\n                          })\n                        }\n                      }}\n                      size=\"small\"\n                      disabled={!addNew}\n                    />\n                  )}\n                  <TextField\n                    disabled={!addNew}\n                    name=\"amount\"\n                    label=\"Amount\"\n                    size=\"small\"\n                    value={creditState.amount}\n                    onChange={handleCreditInputChange}\n                    placeholder=\"0.00\"\n                    InputProps={{\n                      inputComponent: NumericFormatCustom as any,\n                      inputRef: creditAmountRef,\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    }}\n                    onBlur={() => {\n                      creditDispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"amount\",\n                        value: parseFloat(\n                          creditState.amount.replace(/,/g, \"\")\n                        ).toFixed(2),\n                      });\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        creditFaoRef.current?.focus()\n                      }\n                    }}\n                    sx={{\n                      width: \"160px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                  {isLoadingCreditClientIdsModal ?\n                    <LoadingButton loading={isLoadingCreditClientIdsModal} />\n                    :\n                    <FormControl\n                      sx={{\n                        width: \"150px\",\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                      }}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      disabled={!addNew}\n                    >\n                      <InputLabel htmlFor=\"fao\">FAO</InputLabel>\n                      <OutlinedInput\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                        inputRef={creditFaoRef}\n                        name=\"FAO_Name\"\n                        value={creditState.FAO_Name}\n                        onChange={handleCreditInputChange}\n                        id=\"fao\"\n                        onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            dispatch({\n                              type: \"UPDATE_FIELD\",\n                              field: \"isFao\",\n                              value: true,\n                            });\n                            return openCreditCliendIDsModal(creditState.FAO_Name);\n                          }\n                        }}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              disabled={!addNew}\n                              onClick={() => {\n                                dispatch({\n                                  type: \"UPDATE_FIELD\",\n                                  field: \"isFao\",\n                                  value: true,\n                                });\n                                openCreditCliendIDsModal(creditState.FAO_Name);\n                              }}\n                              edge=\"end\"\n                              color=\"secondary\"\n                            >\n                              <PersonSearchIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                        label=\"FAO\"\n                      />\n                    </FormControl>}\n                  <TextField\n                    disabled={!addNew}\n                    name=\"remarks\"\n                    label=\"Remarks\"\n                    size=\"small\"\n                    value={creditState.remarks ?? \"\"}\n                    onChange={handleCreditInputChange}\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        vatRef.current.focus()\n                      }\n                    }}\n                    InputProps={{\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                      inputRef: creditRemarksRef\n                    }}\n                    sx={{\n                      width: \"160px\",\n                      \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      columnGap: \"10px\",\n                    }}\n                  >\n                    <FormControl\n                      sx={{\n                        width: \"150px\",\n                        marginRight: \"10px\",\n                        minWidth: 150,\n                        \".MuiFormLabel-root\": {\n                          fontSize: \"14px\",\n                          background: \"white\",\n                          zIndex: 99,\n                          padding: \"0 3px\",\n                        },\n                        \".MuiFormLabel-root[data-shrink=false]\": { top: \"-1px\" },\n                      }}\n                    >\n                      <InputLabel id=\"payment-check\">VAT Type</InputLabel>\n                      <Select\n                        inputRef={vatRef}\n                        disabled={!addNew}\n                        labelId=\"payment-check\"\n                        value={creditState.option}\n                        onChange={handleCreditInputChange}\n                        autoWidth\n                        label=\"VAT Type\"\n                        size=\"small\"\n                        name=\"option\"\n                        sx={{\n                          height: \"27px\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        <MenuItem\n                          value={\"Vat\"}\n                          onKeyDown={(e) => {\n                            if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                              wait(150).then(() => {\n                                creditInvoiceRef.current?.focus()\n                              })\n                            }\n                          }}\n                        >VAT</MenuItem>\n                        <MenuItem value={\"Non-Vat\"} onKeyDown={(e) => {\n                          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                            wait(150).then(() => {\n                              creditInvoiceRef.current?.focus()\n                            })\n                          }\n                        }}>Non-VAT</MenuItem>\n                      </Select>\n                    </FormControl>\n\n                    <TextField\n                      disabled={!addNew || creditState.creditMode === \"\"}\n                      name=\"invoice\"\n                      label=\"Invoice\"\n                      size=\"small\"\n                      value={creditState.invoice}\n                      onChange={handleCreditInputChange}\n                      InputProps={{\n                        inputRef: creditInvoiceRef,\n                        style: { height: \"27px\", fontSize: \"14px\" },\n                      }}\n                      sx={{\n                        width: \"300px\",\n                        \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                        \".MuiFormLabel-root[data-shrink=false]\": {\n                          top: \"-5px\",\n                        },\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          const timeout = setTimeout(() => {\n                            creditSaveButton.current?.click();\n                            clearTimeout(timeout);\n                          }, 100);\n                        }\n                      }}\n                    />\n                    {creditState.creditMode === \"\" ? (\n                      <Button\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        variant=\"outlined\"\n                        onClick={() => {\n                          Object.entries(initialStateCredit).forEach(\n                            ([field, value]) => {\n                              creditDispatch({\n                                type: \"UPDATE_FIELD\",\n                                field,\n                                value,\n                              });\n                            }\n                          );\n                        }}\n                      >\n                        NEW\n                      </Button>\n                    ) : (\n                      <Button\n                        disabled={!addNew || creditState.creditMode === \"\"}\n\n                        ref={creditSaveButton}\n                        sx={{\n                          height: \"30px\",\n                          fontSize: \"11px\",\n                        }}\n                        color=\"success\"\n                        variant=\"outlined\"\n                        onClick={() => {\n                          if (\n                            creditState.transaction === \"\" ||\n                            creditState.transaction === null ||\n                            creditState.transaction === undefined\n                          ) {\n                            return CustomSwalAlertWarning(\n                              \"Please select a transaction!\",\n                              () => {\n                                wait(300).then(() => {\n                                  creditTransactionRef.current?.focus();\n                                });\n                              }\n                            );\n                          }\n\n                          if (\n                            debitState.transaction_desc.filter(\n                              (item: any) =>\n                                item.label === creditState.transaction\n                            ).length <= 0\n                          ) {\n                            return CustomSwalAlertWarning(\n                              \"Transaction not yet defined!\",\n                              () => {\n                                wait(300).then(() => {\n                                  creditTransactionRef.current?.focus();\n                                });\n                              }\n                            );\n                          }\n                          if (\n                            parseFloat(creditState.amount.replace(/,/g, \"\")) <=\n                            0 ||\n                            isNaN(\n                              parseFloat(creditState.amount.replace(/,/g, \"\"))\n                            )\n                          ) {\n                            return CustomSwalAlertWarning(\n                              \"Please provide amount!\",\n                              () => {\n                                wait(300).then(() => {\n                                  creditAmountRef.current?.focus();\n                                });\n                              }\n                            );\n                          }\n                          if (creditState.FAO_ID === \"\") {\n                            return CustomSwalAlertWarning(\n                              \"Please provide FAO!\",\n                              () => {\n                                wait(300).then(() => {\n                                  creditFaoRef.current?.focus();\n                                });\n                              }\n                            );\n                          }\n                          if (creditState.invoice === \"\") {\n                            return CustomSwalAlertWarning(\n                              \"Please provide invoice!\",\n                              () => {\n                                wait(300).then(() => {\n                                  creditInvoiceRef.current?.focus();\n                                });\n                              }\n                            );\n                          }\n\n                          if (creditState.invoice.length >= 200) {\n                            return CustomSwalAlertWarning(\n                              \"Invoice is too long!\",\n                              () => { }\n                            );\n                          }\n                          if (creditState.FAO_ID.length >= 200) {\n                            return CustomSwalAlertWarning(\n                              \"ID is too long!\",\n                              () => { }\n                            );\n                          }\n                          if (creditState.remarks.length >= 200) {\n                            return CustomSwalAlertWarning(\n                              \"Remarks is too long!\",\n                              () => { }\n                            );\n                          }\n                          if (creditState.amount.length >= 200) {\n                            return CustomSwalAlertWarning(\n                              \"Amount is too long!\",\n                              () => { }\n                            );\n                          }\n\n                          function onSaveTransaction() {\n                            creditState.amount = parseFloat(\n                              creditState.amount\n                            ).toLocaleString(\"en-US\", {\n                              style: \"decimal\",\n                              minimumFractionDigits: 2,\n                              maximumFractionDigits: 2,\n                            });\n                            const temp_id =\n                              parseInt(\n                                credit.length <= 0\n                                  ? \"0\"\n                                  : (credit[credit.length - 1] as any).temp_id\n                              ) + 1;\n\n                            const creditData = {\n                              transaction: creditState.transaction,\n                              amount: creditState.amount,\n                              Remarks: creditState.remarks,\n                              Code: creditState.Code,\n                              Title: creditState.Title,\n                              TC: creditState.TC,\n                              Account_No: creditState.FAO_ID,\n                              Name: creditState.FAO_Name,\n                              VATType: creditState.option,\n                              invoiceNo: creditState.invoice,\n                            };\n                            setCredit((d: any) => {\n                              if (creditState.creditMode === \"add\") {\n                                d = [...d, { temp_id, ...creditData }];\n                                return d;\n                              } else {\n                                const data = d.map((obj: any) => {\n                                  if (obj.temp_id === creditState.creditId) {\n                                    obj = { ...obj, ...creditData };\n                                  }\n                                  return obj;\n                                });\n                                return data;\n                              }\n                            });\n                            if (creditState.option === \"Vat\") {\n                              const taxableAmt =\n                                parseFloat(\n                                  creditState.amount.replace(/,/g, \"\")\n                                ) / 1.12;\n                              const inputTax = taxableAmt * 0.12;\n                              const newD = debitState.transaction_desc.filter(\n                                (item: any) => item.label === \"Output Tax\"\n                              )[0];\n                              const creditDataVat = {\n                                temp_id: temp_id + 1,\n                                transaction: \"Output Tax\",\n                                amount: inputTax.toFixed(2),\n                                Remarks: creditState.remarks,\n                                Code: newD.Acct_Code,\n                                Title: newD.Acct_Title,\n                                TC: newD.Code,\n                                Account_No: creditState.FAO_ID,\n                                Name: creditState.FAO_Name,\n                                VATType: creditState.option,\n                                invoiceNo: creditState.invoice,\n                              };\n                              setCredit((d: any) => {\n                                d = [...d, creditDataVat];\n                                return d;\n                              });\n                            }\n                            Swal.fire({\n                              text:\n                                creditState.creditMode === \"edit\"\n                                  ? \"Update Successfully\"\n                                  : \"Create Successfully\",\n                              icon: \"success\",\n                              showCancelButton: false,\n                              timer: 1500,\n                            }).then(() => {\n                              setNewStateValue(\n                                creditDispatch,\n                                initialStateCredit\n                              );\n                              tableCredit.current.resetTableSelected();\n                            });\n                          }\n                          if (creditState.creditMode === \"edit\") {\n                            return Swal.fire({\n                              title: \"Are you sure?\",\n                              text: `You won't to update this?`,\n                              icon: \"warning\",\n                              showCancelButton: true,\n                              confirmButtonColor: \"#3085d6\",\n                              cancelButtonColor: \"#d33\",\n                              confirmButtonText: \"Yes, update it!\",\n                            }).then((result) => {\n                              if (result.isConfirmed) {\n                                return onSaveTransaction();\n                              }\n                            });\n                          } else {\n                            onSaveTransaction();\n                          }\n                        }}\n                      >\n                        Save Credit\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <UpwardTable\n                isLoading={loadingAddNew || loadingCollectionDataSearch}\n                ref={tableCredit}\n                rows={credit}\n                column={creditColumn}\n                width={width}\n                height={height}\n                dataReadOnly={true}\n                onSelectionChange={(selectedRow) => {\n                  const rowSelected = selectedRow[0];\n                  if (selectedRow.length > 0) {\n                    const updateData = {\n                      creditMode: \"edit\",\n                      creditId: rowSelected.temp_id,\n                      transaction: rowSelected.transaction,\n                      amount: rowSelected.amount,\n                      remarks: rowSelected.Remarks,\n                      Code: rowSelected.Code,\n                      Title: rowSelected.Title,\n                      TC: rowSelected.TC,\n                      FAO_ID: rowSelected.Account_No,\n                      FAO_Name: rowSelected.Name,\n                      option: rowSelected.VATType,\n                      invoice: rowSelected.invoiceNo,\n                    };\n                    setNewStateValue(creditDispatch, updateData);\n                  } else {\n                    Object.entries(initialStateCredit).forEach(\n                      ([field, value]) => {\n                        creditDispatch({\n                          type: \"UPDATE_FIELD\",\n                          field,\n                          value,\n                        });\n                      }\n                    );\n                  }\n                }}\n                onKeyDown={(row, key) => {\n                  if (key === \"Delete\" || key === \"Backspace\") {\n                    const rowSelected = row[0];\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `You won't to delete this?`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (result.isConfirmed) {\n                        return setCredit((d) => {\n                          d = d.filter((item: any) => {\n                            return item.temp_id !== rowSelected.temp_id;\n                          });\n                          return d;\n                        });\n                      }\n                    });\n                  }\n                }}\n                inputsearchselector=\".manok\"\n              />\n              <div style={{ width: \"100%\", marginTop: \"10px\" }}>\n                <CreditFooterComponent />\n              </div>\n              {/* <div\n                style={{\n                  marginTop: \"10px\",\n                  width: \"100%\",\n                  position: \"relative\",\n                }}\n              >\n                <Box\n                  style={{\n                    height: \"410px\",\n                    width: \"100%\",\n                    overflowX: \"scroll\",\n                    position: \"absolute\",\n                  }}\n                >\n                  <Table\n                    ref={tableCredit}\n                    isLoading={loadingAddNew || loadingCollectionDataSearch}\n                    columns={creditColumn}\n                    rows={credit}\n                    table_id={\"temp_id\"}\n                    isSingleSelection={true}\n                    isRowFreeze={false}\n                    dataSelection={(selection, data, code) => {\n                      const rowSelected = data.filter(\n                        (item: any) => item.temp_id === selection[0]\n                      )[0];\n                      if (\n                        rowSelected === undefined ||\n                        rowSelected.length <= 0\n                      ) {\n                        Object.entries(initialStateCredit).forEach(\n                          ([field, value]) => {\n                            creditDispatch({\n                              type: \"UPDATE_FIELD\",\n                              field,\n                              value,\n                            });\n                          }\n                        );\n                        return;\n                      }\n                      const updateData = {\n                        creditMode: \"edit\",\n                        creditId: rowSelected.temp_id,\n                        transaction: rowSelected.transaction,\n                        amount: rowSelected.amount,\n                        remarks: rowSelected.Remarks,\n                        Code: rowSelected.Code,\n                        Title: rowSelected.Title,\n                        TC: rowSelected.TC,\n                        FAO_ID: rowSelected.Account_No,\n                        FAO_Name: rowSelected.Name,\n                        option: rowSelected.VATType,\n                        invoice: rowSelected.invoiceNo,\n                      };\n                      setNewStateValue(creditDispatch, updateData);\n\n                      if (code === \"Delete\" || code === \"Backspace\") {\n                        Swal.fire({\n                          title: \"Are you sure?\",\n                          text: `You won't to delete this?`,\n                          icon: \"warning\",\n                          showCancelButton: true,\n                          confirmButtonColor: \"#3085d6\",\n                          cancelButtonColor: \"#d33\",\n                          confirmButtonText: \"Yes, delete it!\",\n                        }).then((result) => {\n                          if (result.isConfirmed) {\n                            return setCredit((d) => {\n                              d = d.filter((item: any) => {\n                                return item.temp_id !== rowSelected.temp_id;\n                              });\n                              return d;\n                            });\n                          }\n                        });\n                      }\n                    }}\n                    footerChildren={() => {\n                      return <CreditFooterComponent />;\n                    }}\n                    footerPaginationPosition={\"left-right\"}\n                    showFooterSelectedCount={false}\n                  />\n                </Box>\n              </div> */}\n            </fieldset>\n          </div>\n        </div>\n        {ModalClientIDs}\n        {ModalSearchCollection}\n        {ModalSearchBanks}\n        {ModalSearchCheckList}\n        {ModalCreditClientIDs}\n        <Modal\n          open={openPdcInputModal}\n          onClose={() => {\n            setOpenPdcInputModal(false);\n            tableDebit.current?.resetTableSelected();\n          }}\n          aria-labelledby=\"modal-modal-title\"\n          aria-describedby=\"modal-modal-description\"\n        >\n          <Box\n            sx={{\n              position: \"absolute\" as \"absolute\",\n              top: \"50%\",\n              left: \"50%\",\n              transform: \"translate(-50%, -50%)\",\n              width: 700,\n              bgcolor: \"background.paper\",\n              p: 4,\n            }}\n          >\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n              Check Detail\n            </Typography>\n            <div\n              style={{\n                display: \"flex\",\n                columnGap: \"10px\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                }}\n              >\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check No.\"\n                  name=\"Check_No\"\n                  value={modalState.Check_No}\n                  onChange={handleModalInputChange}\n                  disabled={!addNew || modalState.CheckIdx !== \"\"}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputRef: checkNoRef,\n                  }}\n                  sx={{\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                {isLoadingModalSearchbanks ? (\n                  <LoadingButton loading={isLoadingModalSearchbanks} />\n                ) : (\n                  <FormControl\n                    sx={{\n                      width: \"100%\",\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={!addNew}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      inputRef={checkBankRef}\n                      disabled={!addNew}\n                      fullWidth\n                      label=\"Bank\"\n                      name=\"BankName\"\n                      value={modalState.BankName}\n                      onChange={handleModalInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          return openModalSearchBanks(modalState.BankName);\n                        }\n                      }}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={!addNew}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() =>\n                              openModalSearchBanks(modalState.BankName)\n                            }\n                          >\n                            <PolicyIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Branch\"\n                  value={modalState.Branch}\n                  onChange={handleModalInputChange}\n                  disabled={!addNew}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputRef: checkBranchRef,\n                  }}\n                  sx={{\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Remarks\"\n                  name=\"Check_Remarks\"\n                  value={modalState.Check_Remarks}\n                  onChange={handleModalInputChange}\n                  disabled={!addNew}\n                  rows={4}\n                  multiline\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"auto\", fontSize: \"14px\" },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <CustomDatePicker\n                  disabled={!addNew}\n                  label=\"Check Dated\"\n                  onChange={(value: any) => {\n                    modalDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Check_Date\",\n                      value: value,\n                    });\n                  }}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  value={new Date(modalState.Check_Date)}\n                  inputRef={checkDateRef}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n                <TextField\n                  required\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Amount\"\n                  name=\"Check_Amnt\"\n                  value={modalState.Check_Amnt}\n                  onChange={handleModalInputChange}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  disabled={!addNew}\n                  placeholder=\"0.00\"\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputComponent: NumericFormatCustom as any,\n                    inputRef: checkAmountRef,\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  onBlur={() => {\n                    modalDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Check_Amnt\",\n                      value: parseFloat(\n                        modalState.Check_Amnt.replace(/,/g, \"\")\n                      ).toFixed(2),\n                    });\n                  }}\n                />\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"flex-end\",\n                gap: \"20px\",\n              }}\n            >\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveActionButtonRef}\n                color=\"success\"\n                variant=\"contained\"\n                autoFocus={modalState.CheckIdx !== \"\"}\n                onClick={() => {\n                  if (modalState.Check_No === \"\") {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Please provide check!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (\n                    parseFloat(modalState.Check_Amnt.replace(/,/g, \"\")) <= 0 ||\n                    isNaN(parseFloat(modalState.Check_Amnt.replace(/,/g, \"\")))\n                  ) {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Please provide check amount!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.BankName === \"\") {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Please provide bank!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.Branch === \"\") {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Please provide branch!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.BankName.length >= 200) {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Bank Name is too long!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.Branch.length >= 200) {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Branch is too long!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.Check_No.length >= 200) {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Check No is too long!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      }\n                    );\n                  }\n                  if (modalState.Check_Amnt.length >= 200) {\n                    setOpenPdcInputModal(false);\n                    return CustomSwalAlertWarning(\n                      \"Check Ammount is too long!\",\n                      (d) => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      }\n                    );\n                  }\n\n                  modalState.Check_Amnt = parseFloat(\n                    modalState.Check_Amnt.replace(/,/g, \"\")\n                  ).toLocaleString(\"en-US\", {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  });\n\n                  function addPDCCheck() {\n                    let temp_id = \"\";\n                    myAxios\n                      .post(\n                        `/task/accounting/get-drcode-drtitle-from-collection`,\n                        { code: debitState.payamentType },\n                        {\n                          headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${user?.accessToken}`,\n                          },\n                        }\n                      )\n                      .then((res) => {\n                        const { Acct_Code, Acct_Title } = res?.data.data[0];\n                        setDebit((d: any) => {\n                          temp_id = generateID(\n                            d.length > 0\n                              ? (d[d.length - 1] as any).temp_id\n                              : \"0\"\n                          );\n\n                          if (modalState.CheckMode === \"edit\") {\n                            d = d.filter(\n                              (itms: any) =>\n                                itms.temp_id !== modalState.CheckIdx.toString()\n                            );\n                            temp_id = modalState.CheckIdx.toString();\n                          }\n\n                          const data = {\n                            Payment: \"Check\",\n                            Amount: modalState.Check_Amnt,\n                            Check_No: modalState.Check_No,\n                            Check_Date: new Date(\n                              modalState.Check_Date\n                            ).toLocaleDateString(\"en-US\", {\n                              month: \"2-digit\",\n                              day: \"2-digit\",\n                              year: \"numeric\",\n                            }),\n                            Bank_Branch: `${modalState.BankName} / ${modalState.Branch}`,\n                            Acct_Code,\n                            Acct_Title,\n                            Deposit_Slip: \"\",\n                            Cntr: \"\",\n                            Remarks: modalState.Check_Remarks,\n                            TC: debitState.payamentType,\n                            temp_id: temp_id,\n                            Bank: modalState.BankCode,\n                            BankName: modalState.BankName,\n                            Check_Remarks: modalState.Check_Remarks,\n                            Branch: modalState.Branch,\n                          };\n                          d = [...d, data];\n                          d.sort((a: any, b: any) => {\n                            const idA = parseInt(a.temp_id, 10);\n                            const idB = parseInt(b.temp_id, 10);\n                            if (idA < idB) {\n                              return -1;\n                            }\n                            if (idA > idB) {\n                              return 1;\n                            }\n                            return 0;\n                          });\n\n                          return d;\n                        });\n                      });\n                  }\n                  if (modalState.CheckMode === \"edit\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title:\n                        \"Are you sure? You want to Update this \" +\n                        modalState.Check_No +\n                        \" Check No.\",\n                      text: \"You won't be able to revert this!\",\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                      focusConfirm: true,\n                    }).then((result) => {\n                      if (result.isConfirmed) {\n                        addPDCCheck();\n                        Swal.fire({\n                          text: \"Update Successfully\",\n                          icon: \"success\",\n                          showCancelButton: false,\n                          timer: 1500,\n                          didClose() {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkModalSaveActionButtonRef.current?.focusVisible();\n                            tableDebit.current?.resetTableSelected();\n                          },\n                        });\n                      }\n                    });\n                  } else {\n                    if (\n                      debit.filter(\n                        (item: any) => item.Check_No === modalState.Check_No\n                      ).length > 0\n                    ) {\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      return Swal.fire({\n                        text: `${modalState.Check_No} is already Exist!`,\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                    }\n\n                    addPDCCheck();\n                    modalDispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Check_No\",\n                      value: incrementCheckNo(modalState.Check_No),\n                    });\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      text: \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                      didClose() {\n                        flushSync(() => {\n                          setOpenPdcInputModal(false);\n                        });\n                        checkModalSaveActionButtonRef.current?.focusVisible();\n                        tableDebit.current?.resetTableSelected();\n                      },\n                    });\n                    return;\n                  }\n                }}\n              >\n                Save\n              </Button>\n              <Button\n                color=\"warning\"\n                variant=\"contained\"\n                onClick={() => {\n                  setOpenPdcInputModal(false);\n                  tableDebit.current?.resetTableSelected();\n                }}\n              >\n                Cancel\n              </Button>\n              {modalState.CheckIdx !== \"\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    DebitDeleteRow({\n                      Check_No: modalState.Check_No,\n                      temp_id: modalState.CheckIdx,\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n            </div>\n          </Box>\n        </Modal>\n      </CollectionContext.Provider>\n      {(loadingAddNew || isLoadingModalSearchCollection) && <div className=\"loading-component\"><div className=\"loader\"></div></div>}\n\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nfunction DebitFooterComponent() {\n  const { debit } = useContext(CollectionContext);\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <strong style={{ fontSize: \"14px\" }}>\n        Total:{\" \"}\n        {debit\n          .reduce(\n            (sum, obj) => sum + parseFloat(obj.Amount.replace(/,/g, \"\")),\n            0\n          )\n          .toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })}\n      </strong>\n    </Box>\n  );\n}\nfunction CreditFooterComponent() {\n  const { credit } = useContext(CollectionContext);\n  return (\n    <Box\n      sx={{\n        px: 2,\n        py: 1,\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n      }}\n    >\n      <strong style={{ fontSize: \"14px\" }}>\n        Total:{\" \"}\n        {credit\n          .reduce(\n            (sum, obj) => sum + parseFloat(obj.amount.replace(/,/g, \"\")),\n            0\n          )\n          .toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })}\n      </strong>\n    </Box>\n  );\n}\nfunction generateID(prevID: string) {\n  const nextID = parseInt(prevID, 10) + 1;\n  return String(nextID).padStart(3, \"0\");\n}\n"],"names":["_ref","_mutationFn","link","uniqueId","queryKey","responseDataKey","columns","_ref$onSelected","onSelected","_ref$onRemoveSelected","onRemoveSelected","_ref$onSuccess","onSuccess","searchRef","onCellKeyDown","onCloseFunction","isRowSelectable","_useContext","useContext","AuthContext","myAxios","user","_useState","useState","_useState2","_slicedToArray","openSearchCollection","setOpenSearchCollection","_useState3","_useState4","rows","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variables","wrap","_context","prev","next","get","concat","queryWithVariable","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","res","response","data","isLoading","mutate","openModal","search","length","undefined","flushSync","current","value","queryExtraBySearch","then","success","alert","message","focus","closeModal","_searchRef$current","ModalComponent","_jsx","ModalWithTable","showModal","onCloseModal","_searchRef$current2","onClickCloseIcon","_searchRef$current3","searchOnChange","e","target","onSearchKeyEnter","height","onSelectionChange","rowSelectionModel","selectedIDs","Set","selectedRowData","filter","row","has","toString","id","CollectionContext","createContext","debit","credit","initialState","ORNo","PNo","IDNo","Date","Name","Remarks","creditUpdateMode","creditCheckIdx","creditCheckID","PDC_Status","Deposit_Slip","DateDeposit","OR_No","searchCheckedList","bank_transaction","isFao","mode","initialStateDeposit","cashID","cashMode","payamentType","amount","transaction_desc","debitHasSelected","initialStateCredit","creditMode","creditId","transaction","FAO_Name","FAO_ID","remarks","option","invoice","Code","Title","TC","modalInitialState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","CheckMode","reducer","state","action","type","_objectSpread","_defineProperty","field","addCollectionQueryKey","queryMutationKeyCollectionDataSearch","debitColumn","headerName","flex","width","hide","creditColumn","queryKeyPaymentType","queryKeyNewORNumber","Collections","_queryFn","_queryFn2","_mutationFn2","_mutationFn3","_creditState$remarks","setCredit","setDebit","_useState5","_useState6","openPdcInputModal","setOpenPdcInputModal","_useUrlParams","useUrlParams","searchParams","setSearchParams","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","debitState","debitDispatch","_useReducer5","_useReducer6","creditState","creditDispatch","_useReducer7","_useReducer8","modalState","modalDispatch","_useState7","_useState8","save","setSave","_useState9","_useState10","addNew","setAddNew","_useState11","_useState12","hasSelected","setHasSelected","cashButtonSave","useRef","checkModalSaveButton","checkModalSaveActionButtonRef","creditSaveButton","saveCollectionButtonRef","pdcSearchInput","collectionSearchInput","bankSearchInput","checkListSearchInput","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","paymentTypeRef","amountRef","creditTransactionRef","creditAmountRef","creditFaoRef","creditInvoiceRef","pnClientORRef","queryClient","useQueryClient","dateRef","pdcAddbtnRef","tableDebit","tableCredit","creditRemarksRef","vatRef","_useQueryModalTable","useQueryModalTable","url","queryUrlName","_selectedRowData$0$Na","ID","closeCliendIDsModal","wait","_paymentTypeRef$curre","ModalClientIDs","openCliendIDsModal","isLoadingClientIdsModal","_useQueryModalTable2","_selectedRowData$0$Na2","closeCreditCliendIDsModal","_creditRemarksRef$cur","ModalCreditClientIDs","openCreditCliendIDsModal","isLoadingCreditClientIdsModal","_useQueryModalTable3","mutateCollectionDataSearch","ModalSearchCollection","openModalSearchCollection","closeModalSearchCollection","isLoadingModalSearchCollection","_useQueryModalTable4","Bank","Bank_Code","closeModalSearchBanks","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useMutationModalTabl","useMutationModalTable","items","map","includes","post","code","_res$data","console","log","_res$data$data$","Acct_Code","Acct_Title","d","lastID","parseInt","temp_id","_toConsumableArray","Payment","Amount","Bank_Branch","Cntr","closeModalSearchCheckList","openModalSearchCheckList","params","ModalSearchCheckList","isLoadingModalSearchCheckList","mutateClientCheckedList","_useQuery","useQuery","queryFn","refetchOnWindowFocus","transactionDesc","paymentTypeLoading","_useQuery2","_callee2","_context2","_response$data","_response$data2","collectionID","NewORNoLoading","refetchNewOR","refetch","_callee3","_context3","dataCollection","collection","OR_Date","Date_OR","ClientID","ID_No","selectedSearchState","Short","isValidDate","dateString","date","isNaN","getTime","i","Debit","push","toLocaleDateString","DRCode","DRTitle","SlipCode","DRRemarks","Purpose","Credit","CRCode","CRTitle","CRLoanID","CRLoanName","CRVatType","CRInvoiceNo","CRRemarks","Account_No","VATType","CRVATType","invoiceNo","setNewStateValue","loadingCollectionDataSearch","_useMutation2","_x2","_callee4","_context4","invalidateQueries","Swal","position","icon","title","showConfirmButton","timer","loadingAddNew","_useMutation3","_x3","_callee5","_context5","data1","localStorage","removeItem","setItem","JSON","stringify","department","window","open","printOR","mutataPrint","isLoadingPrint","handleInputChange","_e$target","name","handleDebitInputChange","_e$target2","handleCreditInputChange","_e$target3","handleModalInputChange","_e$target4","CustomSwalAlertWarning","label","cb","text","showCancelButton","innerWidth","innerHeight","_jsxs","style","display","flexDirection","children","Provider","Box","sx","theme","alignItems","columnGap","breakpoints","down","marginBottom","LoadingButton","loading","TextField","size","onChange","onKeyDown","preventDefault","InputProps","fontSize","top","Button","variant","startIcon","AddIcon","onClick","set","ref","color","_paymentTypeRef$curre2","_creditTransactionRef","reduce","sum","obj","parseFloat","replace","newState","codeCondfirmationAlert","isUpdate","userCodeConfirmation","saveCondfirmationAlert","isConfirm","disabled","SaveIcon","CircularProgress","green","left","marginTop","marginLeft","CloseIcon","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","rowGap","gap","padding","FormControl","background","zIndex","required","InputLabel","htmlFor","OutlinedInput","readOnly","_dateRef$current","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","textField","InputLabelProps","inputRef","fullWidth","_pnClientORRef$curren","PersonSearchIcon","overflow","boxSizing","border","borderRadius","marginRight","minWidth","Select","labelId","autoWidth","MenuItem","_pdcAddbtnRef$current","_amountRef$current","_pdcAddbtnRef$current2","_amountRef$current2","_checkNoRef$current","getLastCheck_No","newData","incrementCheckNo","placeholder","inputComponent","NumericFormatCustom","onBlur","toFixed","_cashButtonSave$curre","click","_amountRef$current3","toLocaleString","minimumFractionDigits","maximumFractionDigits","_tableDebit$current2","_res$data$data$2","generateID","itms","sort","a","b","idA","idB","resetTableSelected","UpwardTable","column","dataReadOnly","selectedRow","rowSelected","_checkModalSaveAction","focusVisible","DebitSelectedChange","key","item","inputsearchselector","DebitFooterComponent","Autocomplete","freeSolo","options","v","onInput","renderInput","_creditAmountRef$curr","_creditFaoRef$current","justifyContent","_creditInvoiceRef$cur","_creditInvoiceRef$cur2","timeout","setTimeout","_creditSaveButton$cur","clearTimeout","Object","entries","forEach","_ref3","_ref4","_creditTransactionRef2","_creditTransactionRef3","_creditAmountRef$curr2","_creditFaoRef$current2","_creditInvoiceRef$cur3","onSaveTransaction","creditData","inputTax","newD","creditDataVat","updateData","_ref5","_ref6","CreditFooterComponent","Modal","onClose","_tableDebit$current3","transform","bgcolor","p","Typography","component","_checkModalSaveButton","PolicyIcon","_checkModalSaveButton2","multiline","_checkModalSaveButton3","_checkModalSaveButton4","_checkModalSaveButton5","autoFocus","_checkNoRef$current2","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre","_checkBankRef$current2","_checkBranchRef$curre2","_checkBranchRef$curre3","_checkBranchRef$curre4","addPDCCheck","_res$data$data$3","month","day","year","focusConfirm","didClose","_checkModalSaveAction2","_tableDebit$current4","_checkModalSaveAction3","_tableDebit$current5","_tableDebit$current6","_tableDebit$current","className","_ref7","_ref8","px","py","prevID","nextID","String","padStart"],"sourceRoot":""}