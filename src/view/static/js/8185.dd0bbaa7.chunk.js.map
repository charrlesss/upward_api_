{"version":3,"file":"static/js/8185.dd0bbaa7.chunk.js","mappings":"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","sources":["components/UpwardFields.tsx","components/UpwardTable.tsx","hooks/useUpwardTableModal.tsx","feautures/Admin/Task/Accounting/PostDateChecks.tsx"],"sourcesContent":["import { HtmlHTMLAttributes, InputHTMLAttributes, useId } from \"react\";\r\nimport \"../style/design.css\";\r\n\r\nexport function TextInput({\r\n  input,\r\n  label,\r\n  inputRef,\r\n}: {\r\n  inputRef?: React.RefObject<HTMLInputElement>;\r\n  labelRef?: React.RefObject<HTMLLabelElement>;\r\n  input: InputHTMLAttributes<HTMLInputElement>;\r\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\r\n}) {\r\n  const id = useId();\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"18px\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <label {...label} htmlFor={id}>\r\n        {label.title}\r\n      </label>\r\n      <input\r\n        ref={inputRef}\r\n        id={id}\r\n        {...input}\r\n        style={{\r\n          height: \"18px\",\r\n          ...input.style,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SelectInput({\r\n  select,\r\n  label,\r\n  selectRef,\r\n  datasource = [],\r\n  values = \"\",\r\n  display = \"\",\r\n}: {\r\n  selectRef?: React.RefObject<HTMLSelectElement>;\r\n  labelRef?: React.RefObject<HTMLLabelElement>;\r\n  select: InputHTMLAttributes<HTMLSelectElement>;\r\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\r\n  datasource: Array<any>;\r\n  values: string;\r\n  display: string;\r\n}) {\r\n  const id = useId();\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"18px\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <label {...label} htmlFor={id}>\r\n        {label.title}\r\n      </label>\r\n      <select\r\n        {...select}\r\n        ref={selectRef}\r\n        className=\"select\"\r\n        style={{\r\n          height: \"18px\",\r\n          ...select.style,\r\n        }}\r\n      >\r\n        {datasource.map((itm, idx) => {\r\n          return (\r\n            <option key={idx} value={itm[values]}>\r\n              {itm[display]}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ButtonField({\r\n  buttonRetRef,\r\n  button,\r\n  tooltipText = \"\",\r\n  children,\r\n  disabled = false,\r\n}: {\r\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\r\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\r\n  tooltipText: string;\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n}) {\r\n  return (\r\n    <div className=\"tooltip\">\r\n      <button\r\n        disabled={disabled}\r\n        {...button}\r\n        ref={buttonRetRef}\r\n        style={{ ...button.style, background:!disabled ? \"transparent\" : \"#f1f1f1\" }}\r\n        className=\"tooltip-button\"\r\n      >\r\n        {children}\r\n      </button>\r\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\r\n    </div>\r\n  );\r\n}\r\n","import React, {\r\n  useState,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\n\r\nimport \"../style/datagridview.css\";\r\n\r\ninterface UpwardTablePropsType {\r\n  rows: Array<any>;\r\n  column: Array<any>;\r\n  width: number;\r\n  height: number;\r\n  dataReadOnly: boolean;\r\n  onSelectionChange?: (row: Array<any>) => void;\r\n  onKeyDown?: (row: Array<any>, key: string) => void;\r\n  isMultipleSelect?: boolean;\r\n  freeze?: boolean;\r\n  inputsearchselector?: string;\r\n  isRowSelectable?: boolean;\r\n  unSelectable?: (row: any) => boolean;\r\n  writeFooter?: (row: any) => React.ReactNode;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst UpwardTable = forwardRef(\r\n  (\r\n    {\r\n      rows,\r\n      column,\r\n      width,\r\n      height,\r\n      dataReadOnly,\r\n      onSelectionChange = () => {},\r\n      isMultipleSelect = false,\r\n      freeze = false,\r\n      onKeyDown,\r\n      inputsearchselector = \".search-input-up-on-key-down\",\r\n      isRowSelectable = true,\r\n      unSelectable = () => false,\r\n      writeFooter = () => null,\r\n      isLoading = false,\r\n    }: UpwardTablePropsType,\r\n    UpwardTableRef\r\n  ) => {\r\n    const onSelectionChangeRef = useRef(onSelectionChange);\r\n    const onKeyDownRef = useRef(onKeyDown);\r\n    const [columns, setColumns] = useState(column.filter((itm) => !itm.hide));\r\n    const [hoveredColumn, setHoveredColumn] = useState(null);\r\n    const [selectedRows, setSelectedRows] = useState<Array<number>>([0]);\r\n    const [lastSelectedRowIndex, setLastSelectedRowIndex] = useState(0);\r\n    const [selectedItems, setSelectedItems] = useState<Array<number>>([]);\r\n    const divRef = useRef<HTMLDivElement>(null);\r\n\r\n    const startResize = (index: any, e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const startX = e.clientX;\r\n      const startWidth = columns[index].width;\r\n\r\n      const doDrag = (moveEvent: any) => {\r\n        const newWidth = startWidth + (moveEvent.clientX - startX);\r\n        const updatedColumns = [...columns];\r\n        updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\r\n        setColumns(updatedColumns);\r\n      };\r\n\r\n      const stopDrag = () => {\r\n        document.removeEventListener(\"mousemove\", doDrag);\r\n        document.removeEventListener(\"mouseup\", stopDrag);\r\n      };\r\n\r\n      document.addEventListener(\"mousemove\", doDrag);\r\n      document.addEventListener(\"mouseup\", stopDrag);\r\n    };\r\n    const handleMouseEnter = (index: any) => {\r\n      setHoveredColumn(index); // Set the hovered column index\r\n    };\r\n    const handleMouseLeave = () => {\r\n      setHoveredColumn(null); // Reset hovered column index\r\n    };\r\n    const handleRowClick = (\r\n      rowIndex: any,\r\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n    ) => {\r\n      function getIndexAndData(selectedRowData: Array<any>) {\r\n        const filterSelectrowData = selectedRowData.map((d, idx) => {\r\n          if (!unSelectable(d)) {\r\n            return { idx, data: d };\r\n          }\r\n          return null;\r\n        });\r\n        const removeNullValue = filterSelectrowData.filter((d) => d !== null);\r\n        const data = removeNullValue.map((itm: any) => itm.data);\r\n        const newSelectedRowsFiltered = removeNullValue.map(\r\n          (itm: any) => itm.idx\r\n        );\r\n        return { newSelectedRowsFiltered, data };\r\n      }\r\n\r\n      if (!isMultipleSelect) {\r\n        // Single selection mode\r\n        setSelectedRows([rowIndex]);\r\n      } else {\r\n        // Multiple selection mode\r\n        if (event.shiftKey && lastSelectedRowIndex !== null) {\r\n          // Shift + Click: Select range between last clicked row and current clicked row\r\n          const rangeStart = Math.min(lastSelectedRowIndex, rowIndex);\r\n          const rangeEnd = Math.max(lastSelectedRowIndex, rowIndex);\r\n          const newSelectedRows: Array<number> = [];\r\n          for (let i = rangeStart; i <= rangeEnd; i++) {\r\n            if (!selectedRows.includes(i)) {\r\n              newSelectedRows.push(i);\r\n            }\r\n          }\r\n\r\n          let selectedItemsParams: Array<number> = [\r\n            ...selectedItems,\r\n            ...newSelectedRows,\r\n          ];\r\n\r\n          setSelectedRows([...selectedRows, ...newSelectedRows]);\r\n          const selectedRowData = rows.filter((d, idx) =>\r\n            selectedItemsParams.includes(idx)\r\n          );\r\n          const { newSelectedRowsFiltered, data } =\r\n            getIndexAndData(selectedRowData);\r\n\r\n          setSelectedItems(newSelectedRowsFiltered);\r\n          onSelectionChangeRef.current(data);\r\n        } else if (event.ctrlKey || event.metaKey) {\r\n          // Ctrl (or Cmd on macOS) + Click: Toggle row selection\r\n          if (selectedRows.includes(rowIndex) && !freeze) {\r\n            setSelectedRows(selectedRows.filter((i) => i !== rowIndex));\r\n            setSelectedItems((d) => {\r\n              d = d.filter((i) => i !== rowIndex);\r\n              return d;\r\n            });\r\n            let selectedItemsParams: Array<number> = selectedItems.filter(\r\n              (i) => i !== rowIndex\r\n            );\r\n            const selectedRowData = rows.filter((d, idx) =>\r\n              selectedItemsParams.includes(idx)\r\n            );\r\n\r\n            setSelectedItems(selectedItemsParams);\r\n            onSelectionChangeRef.current(selectedRowData);\r\n          } else {\r\n            setSelectedRows([...selectedRows, rowIndex]);\r\n            setSelectedItems((d) => {\r\n              d.push(rowIndex);\r\n              return d;\r\n            });\r\n            let selectedItemsParams: Array<number> = [\r\n              ...selectedItems,\r\n              rowIndex,\r\n            ];\r\n\r\n            const selectedRowData = rows.filter((d, idx) =>\r\n              selectedItemsParams.includes(idx)\r\n            );\r\n\r\n            setSelectedItems(selectedItemsParams);\r\n            onSelectionChangeRef.current(selectedRowData);\r\n          }\r\n        } else {\r\n          // Regular click in multiple selection mode: Single click to select a row\r\n          setSelectedRows([rowIndex]);\r\n        }\r\n      }\r\n      setLastSelectedRowIndex(rowIndex); // Update the last selected index\r\n    };\r\n    const handleRowDoubleClick = (\r\n      rowIndex: any,\r\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n    ) => {\r\n      const row = rows[rowIndex];\r\n      if (unSelectable(row)) return;\r\n      if (!isRowSelectable) return;\r\n\r\n      let selectedItemsParams: Array<number> = [];\r\n\r\n      if (selectedItems.includes(rowIndex) && !freeze) {\r\n        selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\r\n        setSelectedItems(selectedItemsParams);\r\n        const selectedRowData = rows.filter((d, idx) =>\r\n          selectedItemsParams.includes(idx)\r\n        );\r\n        onSelectionChangeRef.current(selectedRowData);\r\n\r\n        return;\r\n      }\r\n\r\n      if (isMultipleSelect) {\r\n        selectedItemsParams = [...selectedItems, rowIndex];\r\n      } else {\r\n        selectedItemsParams = [rowIndex];\r\n      }\r\n\r\n      setSelectedItems(selectedItemsParams);\r\n      const selectedRowData = rows.filter((d, idx) =>\r\n        selectedItemsParams.includes(idx)\r\n      );\r\n      onSelectionChangeRef.current(selectedRowData);\r\n    };\r\n    const handleKeyDown = (e: any) => {\r\n      if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\r\n        e.preventDefault();\r\n        if (!isRowSelectable) return;\r\n\r\n        let selectedItemsParams: Array<number> = [];\r\n        const rowIndex = selectedRows[selectedRows.length - 1];\r\n        if (isMultipleSelect) {\r\n          selectedItemsParams = [...selectedItems, ...selectedRows];\r\n        } else {\r\n          selectedItemsParams = [rowIndex];\r\n        }\r\n        const row = rows[selectedItemsParams[selectedItemsParams.length - 1]];\r\n        if (unSelectable(row)) {\r\n          return;\r\n        }\r\n\r\n        if (selectedItems.includes(rowIndex) && !freeze) {\r\n          selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\r\n          setSelectedItems(selectedItemsParams);\r\n          onSelectionChangeRef.current([]);\r\n          return;\r\n        }\r\n\r\n        setSelectedItems(selectedItemsParams);\r\n        onSelectionChangeRef.current([row]);\r\n      } else if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setSelectedRows((prevIndex: any) => {\r\n          if (prevIndex[prevIndex.length - 1] === null) return [0];\r\n          if (prevIndex[prevIndex.length - 1] >= rows.length - 1) {\r\n            return [rows.length - 1];\r\n          }\r\n          const newPrevIndex = prevIndex[prevIndex.length - 1] + 1;\r\n          const row = document.querySelector(`.row-${newPrevIndex}`);\r\n          row?.querySelector(\"input\")?.focus();\r\n\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n          return [newPrevIndex];\r\n        });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n\r\n        if (selectedRows[selectedRows.length - 1] === 0) {\r\n          const input = document.querySelector(\r\n            inputsearchselector\r\n          ) as HTMLInputElement;\r\n          if (input && input.tagName === \"INPUT\") {\r\n            input?.focus();\r\n          } else if (input && input.tagName === \"DIV\") {\r\n            const divInput = document.querySelector(\r\n              `${inputsearchselector} input`\r\n            ) as HTMLInputElement;\r\n\r\n            divInput?.focus();\r\n          }\r\n        }\r\n\r\n        setSelectedRows((prevIndex: any) => {\r\n          if (prevIndex[prevIndex.length - 1] === 0) return [0];\r\n          const newPrevIndex = prevIndex[prevIndex.length - 1] - 1;\r\n          const row = document.querySelector(`.row-${newPrevIndex}`);\r\n\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n          row?.querySelector(\"input\")?.focus();\r\n          return [newPrevIndex];\r\n        });\r\n      } else if (e.key === \"Delete\" || e.key === \"Backspace\") {\r\n        if (!isRowSelectable) return;\r\n\r\n        const selectedRowData = rows.filter((d, idx) =>\r\n          selectedRows.includes(idx)\r\n        );\r\n\r\n        if (onKeyDownRef?.current) {\r\n          onKeyDownRef?.current(selectedRowData, e.key);\r\n        }\r\n      }\r\n    };\r\n    useImperativeHandle(UpwardTableRef, () => ({\r\n      resetTableSelected: () => {\r\n        setSelectedRows([0]);\r\n        setLastSelectedRowIndex(0);\r\n        setSelectedItems([]);\r\n        if (rows.length > 0) {\r\n          const row = document.querySelector(`.row-${0}`);\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n        }\r\n      },\r\n      getSelectedRows: () => {\r\n        return rows.filter((d, idx) => selectedItems.includes(idx));\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        onKeyDown={handleKeyDown}\r\n      >\r\n        <div className=\"table-frame-color\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: `${width - 10}px        `,\r\n              height: `${height - 135}px`,\r\n            }}\r\n            className=\"table-frame\"\r\n          >\r\n            <div className=\"table-panel\">\r\n              <div ref={divRef} className={`grid-container `} tabIndex={-1}>\r\n                <div\r\n                  className=\"grid-row grid-header\"\r\n                  style={{\r\n                    position: \"sticky\",\r\n                    zIndex: \"10\",\r\n                    top: \"-1px\",\r\n                    background: \"white\",\r\n                  }}\r\n                >\r\n                  {columns.map((col: any, index: number) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`grid-cell header-cell ${\r\n                        hoveredColumn === index ? `highlight-column` : \"\"\r\n                      }\r\n                      \r\n                      `} // Add the class if hovered\r\n                      style={{\r\n                        width: col.width,\r\n                        height: \"20px\",\r\n                        textAlign: col.type === \"number\" ? \"center\" : \"left\",\r\n                      }}\r\n                    >\r\n                      <input\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        defaultValue={col.headerName}\r\n                        readOnly\r\n                        onChange={(e) => {}}\r\n                      />\r\n                      <div\r\n                        className=\"resize-handle\"\r\n                        onMouseDown={(e) => startResize(index, e)}\r\n                        onMouseEnter={(e) => {\r\n                          e.preventDefault();\r\n                          handleMouseEnter(index);\r\n                        }} // On hover\r\n                        onMouseLeave={(e) => {\r\n                          e.preventDefault();\r\n                          handleMouseLeave();\r\n                        }} // On mouse leave\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                {rows.map((row: any, rowIndex: any) => (\r\n                  <div\r\n                    className={`grid-row row-${rowIndex}`} // Highlight selected row\r\n                    key={rowIndex}\r\n                    onClick={(e) => handleRowClick(rowIndex, e)}\r\n                    onDoubleClick={(e) => handleRowDoubleClick(rowIndex, e)}\r\n                  >\r\n                    {columns.map((col: any, colIndex: number) => (\r\n                      <div\r\n                        key={colIndex}\r\n                        style={{ width: col.width }}\r\n                        className={`grid-cell ${\r\n                          hoveredColumn === colIndex ? `highlight-column` : \"\"\r\n                        }`}\r\n                      >\r\n                        <input\r\n                          value={row[col.field]}\r\n                          onChange={(e) => {}}\r\n                          readOnly={dataReadOnly}\r\n                          className={`${\r\n                            selectedRows.includes(rowIndex)\r\n                              ? \"selected-row\"\r\n                              : \"\"\r\n                          } ${\r\n                            selectedItems.includes(rowIndex)\r\n                              ? \"selected-items\"\r\n                              : \"\"\r\n                          }\r\n                          ${col.type === \"number\" ? \"number\" : \"text\"}\r\n                          `}\r\n                        />\r\n                        <div\r\n                          className=\"resize-handle\"\r\n                          onMouseDown={(e) => {\r\n                            e.preventDefault();\r\n                            startResize(colIndex, e);\r\n                          }}\r\n                          onMouseEnter={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseEnter(colIndex);\r\n                          }} // On hover\r\n                          onMouseLeave={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseLeave();\r\n                          }} // On mouse leave\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {writeFooter(rows) ? (\r\n            <>{writeFooter(rows)}</>\r\n          ) : (\r\n            <div className=\"table-panel-footer\">Records : {rows.length}</div>\r\n          )}\r\n        </div>\r\n        {isLoading && (\r\n          <div className=\"table-loading\">\r\n            <div className=\"loader\">\r\n              <img\r\n                alt=\"loader-gif\"\r\n                src={process.env.REACT_APP_IMAGE_URL + \"/image/loading.gif\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default UpwardTable;\r\n","import { useEffect, useRef, useState, useId } from \"react\";\r\nimport \"../style/upwardtablemodel.css\";\r\nimport { TextInput } from \"../components/UpwardFields\";\r\nimport UpwardTable from \"../components/UpwardTable\";\r\nimport { throttle } from \"lodash\";\r\nimport { AxiosInstance } from \"axios\";\r\nimport { User } from \"../components/AuthContext\";\r\nimport { useMutation } from \"react-query\";\r\n\r\ninterface UseUpwardTableModalProps {\r\n  myAxios: AxiosInstance;\r\n  user: User | null;\r\n  column: Array<any>;\r\n  link: {\r\n    url: string;\r\n    queryUrlName: string;\r\n  };\r\n  onSelectionChange: (selectedRow: any) => void;\r\n  onModalClose?: () => void;\r\n  responseDataKey: string;\r\n}\r\nexport const useUpwardTableModal = ({\r\n  myAxios,\r\n  user,\r\n  column,\r\n  link,\r\n  onSelectionChange,\r\n  responseDataKey,\r\n  onModalClose = () => {},\r\n}: UseUpwardTableModalProps) => {\r\n  const id = useId();\r\n  const inputSearchRef = useRef<HTMLInputElement>(null);\r\n  const tableRef = useRef<any>(null);\r\n  const parentRef = useRef<any>(null);\r\n  const [show, setShowModal] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const { isLoading, mutate } = useMutation({\r\n    mutationKey: id,\r\n    mutationFn: async (variable: any) =>\r\n      await myAxios.get(\r\n        `${link?.url}?${link?.queryUrlName}=${variable.search}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        }\r\n      ),\r\n    onSuccess: (res) => {\r\n      const response = res as any;\r\n      setRows(response.data[responseDataKey]);\r\n    },\r\n  });\r\n  const performSearch = (query: string) => {\r\n    if (query === \"\") {\r\n      mutate({ search: query });\r\n    }\r\n  };\r\n  // Throttle the search function to limit it to once every 500ms\r\n  const throttledSearch = throttle((query) => performSearch(query), 500);\r\n  const openModal = (search: string) => {\r\n    mutate({ search: search });\r\n    setShowModal(true);\r\n    setTimeout(() => {\r\n      if (inputSearchRef.current) {\r\n        inputSearchRef.current.value = search;\r\n      }\r\n      inputSearchRef.current?.focus();\r\n    }, 150);\r\n  };\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n    onModalClose();\r\n  };\r\n\r\n  const width = 460;\r\n  const height = 560;\r\n\r\n  useEffect(() => {\r\n    if (show && parentRef.current) {\r\n      parentRef.current?.focus();\r\n    }\r\n  }, [show, parentRef]);\r\n\r\n  const Modal = show ? (\r\n    <div\r\n      className=\"modal-parent\"\r\n      ref={parentRef}\r\n      tabIndex={-1}\r\n      onKeyDown={(e) => {\r\n        if (e.key === \"Escape\") {\r\n          closeModal();\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <TextInput\r\n          label={{ style: { display: \"none\" } }}\r\n          input={{\r\n            className: \"search-input-up-on-key-down\",\r\n            type: \"text\",\r\n            style: { width: \"100%\", marginBottom: \"20px\" },\r\n            onChange: (e) => {\r\n              e.preventDefault();\r\n              throttledSearch(e.currentTarget.value);\r\n            },\r\n            onKeyDown: (e) => {\r\n              if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\r\n                e.preventDefault();\r\n                mutate({ search: (e.target as any).value });\r\n              }\r\n              if (e.key === \"ArrowDown\") {\r\n                e.preventDefault();\r\n                const datagridview = document.querySelector(\r\n                  `.grid-container`\r\n                ) as HTMLDivElement;\r\n                console.log(datagridview);\r\n                datagridview.focus();\r\n              }\r\n            },\r\n          }}\r\n          inputRef={inputSearchRef}\r\n        />\r\n        <UpwardTable\r\n          ref={tableRef}\r\n          rows={rows}\r\n          column={column.filter((itm) => !itm.hide)}\r\n          width={width}\r\n          height={height}\r\n          dataReadOnly={true}\r\n          onSelectionChange={onSelectionChange}\r\n          isLoading={isLoading}\r\n        />\r\n        <button className=\"close-modal\" onClick={closeModal}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"16px\"\r\n            height=\"16px\"\r\n            viewBox=\"-0.5 0 25 25\"\r\n            fill=\"none\"\r\n          >\r\n            <path\r\n              d=\"M3 21.32L21 3.32001\"\r\n              stroke=\"#000000\"\r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M3 3.32001L21 21.32\"\r\n              stroke=\"#000000\"\r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n\r\n  return {\r\n    Modal,\r\n    openModal,\r\n    closeModal,\r\n    isLoading,\r\n  };\r\n};\r\n","import React, { useContext, useState, useRef, useReducer } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Modal,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  MenuItem,\n  Menu,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { flushSync } from \"react-dom\";\nimport { LoadingButton } from \"@mui/lab\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport DriveFolderUploadIcon from \"@mui/icons-material/DriveFolderUpload\";\nimport { DisplayFile, checkFile } from \"../Claims/Claims\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { grey } from \"@mui/material/colors\";\nimport UpwardTable from \"../../../../components/UpwardTable\";\nimport { useUpwardTableModal } from \"../../../../hooks/useUpwardTableModal\";\n\nconst initialState = {\n  Sub_Ref_No: \"\",\n  Ref_No: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  search: \"\",\n  pdcMode: \"\",\n  checkMode: \"\",\n  sub_account: \"\",\n  Acronym: \"\",\n};\nconst modalPdcCheckInititalState = {\n  CheckIdx: \"0\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  Check_Count: \"\",\n};\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport const pdcColumn = [\n  { field: \"Check_No\", headerName: \"Check No.\", width: 150 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 150 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"BankName\", headerName: \"Bank\", width: 300 },\n  { field: \"Branch\", headerName: \"Branch\", width: 200 },\n  {\n    field: \"Check_Remarks\",\n    headerName: \"Checked Remarks\",\n    width: 350,\n  },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 150 },\n  { field: \"DateDeposit\", headerName: \"Date Deposit\", width: 150 },\n  { field: \"OR_No\", headerName: \"OR Num\", width: 150 },\n  { field: \"BankCode\", headerName: \"Bank Code\", width: 150, hide: true },\n];\nexport const pdcSearchColumn = [\n  { field: \"Date\", headerName: \"Date Received\", width: 160 },\n  { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n  {\n    field: \"Name\",\n    headerName: \"Name\",\n    flex: 1,\n  },\n];\nexport const pdcBanksColumn = [\n  { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n  { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n];\nconst queryKey = \"pdc\";\nconst quertKeyPDCSearch = \"pdc-search\";\n\nexport default function PostDateChecks() {\n  const tableRef = useRef<any>(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<Array<File>>([]);\n  const [pdcDataRows, setPdcDataRows] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [stateModalPdcCheck, dispatchModalPdcCheck] = useReducer(\n    reducer,\n    modalPdcCheckInititalState\n  );\n\n  const { myAxios, user } = useContext(AuthContext);\n  const dataGridFunctions = useRef<any>(null);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  // pdc form save button\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const savePDCButtonRef = useRef<HTMLButtonElement>(null);\n  const openIdsButtonRef = useRef<HTMLButtonElement>(null);\n  //check modal refs\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButtonActionRef = useRef<any>(null);\n  // search modal auto focus on load\n  const addRefButton = useRef<HTMLButtonElement>(null);\n  const queryClient = useQueryClient();\n  const table = useRef<any>(null);\n\n  const { isLoading: newRefNumberLoading, refetch: refetchNewRefNumber } =\n    useQuery({\n      queryKey: \"new-ref-number\",\n      queryFn: async () => {\n        return await myAxios.get(\"/task/accounting/pdc-new-ref-number\", {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      },\n      refetchOnWindowFocus: false,\n      onSuccess: (res) => {\n        const response = res as any;\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Sub_Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n      },\n    });\n  const { mutate, isLoading: loadingAddNew } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) => {\n      if (state.pdcMode === \"update\") {\n        delete variables.mode;\n        return await myAxios.post(\"/task/accounting/update-pdc\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-pdc\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        refetchNewRefNumber();\n        queryClient.invalidateQueries(quertKeyPDCSearch);\n        setNewStateValue(dispatch, initialState);\n        setPdcDataRows([]);\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"\",\n        });\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  //selecte search\n  const { mutate: mutateSelectedSearch, isLoading: isLoadingSelectedSearch } =\n    useMutation({\n      mutationKey: queryKey,\n      mutationFn: async (variables: any) =>\n        await myAxios.post(\"/task/accounting/get-search-pdc-check\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }),\n      onSuccess: async (res) => {\n        if (!res?.data.success) {\n          return alert(`Error : ${res?.data.message}`);\n        }\n        const response = res as any;\n        const Ref_No = response.data.getSearchPDCCheck[0].Ref_No;\n        if (response.data.upload[0]) {\n          const uploadFiles = JSON.parse(response.data.upload[0]?.upload);\n          const newObjContainerBasic = await formatDataToDocument(\n            uploadFiles,\n            `${process.env.REACT_APP_IMAGE_URL}pdc/${Ref_No}`\n          );\n          const fileSelected = await Promise.all(newObjContainerBasic);\n          setSelectedFiles(fileSelected);\n        }\n        async function formatDataToDocument(\n          dataDocument: Array<any>,\n          url: string\n        ) {\n          const newObjContainer: Array<any> = [];\n          for (let index = 0; index < dataDocument.length; index++) {\n            const basicItem = dataDocument[index];\n            const mainURL = `${url}/${basicItem.uniqueFilename}`;\n            const response = await fetch(mainURL);\n            const blob = await response.blob();\n            const file = new File([blob], basicItem.fileName, {\n              type: basicItem.fileType,\n            });\n            const reader = new FileReader();\n            newObjContainer.push(\n              new Promise((resolve, reject) => {\n                reader.onload = function (event) {\n                  resolve(file);\n                };\n                reader.onerror = function (event) {\n                  reject(new Error(\"Error reading file: \" + file.name));\n                };\n                reader.readAsDataURL(file);\n              })\n            );\n          }\n          return newObjContainer;\n        }\n\n        setPdcDataRows(\n          response.data.getSearchPDCCheck.map((item: any, idx: number) => {\n            return { ...item, CheckIdx: `${idx}` };\n          })\n        );\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.getSearchPDCCheck[0].Ref_No,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: response.data.getSearchPDCCheck[0].Name,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Date\",\n          value: response.data.getSearchPDCCheck[0].Date,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: response.data.getSearchPDCCheck[0].PNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: response.data.getSearchPDCCheck[0].IDNo,\n        });\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: response.data.getSearchPDCCheck[0].Acronym,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: response.data.getSearchPDCCheck[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: response.data.getSearchPDCCheck[0].Remarks,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"update\",\n        });\n      },\n    });\n  // policy ids search table modal\n  const {\n    Modal: ModalSearchPdcIDs,\n    closeModal: closeModalSearchPdcIDs,\n    openModal: openModalSearchPdcIDs,\n    isLoading: isLoadingModalSearchPdcIDs,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    column: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      { field: \"chassis\", headerName: \"Chassis No.\", width: 200, hide: true },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 350,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        width: 300,\n        hide: true,\n      },\n      {\n        field: \"client_id\",\n        headerName: \"client_id\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: selectedRow[0].IDNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: selectedRow[0].client_id,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: selectedRow[0].Name ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: selectedRow[0].remarks ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: selectedRow[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: selectedRow[0].Acronym,\n        });\n\n        closeModalSearchPdcIDs();\n        if (pdcDataRows.length <= 0) {\n          setTimeout(() => {\n            addRefButton.current?.click();\n          }, 100);\n        }\n      }\n    },\n\n    responseDataKey: \"clientsId\",\n  });\n  // bank search table modal\n  const {\n    Modal: ModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    openModal: openModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    column: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 100 },\n      { field: \"Bank\", headerName: \"Bank Name\", width: 350 },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankName\",\n          value: selectedRow[0].Bank,\n        });\n\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankCode\",\n          value: selectedRow[0].Bank_Code,\n        });\n        closeModalSearchBanks();\n        setOpenPdcInputModal(true);\n        setTimeout(() => {\n          checkBranchRef.current?.focus();\n        }, 100);\n      }\n    },\n    onModalClose: () => {\n      setTimeout(() => {\n        setOpenPdcInputModal(true);\n      }, 100);\n    },\n    responseDataKey: \"pdcBanks\",\n  });\n  // pdc search table modal\n  const {\n    Modal: UpwardPDCModal,\n    closeModal: closeUpwardPDCModal,\n    openModal: openUpwardPDCModal,\n    isLoading: isLoadingModalSearchPDC,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    column: [\n      { field: \"Date\", headerName: \"Date Received\", width: 90 },\n      { field: \"Ref_No\", headerName: \"Ref No.\", width: 80 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 320,\n      },\n    ],\n    link: {\n      url: \"/task/accounting/search-pdc\",\n      queryUrlName: \"searchPDCInput\",\n    },\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        mutateSelectedSearch({ ref_no: selectedRow[0].Ref_No });\n        closeUpwardPDCModal();\n        if (searchRef.current) {\n          searchRef.current?.focus();\n        }\n      }\n    },\n    responseDataKey: \"searchPDC\",\n  });\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  const handleModalInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchModalPdcCheck({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  async function handleOnSave(e: any) {\n    if (state.PNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide loan information!\",\n        timer: 1500,\n      }).then(() => {\n        setTimeout(() => {\n          openIdsButtonRef.current?.click();\n        }, 350);\n      });\n    }\n    if (pdcDataRows.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide entry!\",\n        timer: 1500,\n      }).then(() => {\n        setOpenPdcInputModal(true);\n      });\n    }\n    if (state.PNo.length >= 45) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Pno is too long!\",\n        timer: 1500,\n      });\n    }\n    if (state.Remarks.length >= 220) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Remarks is too long!\",\n        timer: 1500,\n      });\n    }\n    const filePromises: Array<any> = [];\n    function fileTransfer(filePromises: Array<any>) {\n      const files = selectedFiles;\n      if (files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const reader = new FileReader();\n          filePromises.push(\n            new Promise((resolve, reject) => {\n              reader.onload = function (event) {\n                resolve({\n                  datakey: \"pdc_file\",\n                  fileName: file.name,\n                  fileContent: event.target?.result,\n                  fileType: file.type,\n                  file,\n                });\n              };\n              reader.onerror = function (event) {\n                reject(new Error(\"Error reading file: \" + file.name));\n              };\n              reader.readAsDataURL(file);\n            })\n          );\n        }\n      }\n    }\n    fileTransfer(filePromises);\n    const fileToSave = await Promise.all(filePromises);\n    const stateSubmited = {\n      Ref_No: state.Ref_No,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      Remarks: state.Remarks,\n      BankCode: state.BankCode,\n      checks: JSON.stringify(pdcDataRows),\n    };\n    if (state.pdcMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...stateSubmited, userCodeConfirmation, fileToSave });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...stateSubmited, fileToSave });\n        },\n      });\n    }\n  }\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const fileList = e.dataTransfer.files;\n    const files = Array.from(fileList);\n    const newFiles = [...selectedFiles, ...files];\n    setIsDragging(false);\n    if (checkFile(newFiles)) {\n      fileInputRef.current?.click();\n      return alert(\"file is not valid Extention!\");\n    } else {\n      setSelectedFiles(newFiles);\n    }\n  };\n  const clickPDCReceipt = () => {\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(pdcDataRows));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"pdc\");\n      localStorage.setItem(\"state\", JSON.stringify(state));\n      localStorage.setItem(\n        \"column\",\n        JSON.stringify([\n          { datakey: \"Check_No\", header: \"CHECK NO\", width: \"80px\" },\n          { datakey: \"Check_Date\", header: \"DATE\", width: \"130px\" },\n          { datakey: \"BankName\", header: \"BANK\", width: \"240px\" },\n          { datakey: \"Check_Amnt\", header: \"AMOUNT\", width: \"70px\" },\n          { datakey: \"SEQ\", header: \"SEQ\", width: \"30px\" },\n        ])\n      );\n\n      localStorage.setItem(\n        \"title\",\n        user?.department === \"UMIS\"\n          ? \"UPWARD MANAGEMENT INSURANCE SERVICES\\n Post Date Checks Receipt\"\n          : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n Post Date Checks Receipt\"\n      );\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const clickPDCLabeling = () => {\n    let printString = () => {\n      return (\n        <div>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              marginTop: \"8px\",\n              marginBottom: 0,\n            }}\n          >\n            UCSMI\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.Name}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.IDNo}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: \"20px\",\n            }}\n          >\n            {state.Ref_No}\n          </p>\n        </div>\n      );\n    };\n\n    flushSync(() => {\n      const elementString = ReactDOMServer.renderToString(printString());\n      localStorage.setItem(\"printString\", elementString);\n      localStorage.removeItem(\"dataString\");\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const onSelectionChange = (selectedRow: any) => {\n    if (selectedRow.length > 0) {\n      const rowSelected = selectedRow[0];\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"update\",\n      });\n      setNewStateValue(dispatchModalPdcCheck, rowSelected);\n      flushSync(() => {\n        setOpenPdcInputModal(true);\n      });\n      checkModalSaveButtonActionRef.current?.focusVisible();\n    } else {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"\",\n      });\n    }\n  };\n  const isDisableField = state.pdcMode === \"\";\n  const width = window.innerWidth - 100;\n  const height = window.innerHeight - 145;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n        background: \"red\",\n        padding: \"10px\",\n        backgroundColor: \"#F8F8FF\",\n      }}\n    >\n      {UpwardPDCModal}\n      {ModalSearchPdcIDs}\n      {ModalSearchBanks}\n      <Box\n        sx={(theme) => ({\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"20px\",\n          [theme.breakpoints.down(\"sm\")]: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            flex: 1,\n            marginBottom: \"15px\",\n          },\n        })}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n            marginBottom: \"15px\",\n          }}\n        >\n          {isLoadingModalSearchPDC ? (\n            <LoadingButton loading={isLoadingModalSearchPDC} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              value={state.search}\n              onChange={handleInputChange}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  openUpwardPDCModal((e.target as HTMLInputElement).value);\n                }\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const datagridview = document.querySelector(\n                    `.grid-container`\n                  ) as HTMLDivElement;\n                  datagridview.focus();\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n                inputRef: searchRef,\n                className: \"manok\",\n              }}\n              sx={{\n                width: \"400px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n          {state.pdcMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              color=\"primary\"\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"pdcMode\",\n                  value: \"add\",\n                });\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            ref={savePDCButtonRef}\n            id=\"save-entry-header\"\n            color=\"success\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={handleOnSave}\n            disabled={state.pdcMode === \"\"}\n            loading={loadingAddNew}\n            startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n          >\n            Save\n          </LoadingButton>\n          {(state.pdcMode === \"add\" || state.pdcMode === \"update\") && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    initialState.Sub_Ref_No = state.Sub_Ref_No;\n                    initialState.Ref_No = state.Sub_Ref_No;\n                    setNewStateValue(dispatch, initialState);\n                    setPdcDataRows([]);\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"pdcMode\",\n                      value: \"\",\n                    });\n                  }\n                });\n              }}\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          )}\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            disabled={state.pdcMode === \"\"}\n            variant=\"contained\"\n            startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n            onClick={() => {\n              const getLastCheck_No: any = pdcDataRows[pdcDataRows.length - 1];\n              modalPdcCheckInititalState.Check_No = incrementCheckNo(\n                getLastCheck_No?.Check_No\n              );\n              setNewStateValue(\n                dispatchModalPdcCheck,\n                modalPdcCheckInititalState\n              );\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"\",\n              });\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n\n              if (state.checkMode !== \"update\") {\n                checkNoRef.current?.focus();\n              }\n            }}\n            ref={addRefButton}\n          >\n            Add Check\n          </Button>\n          <div>\n            <Button\n              disabled={state.pdcMode !== \"update\"}\n              id=\"basic-button\"\n              aria-controls={open ? \"basic-menu\" : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? \"true\" : undefined}\n              onClick={handleClick}\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n                color: \"white\",\n                backgroundColor: grey[600],\n                \"&:hover\": {\n                  backgroundColor: grey[700],\n                },\n              }}\n            >\n              Print\n            </Button>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                \"aria-labelledby\": \"basic-button\",\n              }}\n            >\n              <MenuItem onClick={clickPDCReceipt}>PDC Receipt</MenuItem>\n              <MenuItem onClick={clickPDCLabeling}>PDC Labeling</MenuItem>\n            </Menu>\n          </div>\n        </div>\n      </Box>\n      <form\n        onKeyDown={(e) => {\n          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n            e.preventDefault();\n            return;\n          }\n        }}\n        style={{\n          marginBottom: \"20px\",\n        }}\n      >\n        <Box\n          sx={(theme) => ({\n            display: \"flex\",\n            columnGap: \"15px\",\n            flexDirection: \"row\",\n            [theme.breakpoints.down(\"md\")]: {\n              flexDirection: \"column\",\n              rowGap: \"10px\",\n            },\n          })}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: \"10px\",\n              width: \"100%\",\n            }}\n          >\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                } as any\n              }\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                }}\n              >\n                {newRefNumberLoading ? (\n                  <LoadingButton loading={newRefNumberLoading} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"pdc-id-field\">\n                      Reference No.\n                    </InputLabel>\n                    <OutlinedInput\n                      readOnly={user?.department !== \"UCSMI\"}\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                        fieldset: { borderColor: \"black\" },\n                      }}\n                      disabled={isDisableField}\n                      label=\"Reference No.\"\n                      name=\"Ref_No\"\n                      value={state.Ref_No}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          return savePDCButtonRef.current?.click();\n                        }\n                      }}\n                      id=\"pdc-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  fullWidth={true}\n                  disabled={isDisableField}\n                  label=\"Date Received\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n              </div>\n              <TextField\n                InputLabelProps={{\n                  sx: {\n                    color: \"black\",\n                  },\n                }}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Remarks\"\n                value={state.Remarks}\n                onChange={handleInputChange}\n                disabled={isDisableField}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    savePDCButtonRef.current?.click();\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  fieldset: { borderColor: \"black\" },\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </fieldset>\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  flexDirection: \"column\",\n                } as any\n              }\n            >\n              <div\n                style={{ width: \"100%\", flex: 1, display: \"flex\", gap: \"10px\" }}\n              >\n                {isLoadingModalSearchPdcIDs ? (\n                  <LoadingButton loading={isLoadingModalSearchPdcIDs} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">\n                      PN/Client ID\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        fieldset: { borderColor: \"black\" },\n\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          openIdsButtonRef.current?.click();\n                        }\n                      }}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            ref={openIdsButtonRef}\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => openModalSearchPdcIDs(state.PNo)}\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Acronym\"\n                  value={state.Acronym}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{ width: \"100%\", display: \"flex\", columnGap: \"10px\" }}\n              >\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <Button\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={state.pdcMode === \"\"}\n                  variant=\"contained\"\n                  startIcon={<DownloadIcon sx={{ width: 15, height: 15 }} />}\n                  onClick={() => {\n                    setShowModal(true);\n                  }}\n                >\n                  Upload Check\n                </Button>\n              </div>\n            </fieldset>\n          </Box>\n        </Box>\n      </form>\n      <UpwardTable\n        ref={tableRef}\n        rows={pdcDataRows}\n        column={pdcColumn}\n        width={width}\n        height={height}\n        dataReadOnly={true}\n        onSelectionChange={onSelectionChange}\n        onKeyDown={(row, key) => {\n          if (key === \"Delete\" || key === \"Backspace\") {\n            const rowSelected = row[0];\n            if (\n              (rowSelected.Deposit_Slip && rowSelected.Deposit_Slip !== \"\") ||\n              (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n              (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n            ) {\n              return Swal.fire({\n                position: \"center\",\n                icon: \"warning\",\n                title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n                showConfirmButton: false,\n                timer: 1500,\n              });\n            }\n            const timeout = setTimeout(() => {\n              Swal.fire({\n                title: \"Are you sure?\",\n                text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  return setPdcDataRows((dt) => {\n                    return dt.filter(\n                      (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n                    );\n                  });\n                }\n                table.current?.removeSelection();\n              });\n              clearTimeout(timeout);\n            }, 250);\n          }\n        }}\n        inputsearchselector=\".manok\"\n        isLoading={isLoadingSelectedSearch}\n      />\n\n      <Modal\n        open={openPdcInputModal}\n        onClose={() => {\n          table.current?.removeSelection();\n          setOpenPdcInputModal(false);\n        }}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\" as \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"auto\",\n            bgcolor: \"background.paper\",\n            p: 4,\n          }}\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Check Detail\n          </Typography>\n          <br />\n          <div\n            style={{\n              display: \"flex\",\n              columnGap: \"10px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"10px\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Check No.\"\n                name=\"Check_No\"\n                value={stateModalPdcCheck.Check_No}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkNoRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {isLoadingModalSearchbanks ? (\n                <LoadingButton loading={isLoadingModalSearchbanks} />\n              ) : (\n                <FormControl\n                  sx={{\n                    width: \"100%\",\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                  <OutlinedInput\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                    inputRef={checkBankRef}\n                    fullWidth\n                    label=\"Bank\"\n                    name=\"BankName\"\n                    value={stateModalPdcCheck.BankName}\n                    onChange={handleModalInputChange}\n                    id=\"label-input-id\"\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        setOpenPdcInputModal(false);\n\n                        return openModalSearchBanks(\n                          stateModalPdcCheck.BankName\n                        );\n                      }\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"search-client\"\n                          color=\"secondary\"\n                          edge=\"end\"\n                          onClick={() => {\n                            setOpenPdcInputModal(false);\n\n                            openModalSearchBanks(stateModalPdcCheck.BankName);\n                          }}\n                        >\n                          <PolicyIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"Branch\"\n                value={stateModalPdcCheck.Branch}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkBranchRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Check_Remarks\"\n                value={stateModalPdcCheck.Check_Remarks}\n                onChange={handleModalInputChange}\n                rows={4}\n                multiline\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"auto\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"auto\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                flexDirection: \"column\",\n              }}\n            >\n              <CustomDatePicker\n                label=\"Check Dated\"\n                onChange={(value: any) => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateModalPdcCheck.Check_Date)}\n                inputRef={checkDateRef}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"Check_Amnt\"\n                value={stateModalPdcCheck.Check_Amnt}\n                onChange={handleModalInputChange}\n                placeholder=\"0.00\"\n                onBlur={() => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Amnt\",\n                    value: parseFloat(\n                      stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  inputRef: checkAmountRef,\n                }}\n                sx={{\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {state.checkMode !== \"update\" && (\n                <TextField\n                  type=\"number\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check Count\"\n                  name=\"Check_Count\"\n                  value={stateModalPdcCheck.Check_Count}\n                  onChange={handleModalInputChange}\n                  placeholder=\"0\"\n                  onKeyDown={(e: any) => {\n                    const validCode = [\"Enter\", \"NumpadEnter\"];\n                    if (validCode.includes(e.code)) {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputProps: {\n                      min: 1,\n                      type: \"text\",\n                      pattern: \"[0-9]*\",\n                    },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              width: \"100%\",\n              marginTop: \"10px\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveButtonActionRef}\n                color=\"primary\"\n                variant=\"contained\"\n                autoFocus={state.checkMode !== \"\"}\n                onClick={() => {\n                  if (state.checkMode === \"update\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Update Check ${stateModalPdcCheck.Check_No}`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n                      modalCheckAddUpdate();\n                    });\n                  }\n                  modalCheckAddUpdate();\n\n                  function modalCheckAddUpdate() {\n                    if (\n                      state.checkMode !== \"update\" &&\n                      pdcDataRows\n                        .map((item: any) => item.Check_No)\n                        .includes(stateModalPdcCheck.Check_No)\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Check is already exist!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n                    if (\n                      parseInt(stateModalPdcCheck.Check_Amnt) <= 0 ||\n                      isNaN(parseInt(stateModalPdcCheck.Check_Amnt))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check amount!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide bank!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide branch!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_No.length >= 40) {\n                      return Swal.fire({\n                        text: \"Check No is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_Amnt.length >= 200) {\n                      return Swal.fire({\n                        text: \"Check Amount is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch.length >= 45) {\n                      return Swal.fire({\n                        text: \"Branch is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_Remarks.length >= 220) {\n                      return Swal.fire({\n                        text: \"Remarks is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    stateModalPdcCheck.Check_Amnt = parseFloat(\n                      stateModalPdcCheck.Check_Amnt.toString().replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      style: \"decimal\",\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    stateModalPdcCheck.Check_Date = new Date(\n                      stateModalPdcCheck.Check_Date\n                    ).toLocaleDateString(\"en-US\", {\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                      year: \"numeric\",\n                    });\n                    const checkContainer: any = [];\n                    if (\n                      !isNaN(parseInt(stateModalPdcCheck.Check_Count)) &&\n                      parseInt(stateModalPdcCheck.Check_Count) > 0 &&\n                      state.checkMode !== \"update\"\n                    ) {\n                      for (\n                        let i = 0;\n                        i < parseInt(stateModalPdcCheck.Check_Count);\n                        i++\n                      ) {\n                        let CheckIdx = (\n                          pdcDataRows.length > 0\n                            ? parseInt(\n                                (pdcDataRows[pdcDataRows.length - 1] as any)\n                                  .CheckIdx\n                              ) +\n                              (i + 1)\n                            : i\n                        ).toString();\n\n                        const currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + i);\n                        const data: any = {\n                          CheckIdx,\n                          Check_No: incrementStringNumbers(\n                            stateModalPdcCheck.Check_No,\n                            i\n                          ),\n                          Check_Date: currentDate.toLocaleDateString(\"en-US\", {\n                            month: \"2-digit\",\n                            day: \"2-digit\",\n                            year: \"numeric\",\n                          }),\n                          Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                          BankName: stateModalPdcCheck.BankName,\n                          BankCode: stateModalPdcCheck.BankCode,\n                          Branch: stateModalPdcCheck.Branch,\n                          Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                          Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                          DateDeposit: stateModalPdcCheck.DateDeposit,\n                          OR_No: stateModalPdcCheck.OR_No,\n                        };\n\n                        if (\n                          state.checkMode !== \"update\" &&\n                          pdcDataRows\n                            .map((item: any) => item.Check_No)\n                            .includes(data.Check_No)\n                        ) {\n                          setOpenPdcInputModal(false);\n                          return Swal.fire({\n                            text: \"Check is already exist!\",\n                            icon: \"warning\",\n                            showCancelButton: false,\n                            timer: 1500,\n                          }).then(() => {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkNoRef.current?.focus();\n                          });\n                        }\n\n                        checkContainer.push(data);\n                      }\n                      setPdcDataRows((d: any) => {\n                        d = [...d, ...checkContainer];\n                        return d;\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      });\n\n                      return;\n                    }\n\n                    function incrementStringNumbers(\n                      str: string,\n                      increment: number\n                    ) {\n                      let num = parseInt(str);\n                      num = num + increment;\n                      return num.toString().padStart(str.length, \"0\");\n                    }\n\n                    setPdcDataRows((dt: any) => {\n                      let CheckIdx = \"\";\n                      if (dt.length <= 0) {\n                        CheckIdx = \"0\";\n                      } else if (state.checkMode === \"update\") {\n                        CheckIdx = stateModalPdcCheck.CheckIdx;\n                      } else {\n                        CheckIdx = (\n                          parseInt(dt[dt.length - 1].CheckIdx) + 1\n                        ).toString();\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: CheckIdx,\n                      });\n\n                      const data: any = {\n                        Check_No: stateModalPdcCheck.Check_No,\n                        Check_Date: stateModalPdcCheck.Check_Date,\n                        Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                        BankName: stateModalPdcCheck.BankName,\n                        BankCode: stateModalPdcCheck.BankCode,\n                        Branch: stateModalPdcCheck.Branch,\n                        Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                        Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                        DateDeposit: stateModalPdcCheck.DateDeposit,\n                        OR_No: stateModalPdcCheck.OR_No,\n                      };\n                      if (state.checkMode === \"update\") {\n                        dt = dt.map((items: any) => {\n                          if (items.CheckIdx === CheckIdx) {\n                            items = { ...items, ...data };\n                          }\n                          return items;\n                        });\n                      } else {\n                        dt = [...dt, { CheckIdx, ...data }];\n                      }\n                      return dt;\n                    });\n\n                    setOpenPdcInputModal(false);\n\n                    Swal.fire({\n                      text:\n                        state.checkMode === \"update\"\n                          ? \"Check Update Successfully\"\n                          : \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                    }).then(() => {\n                      if (state.checkMode !== \"update\") {\n                        var currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + 1);\n\n                        dispatchModalPdcCheck({\n                          type: \"UPDATE_FIELD\",\n                          field: \"Check_Date\",\n                          value: currentDate,\n                        });\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                        ),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value:\n                          state.checkMode === \"update\"\n                            ? stateModalPdcCheck.Check_No\n                            : incrementCheckNo(stateModalPdcCheck.Check_No),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(true);\n                      });\n                      checkModalSaveButtonActionRef.current.focusVisible();\n                    });\n                  }\n                }}\n              >\n                {state.checkMode === \"update\" ? \"Update\" : \"Save\"}\n              </Button>\n              {state.checkMode === \"update\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Delete Check ${stateModalPdcCheck.Check_No} `,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n\n                      setPdcDataRows((dt) => {\n                        dt = dt.filter(\n                          (items: any) =>\n                            items.CheckIdx !== stateModalPdcCheck.CheckIdx\n                        );\n                        return dt;\n                      });\n                      dataGridFunctions.current?.removeSelection();\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  setNewStateValue(\n                    dispatchModalPdcCheck,\n                    modalPdcCheckInititalState\n                  );\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n              <IconButton\n                style={{\n                  position: \"absolute\",\n                  top: \"10px\",\n                  right: \"10px\",\n                }}\n                aria-label=\"search-client\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <div\n        style={{\n          display: showModal ? \"flex\" : \"none\",\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(158, 155, 157, 0.31)\",\n          zIndex: \"999\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: \"90%\",\n            height: \"90%\",\n          }}\n        >\n          <div\n            style={{\n              width: \"90%\",\n              height: \"90%\",\n              overflow: \"auto\",\n              background: \"white\",\n              padding: \"20px\",\n              margin: \"auto\",\n              zIndex: \"9929\",\n              boxShadow: \" -1px 1px 13px 6px rgba(0,0,0,0.54)\",\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                position: \"relative\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <IconButton\n                sx={{\n                  position: \"absolute\",\n                  right: \"5px\",\n                  top: \"5px\",\n                }}\n                onClick={() => {\n                  setShowModal(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"500px\",\n                  border: isDragging ? \"5px dashed green\" : \"5px dashed grey\",\n                  overflow: \"auto\",\n                  padding: \"10px\",\n                }}\n                onDragEnter={handleDragEnter}\n                onDragOver={(e) => e.preventDefault()}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div\n                  id=\"upload-container\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexWrap: \"wrap\",\n                  }}\n                  onDragEnter={handleDragEnter}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                >\n                  {selectedFiles.map((itm, idx) => {\n                    return (\n                      <DisplayFile\n                        key={idx}\n                        itm={itm}\n                        selectedFiles={selectedFiles}\n                        setSelectedFiles={setSelectedFiles}\n                        fileInput={fileInputRef}\n                      />\n                    );\n                  })}\n                </div>\n                {selectedFiles.length <= 0 && (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"50%\",\n                      left: \"50%\",\n                      transform: \"translate(-50%,-50%)\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <DriveFolderUploadIcon\n                      sx={{ fontSize: \"20em\", color: \"#64748b\" }}\n                    />\n                  </div>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  style={{ display: \"none\", background: \"white\" }}\n                  id=\"input-file\"\n                  onChange={(e) => {\n                    const fileList = e.target.files as FileList;\n                    const files = Array.from(fileList);\n                    const newFiles = [...selectedFiles, ...files];\n                    if (checkFile(newFiles)) {\n                      return alert(\"file is not valid Extention!\");\n                    }\n                    setSelectedFiles(newFiles);\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                }}\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    const inputFile = document.getElementById(\"input-file\");\n                    inputFile?.click();\n                  }}\n                >\n                  CLick it to upload\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nexport function incrementCheckNo(Check_No: string) {\n  if (Check_No === undefined || Check_No === null || Check_No === \"\") {\n    return \"001\";\n  }\n\n  let incrementedNumber = (parseInt(Check_No) + 1).toString();\n  while (incrementedNumber.length < Check_No.length) {\n    incrementedNumber = \"0\" + incrementedNumber;\n  }\n  return incrementedNumber;\n}\n"],"names":["TextInput","_ref","input","label","inputRef","id","useId","_jsxs","style","display","height","alignItems","children","_jsx","_objectSpread","htmlFor","title","ref","SelectInput","_ref2","select","selectRef","_ref2$datasource","datasource","_ref2$values","values","_ref2$display","className","map","itm","idx","value","ButtonField","_ref3","buttonRetRef","button","_ref3$tooltipText","tooltipText","_ref3$disabled","disabled","background","forwardRef","UpwardTableRef","rows","column","width","dataReadOnly","_ref$onSelectionChang","onSelectionChange","_ref$isMultipleSelect","isMultipleSelect","_ref$freeze","freeze","onKeyDown","_ref$inputsearchselec","inputsearchselector","_ref$isRowSelectable","isRowSelectable","_ref$unSelectable","unSelectable","_ref$writeFooter","writeFooter","_ref$isLoading","isLoading","onSelectionChangeRef","useRef","onKeyDownRef","_useState","useState","filter","hide","_useState2","_slicedToArray","columns","setColumns","_useState3","_useState4","hoveredColumn","setHoveredColumn","_useState5","_useState6","selectedRows","setSelectedRows","_useState7","_useState8","lastSelectedRowIndex","setLastSelectedRowIndex","_useState9","_useState10","selectedItems","setSelectedItems","divRef","startResize","index","e","preventDefault","stopPropagation","startX","clientX","startWidth","doDrag","moveEvent","newWidth","updatedColumns","_toConsumableArray","document","addEventListener","stopDrag","removeEventListener","handleMouseEnter","handleMouseLeave","useImperativeHandle","resetTableSelected","length","row","querySelector","concat","scrollIntoView","block","behavior","getSelectedRows","d","includes","justifyContent","key","selectedItemsParams","rowIndex","i","current","prevIndex","_row$querySelector","newPrevIndex","focus","tagName","divInput","_row$querySelector2","selectedRowData","flexDirection","tabIndex","position","zIndex","top","col","textAlign","type","fontWeight","defaultValue","headerName","readOnly","onChange","onMouseDown","onMouseEnter","onMouseLeave","onClick","event","shiftKey","rangeStart","Math","min","rangeEnd","max","newSelectedRows","push","_getIndexAndData","removeNullValue","data","newSelectedRowsFiltered","getIndexAndData","ctrlKey","metaKey","handleRowClick","onDoubleClick","handleRowDoubleClick","colIndex","field","_Fragment","alt","src","process","useUpwardTableModal","_mutationFn","myAxios","user","link","responseDataKey","_ref$onModalClose","onModalClose","inputSearchRef","tableRef","parentRef","show","setShowModal","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variable","wrap","_context","prev","next","get","url","queryUrlName","search","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","res","mutate","throttledSearch","throttle","query","performSearch","closeModal","useEffect","_parentRef$current","Modal","marginBottom","currentTarget","target","datagridview","console","log","UpwardTable","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","openModal","setTimeout","_inputSearchRef$curre","initialState","Sub_Ref_No","Ref_No","PNo","IDNo","Date","Name","Remarks","PDC_Status","Deposit_Slip","DateDeposit","OR_No","pdcMode","checkMode","sub_account","Acronym","modalPdcCheckInititalState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","Check_Count","reducer","state","action","_defineProperty","pdcColumn","pdcSearchColumn","flex","pdcBanksColumn","queryKey","quertKeyPDCSearch","PostDateChecks","_queryFn","_mutationFn2","_onSuccess","_handleOnSave","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","open","Boolean","isDragging","setIsDragging","selectedFiles","setSelectedFiles","pdcDataRows","setPdcDataRows","openPdcInputModal","setOpenPdcInputModal","showModal","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","stateModalPdcCheck","dispatchModalPdcCheck","_useContext","useContext","AuthContext","dataGridFunctions","searchRef","fileInputRef","savePDCButtonRef","openIdsButtonRef","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","checkModalSaveButton","checkModalSaveButtonActionRef","addRefButton","queryClient","useQueryClient","table","_useQuery","useQuery","queryFn","refetchOnWindowFocus","response","RefNo","pdcID","newRefNumberLoading","refetchNewRefNumber","refetch","_callee2","variables","_context2","mode","post","success","invalidateQueries","setNewStateValue","Swal","icon","message","showConfirmButton","timer","loadingAddNew","_useMutation2","_x2","_callee3","_context3","_x3","_callee5","_formatDataToDocument","_response$data$upload","uploadFiles","newObjContainerBasic","fileSelected","formatDataToDocument","_context6","_x4","_x5","_callee4","dataDocument","newObjContainer","_loop","_context5","basicItem","mainURL","blob","file","reader","_context4","uniqueFilename","fetch","File","fileName","fileType","FileReader","Promise","resolve","reject","onload","onerror","Error","name","readAsDataURL","delegateYield","alert","getSearchPDCCheck","upload","JSON","parse","all","item","mutateSelectedSearch","isLoadingSelectedSearch","_useUpwardTableModal","selectedRow","_selectedRow$0$Name","_selectedRow$0$remark","client_id","remarks","closeModalSearchPdcIDs","_addRefButton$current","click","ModalSearchPdcIDs","openModalSearchPdcIDs","isLoadingModalSearchPdcIDs","_useUpwardTableModal2","Bank","Bank_Code","closeModalSearchBanks","_checkBranchRef$curre","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useUpwardTableModal3","_searchRef$current","ref_no","closeUpwardPDCModal","UpwardPDCModal","openUpwardPDCModal","isLoadingModalSearchPDC","handleInputChange","_e$target","handleModalInputChange","_e$target2","handleDragLeave","handleDragEnter","handleDrop","_fileInputRef$current","fileList","dataTransfer","files","Array","from","newFiles","checkFile","isDisableField","window","innerWidth","innerHeight","padding","backgroundColor","Box","sx","theme","columnGap","breakpoints","down","LoadingButton","loading","TextField","size","code","InputProps","fontSize","Button","variant","startIcon","AddIcon","color","_x6","_callee6","filePromises","fileTransfer","fileToSave","stateSubmited","_context7","_loop2","_event$target","datakey","fileContent","result","then","_openIdsButtonRef$cur","checks","stringify","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","saveCondfirmationAlert","isConfirm","SaveIcon","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","_checkNoRef$current","getLastCheck_No","incrementCheckNo","flushSync","undefined","grey","Menu","onClose","MenuListProps","MenuItem","localStorage","removeItem","setItem","header","department","elementString","ReactDOMServer","marginTop","margin","rowGap","gap","border","borderRadius","FormControl","fullWidth","InputLabel","OutlinedInput","fieldset","borderColor","_savePDCButtonRef$cur","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","_savePDCButtonRef$cur2","textField","InputLabelProps","_savePDCButtonRef$cur3","_openIdsButtonRef$cur2","PersonSearchIcon","_savePDCButtonRef$cur4","_savePDCButtonRef$cur5","DownloadIcon","_checkModalSaveButton","rowSelected","focusVisible","timeout","_table$current","dt","removeSelection","clearTimeout","_table$current2","left","transform","bgcolor","p","Typography","component","_checkModalSaveButton2","PolicyIcon","_checkModalSaveButton3","multiline","_checkModalSaveButton4","_checkModalSaveButton5","placeholder","onBlur","parseFloat","replace","toFixed","_checkModalSaveButton6","inputComponent","NumericFormatCustom","_checkModalSaveButton7","inputProps","pattern","autoFocus","_table$current3","modalCheckAddUpdate","_checkNoRef$current2","_checkNoRef$current3","parseInt","isNaN","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre2","toString","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","month","day","year","checkContainer","currentDate","setMonth","getMonth","incrementStringNumbers","_checkNoRef$current4","str","increment","num","padStart","items","_dataGridFunctions$cu","_table$current4","_table$current5","right","_table$current6","bottom","overflow","boxShadow","onDragEnter","onDragOver","onDragLeave","onDrop","flexWrap","DisplayFile","fileInput","DriveFolderUploadIcon","multiple","inputFile","getElementById","obj","Object","entries","forEach","_ref4","incrementedNumber"],"sourceRoot":""}