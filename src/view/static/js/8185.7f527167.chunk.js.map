{"version":3,"file":"static/js/8185.7f527167.chunk.js","mappings":"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","sources":["components/UpwardFields.tsx","components/UpwardTable.tsx","hooks/useUpwardTableModal.tsx","feautures/Admin/Task/Accounting/PostDateChecks.tsx"],"sourcesContent":["import { HtmlHTMLAttributes, InputHTMLAttributes, useId ,ReactNode } from \"react\";\r\nimport \"../style/design.css\";\r\n\r\nexport function TextInput({\r\n  input,\r\n  label,\r\n  inputRef,\r\n  labelRef,\r\n  icon,\r\n  position = \"start\", // By default, icon will be at the start\r\n}: {\r\n  inputRef?: React.RefObject<HTMLInputElement>;\r\n  labelRef?: React.RefObject<HTMLLabelElement>;\r\n  input: InputHTMLAttributes<HTMLInputElement>;\r\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\r\n  icon?: ReactNode; // Optional icon element (ReactNode allows for any valid JSX)\r\n  position?: \"start\" | \"end\"; // Position for the icon\r\n}) {\r\n  const id = useId();\r\n\r\n  return (\r\n    <div\r\n      className=\"text-input\"\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <label {...label} htmlFor={id} ref={labelRef}>\r\n        {label.title}\r\n      </label>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          height: \"18px\",\r\n          width:\"100%\"\r\n        }}\r\n        className=\"input-container\"\r\n\r\n      >\r\n        {position === \"start\" && icon && (\r\n          <span style={{ marginRight: \"4px\" }}>{icon}</span>\r\n        )}\r\n        <input\r\n          ref={inputRef}\r\n          id={id}\r\n          {...input}\r\n          style={{\r\n            height: \"18px\",\r\n            ...input.style,\r\n          }}\r\n        />\r\n        {position === \"end\" && icon && (\r\n          <span style={{ marginLeft: \"4px\" }}>{icon}</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SelectInput({\r\n  select,\r\n  label,\r\n  selectRef,\r\n  datasource = [],\r\n  values = \"\",\r\n  display = \"\",\r\n}: {\r\n  selectRef?: React.RefObject<HTMLSelectElement>;\r\n  labelRef?: React.RefObject<HTMLLabelElement>;\r\n  select: InputHTMLAttributes<HTMLSelectElement>;\r\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\r\n  datasource: Array<any>;\r\n  values: string;\r\n  display: string;\r\n}) {\r\n  const id = useId();\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"18px\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <label {...label} htmlFor={id}>\r\n        {label.title}\r\n      </label>\r\n      <select\r\n        {...select}\r\n        ref={selectRef}\r\n        className=\"select\"\r\n        style={{\r\n          height: \"18px\",\r\n          ...select.style,\r\n        }}\r\n      >\r\n        {datasource.map((itm, idx) => {\r\n          return (\r\n            <option key={idx} value={itm[values]}>\r\n              {itm[display]}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ButtonField({\r\n  buttonRetRef,\r\n  button,\r\n  tooltipText = \"\",\r\n  children,\r\n  disabled = false,\r\n}: {\r\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\r\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\r\n  tooltipText: string;\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n}) {\r\n  return (\r\n    <div className=\"tooltip\">\r\n      <button\r\n        disabled={disabled}\r\n        {...button}\r\n        ref={buttonRetRef}\r\n        style={{ ...button.style, background:!disabled ? \"transparent\" : \"#f1f1f1\" }}\r\n        className=\"tooltip-button\"\r\n      >\r\n        {children}\r\n      </button>\r\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\r\n    </div>\r\n  );\r\n}\r\n","import React, {\r\n  useState,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\n\r\nimport \"../style/datagridview.css\";\r\n\r\ninterface UpwardTablePropsType {\r\n  rows: Array<any>;\r\n  column: Array<any>;\r\n  width: number;\r\n  height: number;\r\n  dataReadOnly: boolean;\r\n  onSelectionChange?: (row: Array<any>) => void;\r\n  onKeyDown?: (row: Array<any>, key: string) => void;\r\n  isMultipleSelect?: boolean;\r\n  freeze?: boolean;\r\n  inputsearchselector?: string;\r\n  isRowSelectable?: boolean;\r\n  unSelectable?: (row: any) => boolean;\r\n  writeFooter?: (row: any) => React.ReactNode;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst UpwardTable = forwardRef(\r\n  (\r\n    {\r\n      rows,\r\n      column,\r\n      width,\r\n      height,\r\n      dataReadOnly,\r\n      onSelectionChange = () => {},\r\n      isMultipleSelect = false,\r\n      freeze = false,\r\n      onKeyDown,\r\n      inputsearchselector = \".search-input-up-on-key-down\",\r\n      isRowSelectable = true,\r\n      unSelectable = () => false,\r\n      writeFooter = () => null,\r\n      isLoading = false,\r\n    }: UpwardTablePropsType,\r\n    UpwardTableRef\r\n  ) => {\r\n    const onSelectionChangeRef = useRef(onSelectionChange);\r\n    const onKeyDownRef = useRef(onKeyDown);\r\n    const [columns, setColumns] = useState(column.filter((itm) => !itm.hide));\r\n    const [hoveredColumn, setHoveredColumn] = useState(null);\r\n    const [selectedRows, setSelectedRows] = useState<Array<number>>([0]);\r\n    const [lastSelectedRowIndex, setLastSelectedRowIndex] = useState(0);\r\n    const [selectedItems, setSelectedItems] = useState<Array<number>>([]);\r\n    const divRef = useRef<HTMLDivElement>(null);\r\n\r\n    const startResize = (index: any, e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const startX = e.clientX;\r\n      const startWidth = columns[index].width;\r\n\r\n      const doDrag = (moveEvent: any) => {\r\n        const newWidth = startWidth + (moveEvent.clientX - startX);\r\n        const updatedColumns = [...columns];\r\n        updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\r\n        setColumns(updatedColumns);\r\n      };\r\n\r\n      const stopDrag = () => {\r\n        document.removeEventListener(\"mousemove\", doDrag);\r\n        document.removeEventListener(\"mouseup\", stopDrag);\r\n      };\r\n\r\n      document.addEventListener(\"mousemove\", doDrag);\r\n      document.addEventListener(\"mouseup\", stopDrag);\r\n    };\r\n    const handleMouseEnter = (index: any) => {\r\n      setHoveredColumn(index); // Set the hovered column index\r\n    };\r\n    const handleMouseLeave = () => {\r\n      setHoveredColumn(null); // Reset hovered column index\r\n    };\r\n    const handleRowClick = (\r\n      rowIndex: any,\r\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n    ) => {\r\n      function getIndexAndData(selectedRowData: Array<any>) {\r\n        const filterSelectrowData = selectedRowData.map((d, idx) => {\r\n          if (!unSelectable(d)) {\r\n            return { idx, data: d };\r\n          }\r\n          return null;\r\n        });\r\n        const removeNullValue = filterSelectrowData.filter((d) => d !== null);\r\n        const data = removeNullValue.map((itm: any) => itm.data);\r\n        const newSelectedRowsFiltered = removeNullValue.map(\r\n          (itm: any) => itm.idx\r\n        );\r\n        return { newSelectedRowsFiltered, data };\r\n      }\r\n\r\n      if (!isMultipleSelect) {\r\n        // Single selection mode\r\n        setSelectedRows([rowIndex]);\r\n      } else {\r\n        // Multiple selection mode\r\n        if (event.shiftKey && lastSelectedRowIndex !== null) {\r\n          // Shift + Click: Select range between last clicked row and current clicked row\r\n          const rangeStart = Math.min(lastSelectedRowIndex, rowIndex);\r\n          const rangeEnd = Math.max(lastSelectedRowIndex, rowIndex);\r\n          const newSelectedRows: Array<number> = [];\r\n          for (let i = rangeStart; i <= rangeEnd; i++) {\r\n            if (!selectedRows.includes(i)) {\r\n              newSelectedRows.push(i);\r\n            }\r\n          }\r\n\r\n          let selectedItemsParams: Array<number> = [\r\n            ...selectedItems,\r\n            ...newSelectedRows,\r\n          ];\r\n\r\n          setSelectedRows([...selectedRows, ...newSelectedRows]);\r\n          const selectedRowData = rows.filter((d, idx) =>\r\n            selectedItemsParams.includes(idx)\r\n          );\r\n          const { newSelectedRowsFiltered, data } =\r\n            getIndexAndData(selectedRowData);\r\n\r\n          setSelectedItems(newSelectedRowsFiltered);\r\n          onSelectionChangeRef.current(data);\r\n        } else if (event.ctrlKey || event.metaKey) {\r\n          // Ctrl (or Cmd on macOS) + Click: Toggle row selection\r\n          if (selectedRows.includes(rowIndex) && !freeze) {\r\n            setSelectedRows(selectedRows.filter((i) => i !== rowIndex));\r\n            setSelectedItems((d) => {\r\n              d = d.filter((i) => i !== rowIndex);\r\n              return d;\r\n            });\r\n            let selectedItemsParams: Array<number> = selectedItems.filter(\r\n              (i) => i !== rowIndex\r\n            );\r\n            const selectedRowData = rows.filter((d, idx) =>\r\n              selectedItemsParams.includes(idx)\r\n            );\r\n\r\n            setSelectedItems(selectedItemsParams);\r\n            onSelectionChangeRef.current(selectedRowData);\r\n          } else {\r\n            setSelectedRows([...selectedRows, rowIndex]);\r\n            setSelectedItems((d) => {\r\n              d.push(rowIndex);\r\n              return d;\r\n            });\r\n            let selectedItemsParams: Array<number> = [\r\n              ...selectedItems,\r\n              rowIndex,\r\n            ];\r\n\r\n            const selectedRowData = rows.filter((d, idx) =>\r\n              selectedItemsParams.includes(idx)\r\n            );\r\n\r\n            setSelectedItems(selectedItemsParams);\r\n            onSelectionChangeRef.current(selectedRowData);\r\n          }\r\n        } else {\r\n          // Regular click in multiple selection mode: Single click to select a row\r\n          setSelectedRows([rowIndex]);\r\n        }\r\n      }\r\n      setLastSelectedRowIndex(rowIndex); // Update the last selected index\r\n    };\r\n    const handleRowDoubleClick = (\r\n      rowIndex: any,\r\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n    ) => {\r\n      const row = rows[rowIndex];\r\n      if (unSelectable(row)) return;\r\n      if (!isRowSelectable) return;\r\n\r\n      let selectedItemsParams: Array<number> = [];\r\n\r\n      if (selectedItems.includes(rowIndex) && !freeze) {\r\n        selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\r\n        setSelectedItems(selectedItemsParams);\r\n        const selectedRowData = rows.filter((d, idx) =>\r\n          selectedItemsParams.includes(idx)\r\n        );\r\n        onSelectionChangeRef.current(selectedRowData);\r\n\r\n        return;\r\n      }\r\n\r\n      if (isMultipleSelect) {\r\n        selectedItemsParams = [...selectedItems, rowIndex];\r\n      } else {\r\n        selectedItemsParams = [rowIndex];\r\n      }\r\n\r\n      setSelectedItems(selectedItemsParams);\r\n      const selectedRowData = rows.filter((d, idx) =>\r\n        selectedItemsParams.includes(idx)\r\n      );\r\n      onSelectionChangeRef.current(selectedRowData);\r\n    };\r\n    const handleKeyDown = (e: any) => {\r\n      if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\r\n        e.preventDefault();\r\n        if (!isRowSelectable) return;\r\n\r\n        let selectedItemsParams: Array<number> = [];\r\n        const rowIndex = selectedRows[selectedRows.length - 1];\r\n        if (isMultipleSelect) {\r\n          selectedItemsParams = [...selectedItems, ...selectedRows];\r\n        } else {\r\n          selectedItemsParams = [rowIndex];\r\n        }\r\n        const row = rows[selectedItemsParams[selectedItemsParams.length - 1]];\r\n        if (unSelectable(row)) {\r\n          return;\r\n        }\r\n\r\n        if (selectedItems.includes(rowIndex) && !freeze) {\r\n          selectedItemsParams = selectedItems.filter((i) => i !== rowIndex);\r\n          setSelectedItems(selectedItemsParams);\r\n          onSelectionChangeRef.current([]);\r\n          return;\r\n        }\r\n\r\n        setSelectedItems(selectedItemsParams);\r\n        onSelectionChangeRef.current([row]);\r\n      } else if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setSelectedRows((prevIndex: any) => {\r\n          if (prevIndex[prevIndex.length - 1] === null) return [0];\r\n          if (prevIndex[prevIndex.length - 1] >= rows.length - 1) {\r\n            return [rows.length - 1];\r\n          }\r\n          const newPrevIndex = prevIndex[prevIndex.length - 1] + 1;\r\n          const row = document.querySelector(`.row-${newPrevIndex}`);\r\n          row?.querySelector(\"input\")?.focus();\r\n\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n          return [newPrevIndex];\r\n        });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n\r\n        if (selectedRows[selectedRows.length - 1] === 0) {\r\n          const input = document.querySelector(\r\n            inputsearchselector\r\n          ) as HTMLInputElement;\r\n          if (input && input.tagName === \"INPUT\") {\r\n            input?.focus();\r\n          } else if (input && input.tagName === \"DIV\") {\r\n            const divInput = document.querySelector(\r\n              `${inputsearchselector} input`\r\n            ) as HTMLInputElement;\r\n\r\n            divInput?.focus();\r\n          }\r\n        }\r\n\r\n        setSelectedRows((prevIndex: any) => {\r\n          if (prevIndex[prevIndex.length - 1] === 0) return [0];\r\n          const newPrevIndex = prevIndex[prevIndex.length - 1] - 1;\r\n          const row = document.querySelector(`.row-${newPrevIndex}`);\r\n\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n          row?.querySelector(\"input\")?.focus();\r\n          return [newPrevIndex];\r\n        });\r\n      } else if (e.key === \"Delete\" || e.key === \"Backspace\") {\r\n        if (!isRowSelectable) return;\r\n\r\n        const selectedRowData = rows.filter((d, idx) =>\r\n          selectedRows.includes(idx)\r\n        );\r\n\r\n        if (onKeyDownRef?.current) {\r\n          onKeyDownRef?.current(selectedRowData, e.key);\r\n        }\r\n      }\r\n    };\r\n    useImperativeHandle(UpwardTableRef, () => ({\r\n      resetTableSelected: () => {\r\n        setSelectedRows([0]);\r\n        setLastSelectedRowIndex(0);\r\n        setSelectedItems([]);\r\n        if (rows.length > 0) {\r\n          const row = document.querySelector(`.row-${0}`);\r\n          row?.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n        }\r\n      },\r\n      getSelectedRows: () => {\r\n        return rows.filter((d, idx) => selectedItems.includes(idx));\r\n      },\r\n    }));\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        onKeyDown={handleKeyDown}\r\n      >\r\n        <div className=\"table-frame-color\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: `${width - 10}px        `,\r\n              height: `${height - 135}px`,\r\n            }}\r\n            className=\"table-frame\"\r\n          >\r\n            <div className=\"table-panel\">\r\n              <div ref={divRef} className={`grid-container `} tabIndex={-1}>\r\n                <div\r\n                  className=\"grid-row grid-header\"\r\n                  style={{\r\n                    position: \"sticky\",\r\n                    zIndex: \"10\",\r\n                    top: \"-1px\",\r\n                    background: \"white\",\r\n                  }}\r\n                >\r\n                  {columns.map((col: any, index: number) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`grid-cell header-cell ${\r\n                        hoveredColumn === index ? `highlight-column` : \"\"\r\n                      }\r\n                      \r\n                      `} // Add the class if hovered\r\n                      style={{\r\n                        width: col.width,\r\n                        height: \"20px\",\r\n                        textAlign: col.type === \"number\" ? \"center\" : \"left\",\r\n                      }}\r\n                    >\r\n                      <input\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        defaultValue={col.headerName}\r\n                        readOnly\r\n                        onChange={(e) => {}}\r\n                      />\r\n                      <div\r\n                        className=\"resize-handle\"\r\n                        onMouseDown={(e) => startResize(index, e)}\r\n                        onMouseEnter={(e) => {\r\n                          e.preventDefault();\r\n                          handleMouseEnter(index);\r\n                        }} // On hover\r\n                        onMouseLeave={(e) => {\r\n                          e.preventDefault();\r\n                          handleMouseLeave();\r\n                        }} // On mouse leave\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                {rows.map((row: any, rowIndex: any) => (\r\n                  <div\r\n                    className={`grid-row row-${rowIndex}`} // Highlight selected row\r\n                    key={rowIndex}\r\n                    onClick={(e) => handleRowClick(rowIndex, e)}\r\n                    onDoubleClick={(e) => handleRowDoubleClick(rowIndex, e)}\r\n                  >\r\n                    {columns.map((col: any, colIndex: number) => (\r\n                      <div\r\n                        key={colIndex}\r\n                        style={{ width: col.width }}\r\n                        className={`grid-cell ${\r\n                          hoveredColumn === colIndex ? `highlight-column` : \"\"\r\n                        }`}\r\n                      >\r\n                        <input\r\n                          value={row[col.field]}\r\n                          onChange={(e) => {}}\r\n                          readOnly={dataReadOnly}\r\n                          className={`${\r\n                            selectedRows.includes(rowIndex)\r\n                              ? \"selected-row\"\r\n                              : \"\"\r\n                          } ${\r\n                            selectedItems.includes(rowIndex)\r\n                              ? \"selected-items\"\r\n                              : \"\"\r\n                          }\r\n                          ${col.type === \"number\" ? \"number\" : \"text\"}\r\n                          `}\r\n                        />\r\n                        <div\r\n                          className=\"resize-handle\"\r\n                          onMouseDown={(e) => {\r\n                            e.preventDefault();\r\n                            startResize(colIndex, e);\r\n                          }}\r\n                          onMouseEnter={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseEnter(colIndex);\r\n                          }} // On hover\r\n                          onMouseLeave={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseLeave();\r\n                          }} // On mouse leave\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {writeFooter(rows) ? (\r\n            <>{writeFooter(rows)}</>\r\n          ) : (\r\n            <div className=\"table-panel-footer\">Records : {rows.length}</div>\r\n          )}\r\n        </div>\r\n        {isLoading && (\r\n          <div className=\"table-loading\">\r\n            <div className=\"loader\">\r\n              <img\r\n                alt=\"loader-gif\"\r\n                src={process.env.REACT_APP_IMAGE_URL + \"/image/loading.gif\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default UpwardTable;\r\n","import { useEffect, useRef, useState, useId } from \"react\";\r\nimport \"../style/upwardtablemodel.css\";\r\nimport { TextInput } from \"../components/UpwardFields\";\r\nimport UpwardTable from \"../components/UpwardTable\";\r\nimport { throttle } from \"lodash\";\r\nimport { AxiosInstance } from \"axios\";\r\nimport { User } from \"../components/AuthContext\";\r\nimport { useMutation } from \"react-query\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\ninterface UseUpwardTableModalProps {\r\n  myAxios: AxiosInstance;\r\n  user: User | null;\r\n  column: Array<any>;\r\n  link: {\r\n    url: string;\r\n    queryUrlName: string;\r\n  };\r\n  onSelectionChange: (selectedRow: any) => void;\r\n  onModalClose?: () => void;\r\n  responseDataKey: string;\r\n}\r\nexport const useUpwardTableModal = ({\r\n  myAxios,\r\n  user,\r\n  column,\r\n  link,\r\n  onSelectionChange,\r\n  responseDataKey,\r\n  onModalClose = () => {},\r\n}: UseUpwardTableModalProps) => {\r\n  const id = useId();\r\n  const inputSearchRef = useRef<HTMLInputElement>(null);\r\n  const tableRef = useRef<any>(null);\r\n  const parentRef = useRef<any>(null);\r\n  const [show, setShowModal] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const { isLoading, mutate } = useMutation({\r\n    mutationKey: id,\r\n    mutationFn: async (variable: any) =>\r\n      await myAxios.get(\r\n        `${link?.url}?${link?.queryUrlName}=${variable.search}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        }\r\n      ),\r\n    onSuccess: (res) => {\r\n      const response = res as any;\r\n      setRows(response.data[responseDataKey]);\r\n    },\r\n  });\r\n  const performSearch = (query: string) => {\r\n    if (query === \"\") {\r\n      mutate({ search: query });\r\n    }\r\n  };\r\n  // Throttle the search function to limit it to once every 500ms\r\n  const throttledSearch = throttle((query) => performSearch(query), 500);\r\n  const openModal = (search: string) => {\r\n    mutate({ search: search });\r\n    setShowModal(true);\r\n    setTimeout(() => {\r\n      if (inputSearchRef.current) {\r\n        inputSearchRef.current.value = search;\r\n      }\r\n      inputSearchRef.current?.focus();\r\n    }, 150);\r\n  };\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n    onModalClose();\r\n  };\r\n\r\n  const width = 460;\r\n  const height = 560;\r\n\r\n  useEffect(() => {\r\n    if (show && parentRef.current) {\r\n      parentRef.current?.focus();\r\n    }\r\n  }, [show, parentRef]);\r\n\r\n  const Modal = show ? (\r\n    <div\r\n      className=\"modal-parent\"\r\n      ref={parentRef}\r\n      tabIndex={-1}\r\n      onKeyDown={(e) => {\r\n        if (e.key === \"Escape\") {\r\n          closeModal();\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <TextInput\r\n          label={{ style: { display: \"none\" } }}\r\n          input={{\r\n            className: \"search-input-up-on-key-down\",\r\n            type: \"text\",\r\n            style: { width: \"100%\", marginBottom: \"20px\" },\r\n            onChange: (e) => {\r\n              e.preventDefault();\r\n              throttledSearch(e.currentTarget.value);\r\n            },\r\n            onKeyDown: (e) => {\r\n              if (e.key === \"Enter\" || e.key === \"NumpadEnter\") {\r\n                e.preventDefault();\r\n                mutate({ search: (e.target as any).value });\r\n              }\r\n              if (e.key === \"ArrowDown\") {\r\n                e.preventDefault();\r\n                const datagridview = document.querySelector(\r\n                  `.grid-container`\r\n                ) as HTMLDivElement;\r\n                console.log(datagridview);\r\n                datagridview.focus();\r\n              }\r\n            },\r\n          }}\r\n          inputRef={inputSearchRef}\r\n        />\r\n        <UpwardTable\r\n          ref={tableRef}\r\n          rows={rows}\r\n          column={column.filter((itm) => !itm.hide)}\r\n          width={width}\r\n          height={height}\r\n          dataReadOnly={true}\r\n          onSelectionChange={onSelectionChange}\r\n          isLoading={isLoading}\r\n        />\r\n        <button className=\"close-modal\" onClick={closeModal}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"16px\"\r\n            height=\"16px\"\r\n            viewBox=\"-0.5 0 25 25\"\r\n            fill=\"none\"\r\n          >\r\n            <path\r\n              d=\"M3 21.32L21 3.32001\"\r\n              stroke=\"#000000\"\r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M3 3.32001L21 21.32\"\r\n              stroke=\"#000000\"\r\n              strokeWidth=\"1.5\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n\r\n  return {\r\n    Modal,\r\n    openModal,\r\n    closeModal,\r\n    isLoading,\r\n  };\r\n};\r\n","import React, { useContext, useState, useRef, useReducer } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Modal,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  MenuItem,\n  Menu,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { flushSync } from \"react-dom\";\nimport { LoadingButton } from \"@mui/lab\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport DriveFolderUploadIcon from \"@mui/icons-material/DriveFolderUpload\";\nimport { DisplayFile, checkFile } from \"../Claims/Claims\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { grey } from \"@mui/material/colors\";\nimport UpwardTable from \"../../../../components/UpwardTable\";\nimport { useUpwardTableModal } from \"../../../../hooks/useUpwardTableModal\";\n\nconst initialState = {\n  Sub_Ref_No: \"\",\n  Ref_No: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  search: \"\",\n  pdcMode: \"\",\n  checkMode: \"\",\n  sub_account: \"\",\n  Acronym: \"\",\n};\nconst modalPdcCheckInititalState = {\n  CheckIdx: \"0\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  Check_Count: \"\",\n};\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport const pdcColumn = [\n  { field: \"Check_No\", headerName: \"Check No.\", width: 150 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 150 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"BankName\", headerName: \"Bank\", width: 300 },\n  { field: \"Branch\", headerName: \"Branch\", width: 200 },\n  {\n    field: \"Check_Remarks\",\n    headerName: \"Checked Remarks\",\n    width: 350,\n  },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 150 },\n  { field: \"DateDeposit\", headerName: \"Date Deposit\", width: 150 },\n  { field: \"OR_No\", headerName: \"OR Num\", width: 150 },\n  { field: \"BankCode\", headerName: \"Bank Code\", width: 150, hide: true },\n];\nexport const pdcSearchColumn = [\n  { field: \"Date\", headerName: \"Date Received\", width: 160 },\n  { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n  {\n    field: \"Name\",\n    headerName: \"Name\",\n    flex: 1,\n  },\n];\nexport const pdcBanksColumn = [\n  { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n  { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n];\nconst queryKey = \"pdc\";\nconst quertKeyPDCSearch = \"pdc-search\";\n\nexport default function PostDateChecks() {\n  const tableRef = useRef<any>(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<Array<File>>([]);\n  const [pdcDataRows, setPdcDataRows] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [stateModalPdcCheck, dispatchModalPdcCheck] = useReducer(\n    reducer,\n    modalPdcCheckInititalState\n  );\n\n  const { myAxios, user } = useContext(AuthContext);\n  const dataGridFunctions = useRef<any>(null);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  // pdc form save button\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const savePDCButtonRef = useRef<HTMLButtonElement>(null);\n  const openIdsButtonRef = useRef<HTMLButtonElement>(null);\n  //check modal refs\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButtonActionRef = useRef<any>(null);\n  // search modal auto focus on load\n  const addRefButton = useRef<HTMLButtonElement>(null);\n  const queryClient = useQueryClient();\n  const table = useRef<any>(null);\n\n  const { isLoading: newRefNumberLoading, refetch: refetchNewRefNumber } =\n    useQuery({\n      queryKey: \"new-ref-number\",\n      queryFn: async () => {\n        return await myAxios.get(\"/task/accounting/pdc-new-ref-number\", {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      },\n      refetchOnWindowFocus: false,\n      onSuccess: (res) => {\n        const response = res as any;\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Sub_Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n      },\n    });\n  const { mutate, isLoading: loadingAddNew } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) => {\n      if (state.pdcMode === \"update\") {\n        delete variables.mode;\n        return await myAxios.post(\"/task/accounting/update-pdc\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-pdc\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        refetchNewRefNumber();\n        queryClient.invalidateQueries(quertKeyPDCSearch);\n        setNewStateValue(dispatch, initialState);\n        setPdcDataRows([]);\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"\",\n        });\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  //selecte search\n  const { mutate: mutateSelectedSearch, isLoading: isLoadingSelectedSearch } =\n    useMutation({\n      mutationKey: queryKey,\n      mutationFn: async (variables: any) =>\n        await myAxios.post(\"/task/accounting/get-search-pdc-check\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }),\n      onSuccess: async (res) => {\n        if (!res?.data.success) {\n          return alert(`Error : ${res?.data.message}`);\n        }\n        const response = res as any;\n        const Ref_No = response.data.getSearchPDCCheck[0].Ref_No;\n        if (response.data.upload[0]) {\n          const uploadFiles = JSON.parse(response.data.upload[0]?.upload);\n          const newObjContainerBasic = await formatDataToDocument(\n            uploadFiles,\n            `${process.env.REACT_APP_IMAGE_URL}pdc/${Ref_No}`\n          );\n          const fileSelected = await Promise.all(newObjContainerBasic);\n          setSelectedFiles(fileSelected);\n        }\n        async function formatDataToDocument(\n          dataDocument: Array<any>,\n          url: string\n        ) {\n          const newObjContainer: Array<any> = [];\n          for (let index = 0; index < dataDocument.length; index++) {\n            const basicItem = dataDocument[index];\n            const mainURL = `${url}/${basicItem.uniqueFilename}`;\n            const response = await fetch(mainURL);\n            const blob = await response.blob();\n            const file = new File([blob], basicItem.fileName, {\n              type: basicItem.fileType,\n            });\n            const reader = new FileReader();\n            newObjContainer.push(\n              new Promise((resolve, reject) => {\n                reader.onload = function (event) {\n                  resolve(file);\n                };\n                reader.onerror = function (event) {\n                  reject(new Error(\"Error reading file: \" + file.name));\n                };\n                reader.readAsDataURL(file);\n              })\n            );\n          }\n          return newObjContainer;\n        }\n\n        setPdcDataRows(\n          response.data.getSearchPDCCheck.map((item: any, idx: number) => {\n            return { ...item, CheckIdx: `${idx}` };\n          })\n        );\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.getSearchPDCCheck[0].Ref_No,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: response.data.getSearchPDCCheck[0].Name,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Date\",\n          value: response.data.getSearchPDCCheck[0].Date,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: response.data.getSearchPDCCheck[0].PNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: response.data.getSearchPDCCheck[0].IDNo,\n        });\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: response.data.getSearchPDCCheck[0].Acronym,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: response.data.getSearchPDCCheck[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: response.data.getSearchPDCCheck[0].Remarks,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"update\",\n        });\n      },\n    });\n  // policy ids search table modal\n  const {\n    Modal: ModalSearchPdcIDs,\n    closeModal: closeModalSearchPdcIDs,\n    openModal: openModalSearchPdcIDs,\n    isLoading: isLoadingModalSearchPdcIDs,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    column: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      { field: \"chassis\", headerName: \"Chassis No.\", width: 200, hide: true },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 350,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        width: 300,\n        hide: true,\n      },\n      {\n        field: \"client_id\",\n        headerName: \"client_id\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: selectedRow[0].IDNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: selectedRow[0].client_id,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: selectedRow[0].Name ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: selectedRow[0].remarks ?? \"\",\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: selectedRow[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: selectedRow[0].Acronym,\n        });\n\n        closeModalSearchPdcIDs();\n        if (pdcDataRows.length <= 0) {\n          setTimeout(() => {\n            addRefButton.current?.click();\n          }, 100);\n        }\n      }\n    },\n\n    responseDataKey: \"clientsId\",\n  });\n  // bank search table modal\n  const {\n    Modal: ModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    openModal: openModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    column: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 100 },\n      { field: \"Bank\", headerName: \"Bank Name\", width: 350 },\n    ],\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankName\",\n          value: selectedRow[0].Bank,\n        });\n\n        dispatchModalPdcCheck({\n          type: \"UPDATE_FIELD\",\n          field: \"BankCode\",\n          value: selectedRow[0].Bank_Code,\n        });\n        closeModalSearchBanks();\n        setOpenPdcInputModal(true);\n        setTimeout(() => {\n          checkBranchRef.current?.focus();\n        }, 100);\n      }\n    },\n    onModalClose: () => {\n      setTimeout(() => {\n        setOpenPdcInputModal(true);\n      }, 100);\n    },\n    responseDataKey: \"pdcBanks\",\n  });\n  // pdc search table modal\n  const {\n    Modal: UpwardPDCModal,\n    closeModal: closeUpwardPDCModal,\n    openModal: openUpwardPDCModal,\n    isLoading: isLoadingModalSearchPDC,\n  } = useUpwardTableModal({\n    myAxios,\n    user,\n    column: [\n      { field: \"Date\", headerName: \"Date Received\", width: 90 },\n      { field: \"Ref_No\", headerName: \"Ref No.\", width: 80 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        width: 320,\n      },\n    ],\n    link: {\n      url: \"/task/accounting/search-pdc\",\n      queryUrlName: \"searchPDCInput\",\n    },\n    onSelectionChange: (selectedRow: any) => {\n      if (selectedRow.length > 0) {\n        mutateSelectedSearch({ ref_no: selectedRow[0].Ref_No });\n        closeUpwardPDCModal();\n        if (searchRef.current) {\n          searchRef.current?.focus();\n        }\n      }\n    },\n    responseDataKey: \"searchPDC\",\n  });\n\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  const handleModalInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchModalPdcCheck({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  async function handleOnSave(e: any) {\n    if (state.PNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide loan information!\",\n        timer: 1500,\n      }).then(() => {\n        setTimeout(() => {\n          openIdsButtonRef.current?.click();\n        }, 350);\n      });\n    }\n    if (pdcDataRows.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide entry!\",\n        timer: 1500,\n      }).then(() => {\n        setOpenPdcInputModal(true);\n      });\n    }\n    if (state.PNo.length >= 45) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Pno is too long!\",\n        timer: 1500,\n      });\n    }\n    if (state.Remarks.length >= 220) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Remarks is too long!\",\n        timer: 1500,\n      });\n    }\n    const filePromises: Array<any> = [];\n    function fileTransfer(filePromises: Array<any>) {\n      const files = selectedFiles;\n      if (files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const reader = new FileReader();\n          filePromises.push(\n            new Promise((resolve, reject) => {\n              reader.onload = function (event) {\n                resolve({\n                  datakey: \"pdc_file\",\n                  fileName: file.name,\n                  fileContent: event.target?.result,\n                  fileType: file.type,\n                  file,\n                });\n              };\n              reader.onerror = function (event) {\n                reject(new Error(\"Error reading file: \" + file.name));\n              };\n              reader.readAsDataURL(file);\n            })\n          );\n        }\n      }\n    }\n    fileTransfer(filePromises);\n    const fileToSave = await Promise.all(filePromises);\n    const stateSubmited = {\n      Ref_No: state.Ref_No,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      Remarks: state.Remarks,\n      BankCode: state.BankCode,\n      checks: JSON.stringify(pdcDataRows),\n    };\n    if (state.pdcMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...stateSubmited, userCodeConfirmation, fileToSave });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...stateSubmited, fileToSave });\n        },\n      });\n    }\n  }\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const fileList = e.dataTransfer.files;\n    const files = Array.from(fileList);\n    const newFiles = [...selectedFiles, ...files];\n    setIsDragging(false);\n    if (checkFile(newFiles)) {\n      fileInputRef.current?.click();\n      return alert(\"file is not valid Extention!\");\n    } else {\n      setSelectedFiles(newFiles);\n    }\n  };\n  const clickPDCReceipt = () => {\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(pdcDataRows));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"pdc\");\n      localStorage.setItem(\"state\", JSON.stringify(state));\n      localStorage.setItem(\n        \"column\",\n        JSON.stringify([\n          { datakey: \"Check_No\", header: \"CHECK NO\", width: \"80px\" },\n          { datakey: \"Check_Date\", header: \"DATE\", width: \"130px\" },\n          { datakey: \"BankName\", header: \"BANK\", width: \"240px\" },\n          { datakey: \"Check_Amnt\", header: \"AMOUNT\", width: \"70px\" },\n          { datakey: \"SEQ\", header: \"SEQ\", width: \"30px\" },\n        ])\n      );\n\n      localStorage.setItem(\n        \"title\",\n        user?.department === \"UMIS\"\n          ? \"UPWARD MANAGEMENT INSURANCE SERVICES\\n Post Date Checks Receipt\"\n          : \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n Post Date Checks Receipt\"\n      );\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const clickPDCLabeling = () => {\n    let printString = () => {\n      return (\n        <div>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              marginTop: \"8px\",\n              marginBottom: 0,\n            }}\n          >\n            UCSMI\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.Name}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.IDNo}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: \"20px\",\n            }}\n          >\n            {state.Ref_No}\n          </p>\n        </div>\n      );\n    };\n\n    flushSync(() => {\n      const elementString = ReactDOMServer.renderToString(printString());\n      localStorage.setItem(\"printString\", elementString);\n      localStorage.removeItem(\"dataString\");\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const onSelectionChange = (selectedRow: any) => {\n    if (selectedRow.length > 0) {\n      const rowSelected = selectedRow[0];\n\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"update\",\n      });\n      setNewStateValue(dispatchModalPdcCheck, rowSelected);\n      flushSync(() => {\n        setOpenPdcInputModal(true);\n      });\n      checkModalSaveButtonActionRef.current?.focusVisible();\n    } else {\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"checkMode\",\n        value: \"\",\n      });\n    }\n  };\n  const isDisableField = state.pdcMode === \"\";\n  const width = window.innerWidth - 50;\n  const height = window.innerHeight - 145;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n        background: \"red\",\n        padding: \"10px\",\n        backgroundColor: \"#F8F8FF\",\n      }}\n    >\n      {UpwardPDCModal}\n      {ModalSearchPdcIDs}\n      {ModalSearchBanks}\n      <Box\n        sx={(theme) => ({\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"20px\",\n          [theme.breakpoints.down(\"sm\")]: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            flex: 1,\n            marginBottom: \"15px\",\n          },\n        })}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n            marginBottom: \"15px\",\n          }}\n        >\n          {isLoadingModalSearchPDC ? (\n            <LoadingButton loading={isLoadingModalSearchPDC} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              value={state.search}\n              onChange={handleInputChange}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  openUpwardPDCModal((e.target as HTMLInputElement).value);\n                }\n                if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const datagridview = document.querySelector(\n                    `.grid-container`\n                  ) as HTMLDivElement;\n                  datagridview.focus();\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n                inputRef: searchRef,\n                className: \"manok\",\n              }}\n              sx={{\n                width: \"400px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n          {state.pdcMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              color=\"primary\"\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"pdcMode\",\n                  value: \"add\",\n                });\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            ref={savePDCButtonRef}\n            id=\"save-entry-header\"\n            color=\"success\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={handleOnSave}\n            disabled={state.pdcMode === \"\"}\n            loading={loadingAddNew}\n            startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n          >\n            Save\n          </LoadingButton>\n          {(state.pdcMode === \"add\" || state.pdcMode === \"update\") && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    initialState.Sub_Ref_No = state.Sub_Ref_No;\n                    initialState.Ref_No = state.Sub_Ref_No;\n                    setNewStateValue(dispatch, initialState);\n                    setPdcDataRows([]);\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"pdcMode\",\n                      value: \"\",\n                    });\n                  }\n                });\n              }}\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          )}\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            disabled={state.pdcMode === \"\"}\n            variant=\"contained\"\n            startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n            onClick={() => {\n              const getLastCheck_No: any = pdcDataRows[pdcDataRows.length - 1];\n              modalPdcCheckInititalState.Check_No = incrementCheckNo(\n                getLastCheck_No?.Check_No\n              );\n              setNewStateValue(\n                dispatchModalPdcCheck,\n                modalPdcCheckInititalState\n              );\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"\",\n              });\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n\n              if (state.checkMode !== \"update\") {\n                checkNoRef.current?.focus();\n              }\n            }}\n            ref={addRefButton}\n          >\n            Add Check\n          </Button>\n          <div>\n            <Button\n              disabled={state.pdcMode !== \"update\"}\n              id=\"basic-button\"\n              aria-controls={open ? \"basic-menu\" : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? \"true\" : undefined}\n              onClick={handleClick}\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n                color: \"white\",\n                backgroundColor: grey[600],\n                \"&:hover\": {\n                  backgroundColor: grey[700],\n                },\n              }}\n            >\n              Print\n            </Button>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                \"aria-labelledby\": \"basic-button\",\n              }}\n            >\n              <MenuItem onClick={clickPDCReceipt}>PDC Receipt</MenuItem>\n              <MenuItem onClick={clickPDCLabeling}>PDC Labeling</MenuItem>\n            </Menu>\n          </div>\n        </div>\n      </Box>\n      <form\n        onKeyDown={(e) => {\n          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n            e.preventDefault();\n            return;\n          }\n        }}\n        style={{\n          marginBottom: \"20px\",\n        }}\n      >\n        <Box\n          sx={(theme) => ({\n            display: \"flex\",\n            columnGap: \"15px\",\n            flexDirection: \"row\",\n            [theme.breakpoints.down(\"md\")]: {\n              flexDirection: \"column\",\n              rowGap: \"10px\",\n            },\n          })}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: \"10px\",\n              width: \"100%\",\n            }}\n          >\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                } as any\n              }\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                }}\n              >\n                {newRefNumberLoading ? (\n                  <LoadingButton loading={newRefNumberLoading} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"pdc-id-field\">\n                      Reference No.\n                    </InputLabel>\n                    <OutlinedInput\n                      readOnly={user?.department !== \"UCSMI\"}\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                        fieldset: { borderColor: \"black\" },\n                      }}\n                      disabled={isDisableField}\n                      label=\"Reference No.\"\n                      name=\"Ref_No\"\n                      value={state.Ref_No}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          return savePDCButtonRef.current?.click();\n                        }\n                      }}\n                      id=\"pdc-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  fullWidth={true}\n                  disabled={isDisableField}\n                  label=\"Date Received\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n              </div>\n              <TextField\n                InputLabelProps={{\n                  sx: {\n                    color: \"black\",\n                  },\n                }}\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Remarks\"\n                value={state.Remarks}\n                onChange={handleInputChange}\n                disabled={isDisableField}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    savePDCButtonRef.current?.click();\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  fieldset: { borderColor: \"black\" },\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </fieldset>\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  flexDirection: \"column\",\n                } as any\n              }\n            >\n              <div\n                style={{ width: \"100%\", flex: 1, display: \"flex\", gap: \"10px\" }}\n              >\n                {isLoadingModalSearchPdcIDs ? (\n                  <LoadingButton loading={isLoadingModalSearchPdcIDs} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">\n                      PN/Client ID\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        fieldset: { borderColor: \"black\" },\n\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          openIdsButtonRef.current?.click();\n                        }\n                      }}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            ref={openIdsButtonRef}\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => openModalSearchPdcIDs(state.PNo)}\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Acronym\"\n                  value={state.Acronym}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{ width: \"100%\", display: \"flex\", columnGap: \"10px\" }}\n              >\n                <TextField\n                  InputLabelProps={{\n                    sx: {\n                      color: \"black\",\n                    },\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    fieldset: { borderColor: \"black\" },\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <Button\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={state.pdcMode === \"\"}\n                  variant=\"contained\"\n                  startIcon={<DownloadIcon sx={{ width: 15, height: 15 }} />}\n                  onClick={() => {\n                    setShowModal(true);\n                  }}\n                >\n                  Upload Check\n                </Button>\n              </div>\n            </fieldset>\n          </Box>\n        </Box>\n      </form>\n      <UpwardTable\n        ref={tableRef}\n        rows={pdcDataRows}\n        column={pdcColumn}\n        width={width}\n        height={height}\n        dataReadOnly={true}\n        onSelectionChange={onSelectionChange}\n        onKeyDown={(row, key) => {\n          if (key === \"Delete\" || key === \"Backspace\") {\n            const rowSelected = row[0];\n            if (\n              (rowSelected.Deposit_Slip && rowSelected.Deposit_Slip !== \"\") ||\n              (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n              (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n            ) {\n              return Swal.fire({\n                position: \"center\",\n                icon: \"warning\",\n                title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n                showConfirmButton: false,\n                timer: 1500,\n              });\n            }\n            const timeout = setTimeout(() => {\n              Swal.fire({\n                title: \"Are you sure?\",\n                text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n                icon: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\",\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  return setPdcDataRows((dt) => {\n                    return dt.filter(\n                      (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n                    );\n                  });\n                }\n                table.current?.removeSelection();\n              });\n              clearTimeout(timeout);\n            }, 250);\n          }\n        }}\n        inputsearchselector=\".manok\"\n        isLoading={isLoadingSelectedSearch}\n      />\n\n      <Modal\n        open={openPdcInputModal}\n        onClose={() => {\n          table.current?.removeSelection();\n          setOpenPdcInputModal(false);\n        }}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\" as \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"auto\",\n            bgcolor: \"background.paper\",\n            p: 4,\n          }}\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Check Detail\n          </Typography>\n          <br />\n          <div\n            style={{\n              display: \"flex\",\n              columnGap: \"10px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"10px\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Check No.\"\n                name=\"Check_No\"\n                value={stateModalPdcCheck.Check_No}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkNoRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {isLoadingModalSearchbanks ? (\n                <LoadingButton loading={isLoadingModalSearchbanks} />\n              ) : (\n                <FormControl\n                  sx={{\n                    width: \"100%\",\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                  <OutlinedInput\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                    inputRef={checkBankRef}\n                    fullWidth\n                    label=\"Bank\"\n                    name=\"BankName\"\n                    value={stateModalPdcCheck.BankName}\n                    onChange={handleModalInputChange}\n                    id=\"label-input-id\"\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        setOpenPdcInputModal(false);\n\n                        return openModalSearchBanks(\n                          stateModalPdcCheck.BankName\n                        );\n                      }\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"search-client\"\n                          color=\"secondary\"\n                          edge=\"end\"\n                          onClick={() => {\n                            setOpenPdcInputModal(false);\n\n                            openModalSearchBanks(stateModalPdcCheck.BankName);\n                          }}\n                        >\n                          <PolicyIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"Branch\"\n                value={stateModalPdcCheck.Branch}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkBranchRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Check_Remarks\"\n                value={stateModalPdcCheck.Check_Remarks}\n                onChange={handleModalInputChange}\n                rows={4}\n                multiline\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"auto\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"auto\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                flexDirection: \"column\",\n              }}\n            >\n              <CustomDatePicker\n                label=\"Check Dated\"\n                onChange={(value: any) => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateModalPdcCheck.Check_Date)}\n                inputRef={checkDateRef}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"Check_Amnt\"\n                value={stateModalPdcCheck.Check_Amnt}\n                onChange={handleModalInputChange}\n                placeholder=\"0.00\"\n                onBlur={() => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Amnt\",\n                    value: parseFloat(\n                      stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  inputRef: checkAmountRef,\n                }}\n                sx={{\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {state.checkMode !== \"update\" && (\n                <TextField\n                  type=\"number\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check Count\"\n                  name=\"Check_Count\"\n                  value={stateModalPdcCheck.Check_Count}\n                  onChange={handleModalInputChange}\n                  placeholder=\"0\"\n                  onKeyDown={(e: any) => {\n                    const validCode = [\"Enter\", \"NumpadEnter\"];\n                    if (validCode.includes(e.code)) {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputProps: {\n                      min: 1,\n                      type: \"text\",\n                      pattern: \"[0-9]*\",\n                    },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              width: \"100%\",\n              marginTop: \"10px\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveButtonActionRef}\n                color=\"primary\"\n                variant=\"contained\"\n                autoFocus={state.checkMode !== \"\"}\n                onClick={() => {\n                  if (state.checkMode === \"update\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Update Check ${stateModalPdcCheck.Check_No}`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n                      modalCheckAddUpdate();\n                    });\n                  }\n                  modalCheckAddUpdate();\n\n                  function modalCheckAddUpdate() {\n                    if (\n                      state.checkMode !== \"update\" &&\n                      pdcDataRows\n                        .map((item: any) => item.Check_No)\n                        .includes(stateModalPdcCheck.Check_No)\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Check is already exist!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n                    if (\n                      parseInt(stateModalPdcCheck.Check_Amnt) <= 0 ||\n                      isNaN(parseInt(stateModalPdcCheck.Check_Amnt))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check amount!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide bank!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide branch!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_No.length >= 40) {\n                      return Swal.fire({\n                        text: \"Check No is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_Amnt.length >= 200) {\n                      return Swal.fire({\n                        text: \"Check Amount is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch.length >= 45) {\n                      return Swal.fire({\n                        text: \"Branch is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_Remarks.length >= 220) {\n                      return Swal.fire({\n                        text: \"Remarks is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    stateModalPdcCheck.Check_Amnt = parseFloat(\n                      stateModalPdcCheck.Check_Amnt.toString().replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      style: \"decimal\",\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    stateModalPdcCheck.Check_Date = new Date(\n                      stateModalPdcCheck.Check_Date\n                    ).toLocaleDateString(\"en-US\", {\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                      year: \"numeric\",\n                    });\n                    const checkContainer: any = [];\n                    if (\n                      !isNaN(parseInt(stateModalPdcCheck.Check_Count)) &&\n                      parseInt(stateModalPdcCheck.Check_Count) > 0 &&\n                      state.checkMode !== \"update\"\n                    ) {\n                      for (\n                        let i = 0;\n                        i < parseInt(stateModalPdcCheck.Check_Count);\n                        i++\n                      ) {\n                        let CheckIdx = (\n                          pdcDataRows.length > 0\n                            ? parseInt(\n                                (pdcDataRows[pdcDataRows.length - 1] as any)\n                                  .CheckIdx\n                              ) +\n                              (i + 1)\n                            : i\n                        ).toString();\n\n                        const currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + i);\n                        const data: any = {\n                          CheckIdx,\n                          Check_No: incrementStringNumbers(\n                            stateModalPdcCheck.Check_No,\n                            i\n                          ),\n                          Check_Date: currentDate.toLocaleDateString(\"en-US\", {\n                            month: \"2-digit\",\n                            day: \"2-digit\",\n                            year: \"numeric\",\n                          }),\n                          Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                          BankName: stateModalPdcCheck.BankName,\n                          BankCode: stateModalPdcCheck.BankCode,\n                          Branch: stateModalPdcCheck.Branch,\n                          Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                          Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                          DateDeposit: stateModalPdcCheck.DateDeposit,\n                          OR_No: stateModalPdcCheck.OR_No,\n                        };\n\n                        if (\n                          state.checkMode !== \"update\" &&\n                          pdcDataRows\n                            .map((item: any) => item.Check_No)\n                            .includes(data.Check_No)\n                        ) {\n                          setOpenPdcInputModal(false);\n                          return Swal.fire({\n                            text: \"Check is already exist!\",\n                            icon: \"warning\",\n                            showCancelButton: false,\n                            timer: 1500,\n                          }).then(() => {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkNoRef.current?.focus();\n                          });\n                        }\n\n                        checkContainer.push(data);\n                      }\n                      setPdcDataRows((d: any) => {\n                        d = [...d, ...checkContainer];\n                        return d;\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      });\n\n                      return;\n                    }\n\n                    function incrementStringNumbers(\n                      str: string,\n                      increment: number\n                    ) {\n                      let num = parseInt(str);\n                      num = num + increment;\n                      return num.toString().padStart(str.length, \"0\");\n                    }\n\n                    setPdcDataRows((dt: any) => {\n                      let CheckIdx = \"\";\n                      if (dt.length <= 0) {\n                        CheckIdx = \"0\";\n                      } else if (state.checkMode === \"update\") {\n                        CheckIdx = stateModalPdcCheck.CheckIdx;\n                      } else {\n                        CheckIdx = (\n                          parseInt(dt[dt.length - 1].CheckIdx) + 1\n                        ).toString();\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: CheckIdx,\n                      });\n\n                      const data: any = {\n                        Check_No: stateModalPdcCheck.Check_No,\n                        Check_Date: stateModalPdcCheck.Check_Date,\n                        Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                        BankName: stateModalPdcCheck.BankName,\n                        BankCode: stateModalPdcCheck.BankCode,\n                        Branch: stateModalPdcCheck.Branch,\n                        Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                        Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                        DateDeposit: stateModalPdcCheck.DateDeposit,\n                        OR_No: stateModalPdcCheck.OR_No,\n                      };\n                      if (state.checkMode === \"update\") {\n                        dt = dt.map((items: any) => {\n                          if (items.CheckIdx === CheckIdx) {\n                            items = { ...items, ...data };\n                          }\n                          return items;\n                        });\n                      } else {\n                        dt = [...dt, { CheckIdx, ...data }];\n                      }\n                      return dt;\n                    });\n\n                    setOpenPdcInputModal(false);\n\n                    Swal.fire({\n                      text:\n                        state.checkMode === \"update\"\n                          ? \"Check Update Successfully\"\n                          : \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                    }).then(() => {\n                      if (state.checkMode !== \"update\") {\n                        var currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + 1);\n\n                        dispatchModalPdcCheck({\n                          type: \"UPDATE_FIELD\",\n                          field: \"Check_Date\",\n                          value: currentDate,\n                        });\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                        ),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value:\n                          state.checkMode === \"update\"\n                            ? stateModalPdcCheck.Check_No\n                            : incrementCheckNo(stateModalPdcCheck.Check_No),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(true);\n                      });\n                      checkModalSaveButtonActionRef.current.focusVisible();\n                    });\n                  }\n                }}\n              >\n                {state.checkMode === \"update\" ? \"Update\" : \"Save\"}\n              </Button>\n              {state.checkMode === \"update\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Delete Check ${stateModalPdcCheck.Check_No} `,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n\n                      setPdcDataRows((dt) => {\n                        dt = dt.filter(\n                          (items: any) =>\n                            items.CheckIdx !== stateModalPdcCheck.CheckIdx\n                        );\n                        return dt;\n                      });\n                      dataGridFunctions.current?.removeSelection();\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  setNewStateValue(\n                    dispatchModalPdcCheck,\n                    modalPdcCheckInititalState\n                  );\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n              <IconButton\n                style={{\n                  position: \"absolute\",\n                  top: \"10px\",\n                  right: \"10px\",\n                }}\n                aria-label=\"search-client\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <div\n        style={{\n          display: showModal ? \"flex\" : \"none\",\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(158, 155, 157, 0.31)\",\n          zIndex: \"999\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: \"90%\",\n            height: \"90%\",\n          }}\n        >\n          <div\n            style={{\n              width: \"90%\",\n              height: \"90%\",\n              overflow: \"auto\",\n              background: \"white\",\n              padding: \"20px\",\n              margin: \"auto\",\n              zIndex: \"9929\",\n              boxShadow: \" -1px 1px 13px 6px rgba(0,0,0,0.54)\",\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                position: \"relative\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <IconButton\n                sx={{\n                  position: \"absolute\",\n                  right: \"5px\",\n                  top: \"5px\",\n                }}\n                onClick={() => {\n                  setShowModal(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"500px\",\n                  border: isDragging ? \"5px dashed green\" : \"5px dashed grey\",\n                  overflow: \"auto\",\n                  padding: \"10px\",\n                }}\n                onDragEnter={handleDragEnter}\n                onDragOver={(e) => e.preventDefault()}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div\n                  id=\"upload-container\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexWrap: \"wrap\",\n                  }}\n                  onDragEnter={handleDragEnter}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                >\n                  {selectedFiles.map((itm, idx) => {\n                    return (\n                      <DisplayFile\n                        key={idx}\n                        itm={itm}\n                        selectedFiles={selectedFiles}\n                        setSelectedFiles={setSelectedFiles}\n                        fileInput={fileInputRef}\n                      />\n                    );\n                  })}\n                </div>\n                {selectedFiles.length <= 0 && (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"50%\",\n                      left: \"50%\",\n                      transform: \"translate(-50%,-50%)\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <DriveFolderUploadIcon\n                      sx={{ fontSize: \"20em\", color: \"#64748b\" }}\n                    />\n                  </div>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  style={{ display: \"none\", background: \"white\" }}\n                  id=\"input-file\"\n                  onChange={(e) => {\n                    const fileList = e.target.files as FileList;\n                    const files = Array.from(fileList);\n                    const newFiles = [...selectedFiles, ...files];\n                    if (checkFile(newFiles)) {\n                      return alert(\"file is not valid Extention!\");\n                    }\n                    setSelectedFiles(newFiles);\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                }}\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    const inputFile = document.getElementById(\"input-file\");\n                    inputFile?.click();\n                  }}\n                >\n                  CLick it to upload\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nexport function incrementCheckNo(Check_No: string) {\n  if (Check_No === undefined || Check_No === null || Check_No === \"\") {\n    return \"001\";\n  }\n\n  let incrementedNumber = (parseInt(Check_No) + 1).toString();\n  while (incrementedNumber.length < Check_No.length) {\n    incrementedNumber = \"0\" + incrementedNumber;\n  }\n  return incrementedNumber;\n}\n"],"names":["TextInput","_ref","input","label","inputRef","labelRef","icon","_ref$position","position","id","useId","_jsxs","className","style","display","alignItems","children","_jsx","_objectSpread","htmlFor","ref","title","height","width","marginRight","marginLeft","SelectInput","_ref2","select","selectRef","_ref2$datasource","datasource","_ref2$values","values","_ref2$display","map","itm","idx","value","ButtonField","_ref3","buttonRetRef","button","_ref3$tooltipText","tooltipText","_ref3$disabled","disabled","background","forwardRef","UpwardTableRef","rows","column","dataReadOnly","_ref$onSelectionChang","onSelectionChange","_ref$isMultipleSelect","isMultipleSelect","_ref$freeze","freeze","onKeyDown","_ref$inputsearchselec","inputsearchselector","_ref$isRowSelectable","isRowSelectable","_ref$unSelectable","unSelectable","_ref$writeFooter","writeFooter","_ref$isLoading","isLoading","onSelectionChangeRef","useRef","onKeyDownRef","_useState","useState","filter","hide","_useState2","_slicedToArray","columns","setColumns","_useState3","_useState4","hoveredColumn","setHoveredColumn","_useState5","_useState6","selectedRows","setSelectedRows","_useState7","_useState8","lastSelectedRowIndex","setLastSelectedRowIndex","_useState9","_useState10","selectedItems","setSelectedItems","divRef","startResize","index","e","preventDefault","stopPropagation","startX","clientX","startWidth","doDrag","moveEvent","newWidth","updatedColumns","_toConsumableArray","document","addEventListener","stopDrag","removeEventListener","handleMouseEnter","handleMouseLeave","useImperativeHandle","resetTableSelected","length","row","querySelector","concat","scrollIntoView","block","behavior","getSelectedRows","d","includes","justifyContent","key","selectedItemsParams","rowIndex","i","current","prevIndex","_row$querySelector","newPrevIndex","focus","tagName","divInput","_row$querySelector2","selectedRowData","flexDirection","tabIndex","zIndex","top","col","textAlign","type","fontWeight","defaultValue","headerName","readOnly","onChange","onMouseDown","onMouseEnter","onMouseLeave","onClick","event","shiftKey","rangeStart","Math","min","rangeEnd","max","newSelectedRows","push","_getIndexAndData","removeNullValue","data","newSelectedRowsFiltered","getIndexAndData","ctrlKey","metaKey","handleRowClick","onDoubleClick","handleRowDoubleClick","colIndex","field","_Fragment","alt","src","process","useUpwardTableModal","_mutationFn","myAxios","user","link","responseDataKey","_ref$onModalClose","onModalClose","inputSearchRef","tableRef","parentRef","show","setShowModal","setRows","_useMutation","useMutation","mutationKey","mutationFn","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","variable","wrap","_context","prev","next","get","url","queryUrlName","search","headers","Authorization","accessToken","abrupt","sent","stop","apply","arguments","onSuccess","res","mutate","throttledSearch","throttle","query","performSearch","closeModal","useEffect","_parentRef$current","Modal","marginBottom","currentTarget","target","datagridview","console","log","UpwardTable","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","openModal","setTimeout","_inputSearchRef$curre","initialState","Sub_Ref_No","Ref_No","PNo","IDNo","Date","Name","Remarks","PDC_Status","Deposit_Slip","DateDeposit","OR_No","pdcMode","checkMode","sub_account","Acronym","modalPdcCheckInititalState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","Check_Count","reducer","state","action","_defineProperty","pdcColumn","pdcSearchColumn","flex","pdcBanksColumn","queryKey","quertKeyPDCSearch","PostDateChecks","_queryFn","_mutationFn2","_onSuccess","_handleOnSave","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","open","Boolean","isDragging","setIsDragging","selectedFiles","setSelectedFiles","pdcDataRows","setPdcDataRows","openPdcInputModal","setOpenPdcInputModal","showModal","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","stateModalPdcCheck","dispatchModalPdcCheck","_useContext","useContext","AuthContext","dataGridFunctions","searchRef","fileInputRef","savePDCButtonRef","openIdsButtonRef","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","checkModalSaveButton","checkModalSaveButtonActionRef","addRefButton","queryClient","useQueryClient","table","_useQuery","useQuery","queryFn","refetchOnWindowFocus","response","RefNo","pdcID","newRefNumberLoading","refetchNewRefNumber","refetch","_callee2","variables","_context2","mode","post","success","invalidateQueries","setNewStateValue","Swal","message","showConfirmButton","timer","loadingAddNew","_useMutation2","_x2","_callee3","_context3","_x3","_callee5","_formatDataToDocument","_response$data$upload","uploadFiles","newObjContainerBasic","fileSelected","formatDataToDocument","_context6","_x4","_x5","_callee4","dataDocument","newObjContainer","_loop","_context5","basicItem","mainURL","blob","file","reader","_context4","uniqueFilename","fetch","File","fileName","fileType","FileReader","Promise","resolve","reject","onload","onerror","Error","name","readAsDataURL","delegateYield","alert","getSearchPDCCheck","upload","JSON","parse","all","item","mutateSelectedSearch","isLoadingSelectedSearch","_useUpwardTableModal","selectedRow","_selectedRow$0$Name","_selectedRow$0$remark","client_id","remarks","closeModalSearchPdcIDs","_addRefButton$current","click","ModalSearchPdcIDs","openModalSearchPdcIDs","isLoadingModalSearchPdcIDs","_useUpwardTableModal2","Bank","Bank_Code","closeModalSearchBanks","_checkBranchRef$curre","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useUpwardTableModal3","_searchRef$current","ref_no","closeUpwardPDCModal","UpwardPDCModal","openUpwardPDCModal","isLoadingModalSearchPDC","handleInputChange","_e$target","handleModalInputChange","_e$target2","handleDragLeave","handleDragEnter","handleDrop","_fileInputRef$current","fileList","dataTransfer","files","Array","from","newFiles","checkFile","isDisableField","window","innerWidth","innerHeight","padding","backgroundColor","Box","sx","theme","columnGap","breakpoints","down","LoadingButton","loading","TextField","size","code","InputProps","fontSize","Button","variant","startIcon","AddIcon","color","_x6","_callee6","filePromises","fileTransfer","fileToSave","stateSubmited","_context7","_loop2","_event$target","datakey","fileContent","result","then","_openIdsButtonRef$cur","checks","stringify","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","saveCondfirmationAlert","isConfirm","SaveIcon","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","_checkNoRef$current","getLastCheck_No","incrementCheckNo","flushSync","undefined","grey","Menu","onClose","MenuListProps","MenuItem","localStorage","removeItem","setItem","header","department","elementString","ReactDOMServer","marginTop","margin","rowGap","gap","border","borderRadius","FormControl","fullWidth","InputLabel","OutlinedInput","fieldset","borderColor","_savePDCButtonRef$cur","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","_savePDCButtonRef$cur2","textField","InputLabelProps","_savePDCButtonRef$cur3","_openIdsButtonRef$cur2","PersonSearchIcon","_savePDCButtonRef$cur4","_savePDCButtonRef$cur5","DownloadIcon","_checkModalSaveButton","rowSelected","focusVisible","timeout","_table$current","dt","removeSelection","clearTimeout","_table$current2","left","transform","bgcolor","p","Typography","component","_checkModalSaveButton2","PolicyIcon","_checkModalSaveButton3","multiline","_checkModalSaveButton4","_checkModalSaveButton5","placeholder","onBlur","parseFloat","replace","toFixed","_checkModalSaveButton6","inputComponent","NumericFormatCustom","_checkModalSaveButton7","inputProps","pattern","autoFocus","_table$current3","modalCheckAddUpdate","_checkNoRef$current2","_checkNoRef$current3","parseInt","isNaN","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre2","toString","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","month","day","year","checkContainer","currentDate","setMonth","getMonth","incrementStringNumbers","_checkNoRef$current4","str","increment","num","padStart","items","_dataGridFunctions$cu","_table$current4","_table$current5","right","_table$current6","bottom","overflow","boxShadow","onDragEnter","onDragOver","onDragLeave","onDrop","flexWrap","DisplayFile","fileInput","DriveFolderUploadIcon","multiple","inputFile","getElementById","obj","Object","entries","forEach","_ref4","incrementedNumber"],"sourceRoot":""}